{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState, useRef, useEffect } from 'react';\nimport { useMergedRef, useCallbackRef, useDebouncedCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { useResizeObserver } from '../use-resize-observer.mjs';\nimport { composeEventHandlers } from '../utils/compose-event-handlers.mjs';\nimport { ScrollbarProvider } from './Scrollbar.context.mjs';\nconst Scrollbar = forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const [scrollbar, setScrollbar] = useState(null);\n  const composeRefs = useMergedRef(forwardedRef, node => setScrollbar(node));\n  const rectRef = useRef(null);\n  const prevWebkitUserSelectRef = useRef(\"\");\n  const {\n    viewport\n  } = context;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebouncedCallback(onResize, 10);\n  const handleDragScroll = event => {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x,\n        y\n      });\n    }\n  };\n  useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) {\n        handleWheelScroll(event, maxScrollPos);\n      }\n    };\n    document.addEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */jsx(ScrollbarProvider, {\n    value: {\n      scrollbar,\n      hasThumb,\n      onThumbChange: useCallbackRef(onThumbChange),\n      onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n      onThumbPositionChange: handleThumbPositionChange,\n      onThumbPointerDown: useCallbackRef(onThumbPointerDown)\n    },\n    children: /* @__PURE__ */jsx(\"div\", {\n      ...scrollbarProps,\n      ref: composeRefs,\n      \"data-mantine-scrollbar\": true,\n      style: {\n        position: \"absolute\",\n        ...scrollbarProps.style\n      },\n      onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n        event.preventDefault();\n        const mainPointer = 0;\n        if (event.button === mainPointer) {\n          const element = event.target;\n          element.setPointerCapture(event.pointerId);\n          rectRef.current = scrollbar.getBoundingClientRect();\n          prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n          document.body.style.webkitUserSelect = \"none\";\n          handleDragScroll(event);\n        }\n      }),\n      onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),\n      onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n        event.preventDefault();\n        const element = event.target;\n        if (element.hasPointerCapture(event.pointerId)) {\n          element.releasePointerCapture(event.pointerId);\n        }\n        document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n        rectRef.current = null;\n      })\n    })\n  });\n});\nexport { Scrollbar };","map":{"version":3,"names":["Scrollbar","forwardRef","props","forwardedRef","sizes","hasThumb","onThumbChange","onThumbPointerUp","onThumbPointerDown","onThumbPositionChange","onDragScroll","onWheelScroll","onResize","scrollbarProps","context","useScrollAreaContext","scrollbar","setScrollbar","useState","composeRefs","useMergedRef","node","rectRef","useRef","prevWebkitUserSelectRef","viewport","maxScrollPos","content","handleWheelScroll","useCallbackRef","handleThumbPositionChange","handleResize","useDebouncedCallback","handleDragScroll","event","current","x","clientX","left","y","clientY","top","useEffect","handleWheel","element","target","isScrollbarWheel","contains","document","addEventListener","passive","removeEventListener","useResizeObserver","jsx","ScrollbarProvider","value","children","ref","style","position","onPointerDown","composeEventHandlers","preventDefault","mainPointer","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\ScrollArea\\ScrollAreaScrollbar\\Scrollbar.tsx"],"sourcesContent":["import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useCallbackRef, useDebouncedCallback, useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { Sizes } from '../ScrollArea.types';\nimport { useResizeObserver } from '../use-resize-observer';\nimport { composeEventHandlers } from '../utils';\nimport { ScrollbarContextValue, ScrollbarProvider } from './Scrollbar.context';\n\nexport interface ScrollbarPrivateProps {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContextValue['onThumbChange'];\n  onThumbPointerUp: ScrollbarContextValue['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContextValue['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContextValue['onThumbPositionChange'];\n  onWheelScroll: (event: WheelEvent, maxScrollPos: number) => void;\n  onDragScroll: (pointerPos: { x: number; y: number }) => void;\n  onResize: () => void;\n}\n\ninterface ScrollbarProps\n  extends ScrollbarPrivateProps,\n    Omit<React.ComponentPropsWithoutRef<'div'>, 'onResize'> {}\n\nexport const Scrollbar = forwardRef<HTMLDivElement, ScrollbarProps>((props, forwardedRef) => {\n  const {\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const [scrollbar, setScrollbar] = useState<HTMLDivElement | null>(null);\n  const composeRefs = useMergedRef(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = useRef<string>('');\n  const { viewport } = context;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebouncedCallback(onResize, 10);\n\n  const handleDragScroll = (event: React.PointerEvent<HTMLElement>) => {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  };\n\n  useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) {\n        handleWheelScroll(event, maxScrollPos);\n      }\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      value={{\n        scrollbar,\n        hasThumb,\n        onThumbChange: useCallbackRef(onThumbChange),\n        onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n        onThumbPositionChange: handleThumbPositionChange,\n        onThumbPointerDown: useCallbackRef(onThumbPointerDown),\n      }}\n    >\n      <div\n        {...scrollbarProps}\n        ref={composeRefs}\n        data-mantine-scrollbar\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          event.preventDefault();\n\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          event.preventDefault();\n\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            element.releasePointerCapture(event.pointerId);\n          }\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}