{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useRef, useEffect } from 'react';\nimport { useUncontrolled, useMergedRef } from '@mantine/hooks';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../CloseButton/CloseIcon.mjs';\nimport { CloseButton } from '../CloseButton/CloseButton.mjs';\nimport { FileButton } from '../FileButton/FileButton.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport '../Input/InputWrapper/InputWrapper.mjs';\nimport '../Input/InputDescription/InputDescription.mjs';\nimport '../Input/InputError/InputError.mjs';\nimport '../Input/InputLabel/InputLabel.mjs';\nimport '../Input/InputPlaceholder/InputPlaceholder.mjs';\nimport '../Input/InputClearButton/InputClearButton.mjs';\nimport '../Input/InputWrapper.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nconst DefaultValue = ({\n  value\n}) => /* @__PURE__ */jsx(\"div\", {\n  style: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\"\n  },\n  children: Array.isArray(value) ? value.map(file => file.name).join(\", \") : value?.name\n});\nconst defaultProps = {\n  valueComponent: DefaultValue\n};\nconst _FileInput = factory((_props, ref) => {\n  const props = useProps(\"FileInput\", defaultProps, _props);\n  const {\n    unstyled,\n    vars,\n    onChange,\n    value,\n    defaultValue,\n    multiple,\n    accept,\n    name,\n    form,\n    valueComponent,\n    clearable,\n    clearButtonProps,\n    readOnly,\n    capture,\n    fileInputProps,\n    rightSection,\n    size,\n    placeholder,\n    component,\n    resetRef: resetRefProp,\n    classNames,\n    styles,\n    ...others\n  } = props;\n  const resetRef = useRef(null);\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    onChange,\n    finalValue: multiple ? [] : null\n  });\n  const hasValue = Array.isArray(_value) ? _value.length !== 0 : _value !== null;\n  const _rightSection = rightSection || (clearable && hasValue && !readOnly ? /* @__PURE__ */jsx(CloseButton, {\n    ...clearButtonProps,\n    variant: \"subtle\",\n    onClick: () => setValue(multiple ? [] : null),\n    size,\n    unstyled\n  }) : null);\n  useEffect(() => {\n    if (Array.isArray(_value) && _value.length === 0 || _value === null) {\n      resetRef.current?.();\n    }\n  }, [_value]);\n  const ValueComponent = valueComponent;\n  return /* @__PURE__ */jsx(FileButton, {\n    onChange: setValue,\n    multiple,\n    accept,\n    name,\n    form,\n    resetRef: useMergedRef(resetRef, resetRefProp),\n    disabled: readOnly,\n    capture,\n    inputProps: fileInputProps,\n    children: fileButtonProps => /* @__PURE__ */jsx(InputBase, {\n      component: component || \"button\",\n      ref,\n      rightSection: _rightSection,\n      ...fileButtonProps,\n      ...others,\n      __staticSelector: \"FileInput\",\n      multiline: true,\n      type: \"button\",\n      pointer: true,\n      __stylesApiProps: props,\n      unstyled,\n      size,\n      classNames,\n      styles,\n      children: !hasValue ? /* @__PURE__ */jsx(Input.Placeholder, {\n        __staticSelector: \"FileInput\",\n        classNames: resolvedClassNames,\n        styles: resolvedStyles,\n        children: placeholder\n      }) : /* @__PURE__ */jsx(ValueComponent, {\n        value: _value\n      })\n    })\n  });\n});\n_FileInput.classes = InputBase.classes;\n_FileInput.displayName = \"@mantine/core/FileInput\";\nconst FileInput = _FileInput;\nexport { FileInput };","map":{"version":3,"names":["DefaultValue","value","jsx","style","overflow","textOverflow","whiteSpace","children","Array","isArray","map","file","name","join","defaultProps","valueComponent","_FileInput","factory","_props","ref","props","useProps","unstyled","vars","onChange","defaultValue","multiple","accept","form","clearable","clearButtonProps","readOnly","capture","fileInputProps","rightSection","size","placeholder","component","resetRef","resetRefProp","classNames","styles","others","useRef","resolvedClassNames","resolvedStyles","useResolvedStylesApi","_value","setValue","useUncontrolled","finalValue","hasValue","length","_rightSection","CloseButton","variant","onClick","useEffect","current","ValueComponent","FileButton","useMergedRef","disabled","inputProps","fileButtonProps","InputBase","__staticSelector","multiline","type","pointer","__stylesApiProps","Input","Placeholder","classes","displayName","FileInput"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\FileInput\\FileInput.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useMergedRef, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '../../core';\nimport { CloseButton } from '../CloseButton';\nimport { FileButton } from '../FileButton';\nimport { __BaseInputProps, __InputStylesNames, Input, InputVariant } from '../Input';\nimport { InputBase } from '../InputBase/InputBase';\n\nexport interface FileInputProps<Multiple = false>\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<FileInputFactory>,\n    ElementProps<'button', 'value' | 'defaultValue' | 'onChange' | 'placeholder'> {\n  component?: any;\n\n  /** Called when value changes */\n  onChange?: (payload: Multiple extends true ? File[] : File | null) => void;\n\n  /** Controlled component value */\n  value?: Multiple extends true ? File[] : File | null;\n\n  /** Uncontrolled component default value */\n  defaultValue?: Multiple extends true ? File[] : File | null;\n\n  /** Determines whether user can pick more than one file, `false` by default */\n  multiple?: Multiple;\n\n  /** File input accept attribute, for example, `\"image/png,image/jpeg\"` */\n  accept?: string;\n\n  /** Input name attribute */\n  name?: string;\n\n  /** Input form attribute */\n  form?: string;\n\n  /** Value renderer. By default, file name is displayed. */\n  valueComponent?: React.FC<{ value: null | File | File[] }>;\n\n  /** Determines whether clear button should be displayed in the right section, `false` by default */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** If set, the input value cannot be changed  */\n  readOnly?: boolean;\n\n  /** Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute. */\n  capture?: boolean | 'user' | 'environment';\n\n  /** Props passed down to the hidden input element which is used to capture files */\n  fileInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Input placeholder */\n  placeholder?: React.ReactNode;\n\n  /** Reference of the function that should be called when value changes to null or empty array */\n  resetRef?: React.ForwardedRef<() => void>;\n}\n\nexport type FileInputFactory = Factory<{\n  props: FileInputProps;\n  ref: HTMLButtonElement;\n  stylesNames: __InputStylesNames | 'placeholder';\n  variant: InputVariant;\n}>;\n\nconst DefaultValue: FileInputProps['valueComponent'] = ({ value }) => (\n  <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n    {Array.isArray(value) ? value.map((file) => file.name).join(', ') : value?.name}\n  </div>\n);\n\nconst defaultProps: Partial<FileInputProps> = {\n  valueComponent: DefaultValue,\n};\n\nconst _FileInput = factory<FileInputFactory>((_props, ref) => {\n  const props = useProps('FileInput', defaultProps, _props);\n  const {\n    unstyled,\n    vars,\n    onChange,\n    value,\n    defaultValue,\n    multiple,\n    accept,\n    name,\n    form,\n    valueComponent,\n    clearable,\n    clearButtonProps,\n    readOnly,\n    capture,\n    fileInputProps,\n    rightSection,\n    size,\n    placeholder,\n    component,\n    resetRef: resetRefProp,\n    classNames,\n    styles,\n    ...others\n  } = props;\n\n  const resetRef = useRef<() => void>(null);\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<FileInputFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const [_value, setValue] = useUncontrolled<null | File | File[]>({\n    value,\n    defaultValue,\n    onChange: onChange as any,\n    finalValue: multiple ? [] : null,\n  });\n\n  const hasValue = Array.isArray(_value) ? _value.length !== 0 : _value !== null;\n\n  const _rightSection =\n    rightSection ||\n    (clearable && hasValue && !readOnly ? (\n      <CloseButton\n        {...clearButtonProps}\n        variant=\"subtle\"\n        onClick={() => setValue(multiple ? [] : null)}\n        size={size}\n        unstyled={unstyled}\n      />\n    ) : null);\n\n  useEffect(() => {\n    if ((Array.isArray(_value) && _value.length === 0) || _value === null) {\n      resetRef.current?.();\n    }\n  }, [_value]);\n\n  const ValueComponent = valueComponent!;\n\n  return (\n    <FileButton\n      onChange={setValue}\n      multiple={multiple}\n      accept={accept}\n      name={name}\n      form={form}\n      resetRef={useMergedRef(resetRef, resetRefProp)}\n      disabled={readOnly}\n      capture={capture}\n      inputProps={fileInputProps}\n    >\n      {(fileButtonProps) => (\n        <InputBase\n          component={component || 'button'}\n          ref={ref}\n          rightSection={_rightSection}\n          {...fileButtonProps}\n          {...others}\n          __staticSelector=\"FileInput\"\n          multiline\n          type=\"button\"\n          pointer\n          __stylesApiProps={props}\n          unstyled={unstyled}\n          size={size}\n          classNames={classNames}\n          styles={styles}\n        >\n          {!hasValue ? (\n            <Input.Placeholder\n              __staticSelector=\"FileInput\"\n              classNames={resolvedClassNames}\n              styles={resolvedStyles}\n            >\n              {placeholder}\n            </Input.Placeholder>\n          ) : (\n            <ValueComponent value={_value} />\n          )}\n        </InputBase>\n      )}\n    </FileButton>\n  );\n});\n\n_FileInput.classes = InputBase.classes;\n_FileInput.displayName = '@mantine/core/FileInput';\n\ntype FileInputComponent = (<Multiple extends boolean = false>(\n  props: FileInputProps<Multiple> & {\n    ref?: React.ForwardedRef<HTMLButtonElement>;\n  }\n) => React.JSX.Element) & { extend: typeof _FileInput.extend };\n\nexport const FileInput: FileInputComponent = _FileInput as any;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA,MAAMA,YAAiD,GAAAA,CAAC;EAAEC;AACxD,qBAAAC,GAAA,CAAC,KAAI;EAAAC,KAAA,EAAO;IAAEC,QAAA,EAAU,QAAU;IAAAC,YAAA,EAAc;IAAYC,UAAY;EAAA,CACrE;EAAAC,QAAA,EAAAC,KAAA,CAAMC,OAAQ,CAAAR,KAAK,CAAI,GAAAA,KAAA,CAAMS,GAAA,CAAKC,IAAA,IAASA,IAAK,CAAAC,IAAI,CAAE,CAAAC,IAAA,CAAK,IAAI,IAAIZ,KAAA,EAAOW;AAC7E;AAGF,MAAME,YAAwC;EAC5CC,cAAgB,EAAAf;AAClB;AAEA,MAAMgB,UAAa,GAAAC,OAAA,CAA0B,CAACC,MAAA,EAAQC,GAAQ;EAC5D,MAAMC,KAAQ,GAAAC,QAAA,CAAS,WAAa,EAAAP,YAAA,EAAcI,MAAM;EAClD;IACJI,QAAA;IACAC,IAAA;IACAC,QAAA;IACAvB,KAAA;IACAwB,YAAA;IACAC,QAAA;IACAC,MAAA;IACAf,IAAA;IACAgB,IAAA;IACAb,cAAA;IACAc,SAAA;IACAC,gBAAA;IACAC,QAAA;IACAC,OAAA;IACAC,cAAA;IACAC,YAAA;IACAC,IAAA;IACAC,WAAA;IACAC,SAAA;IACAC,QAAU,EAAAC,YAAA;IACVC,UAAA;IACAC,MAAA;IACA,GAAGC;EAAA,CACD,GAAAtB,KAAA;EAEE,MAAAkB,QAAA,GAAWK,MAAA,CAAmB,IAAI;EACxC,MAAM;IAAEC,kBAAA;IAAoBC;EAAe,IAAIC,oBAAuC;IACpFN,UAAA;IACAC,MAAA;IACArB;EAAA,CACD;EAED,MAAM,CAAC2B,MAAA,EAAQC,QAAQ,IAAIC,eAAsC;IAC/DhD,KAAA;IACAwB,YAAA;IACAD,QAAA;IACA0B,UAAA,EAAYxB,QAAW,KAAK;EAAA,CAC7B;EAEK,MAAAyB,QAAA,GAAW3C,KAAA,CAAMC,OAAQ,CAAAsC,MAAM,IAAIA,MAAO,CAAAK,MAAA,KAAW,IAAIL,MAAW;EAE1E,MAAMM,aACJ,GAAAnB,YAAA,KACCL,SAAa,IAAAsB,QAAA,IAAY,CAACpB,QACzB,kBAAA7B,GAAA,CAACoD,WAAA;IACE,GAAGxB,gBAAA;IACJyB,OAAQ;IACRC,OAAA,EAASA,CAAA,KAAMR,QAAA,CAAStB,QAAW,QAAK,IAAI;IAC5CS,IAAA;IACAb;EAAA,CAEA;EAENmC,SAAA,CAAU,MAAM;IACT,IAAAjD,KAAA,CAAMC,OAAA,CAAQsC,MAAM,KAAKA,MAAA,CAAOK,MAAW,UAAML,MAAA,KAAW,IAAM;MACrET,QAAA,CAASoB,OAAU;IAAA;EACrB,CACF,EAAG,CAACX,MAAM,CAAC;EAEX,MAAMY,cAAiB,GAAA5C,cAAA;EAGrB,sBAAAb,GAAA,CAAC0D,UAAA;IACCpC,QAAU,EAAAwB,QAAA;IACVtB,QAAA;IACAC,MAAA;IACAf,IAAA;IACAgB,IAAA;IACAU,QAAA,EAAUuB,YAAa,CAAAvB,QAAA,EAAUC,YAAY;IAC7CuB,QAAU,EAAA/B,QAAA;IACVC,OAAA;IACA+B,UAAY,EAAA9B,cAAA;IAEX1B,QAAA,EAACyD,eACA,mBAAA9D,GAAA,CAAC+D,SAAA;MACC5B,SAAA,EAAWA,SAAa;MACxBlB,GAAA;MACAe,YAAc,EAAAmB,aAAA;MACb,GAAGW,eAAA;MACH,GAAGtB,MAAA;MACJwB,gBAAiB;MACjBC,SAAS;MACTC,IAAK;MACLC,OAAO;MACPC,gBAAkB,EAAAlD,KAAA;MAClBE,QAAA;MACAa,IAAA;MACAK,UAAA;MACAC,MAAA;MAEClC,QAAA,GAAC4C,QACA,kBAAAjD,GAAA,CAACqE,KAAM,CAAAC,WAAA,EAAN;QACCN,gBAAiB;QACjB1B,UAAY,EAAAI,kBAAA;QACZH,MAAQ,EAAAI,cAAA;QAEPtC,QAAA,EAAA6B;MAAA,CAGH,mBAAAlC,GAAA,CAACyD,cAAe;QAAA1D,KAAA,EAAO8C;MAAQ;IAAA;EAEnC,CAEJ;AAEJ,CAAC;AAED/B,UAAA,CAAWyD,OAAA,GAAUR,SAAU,CAAAQ,OAAA;AAC/BzD,UAAA,CAAW0D,WAAc;AAQlB,MAAMC,SAAgC,GAAA3D,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}