{"ast":null,"code":"'use client';\n\nimport { createContext, useContext } from 'react';\nconst MantineContext = createContext(null);\nfunction useMantineContext() {\n  const ctx = useContext(MantineContext);\n  if (!ctx) {\n    throw new Error(\"[@mantine/core] MantineProvider was not found in tree\");\n  }\n  return ctx;\n}\nfunction useMantineCssVariablesResolver() {\n  return useMantineContext().cssVariablesResolver;\n}\nfunction useMantineClassNamesPrefix() {\n  return useMantineContext().classNamesPrefix;\n}\nfunction useMantineStyleNonce() {\n  return useMantineContext().getStyleNonce;\n}\nfunction useMantineWithStaticClasses() {\n  return useMantineContext().withStaticClasses;\n}\nfunction useMantineIsHeadless() {\n  return useMantineContext().headless;\n}\nfunction useMantineSxTransform() {\n  return useMantineContext().stylesTransform?.sx;\n}\nfunction useMantineStylesTransform() {\n  return useMantineContext().stylesTransform?.styles;\n}\nexport { MantineContext, useMantineClassNamesPrefix, useMantineContext, useMantineCssVariablesResolver, useMantineIsHeadless, useMantineStyleNonce, useMantineStylesTransform, useMantineSxTransform, useMantineWithStaticClasses };","map":{"version":3,"names":["MantineContext","createContext","useMantineContext","ctx","useContext","Error","useMantineCssVariablesResolver","cssVariablesResolver","useMantineClassNamesPrefix","classNamesPrefix","useMantineStyleNonce","getStyleNonce","useMantineWithStaticClasses","withStaticClasses","useMantineIsHeadless","headless","useMantineSxTransform","stylesTransform","sx","useMantineStylesTransform","styles"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\MantineProvider\\Mantine.context.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { ConvertCSSVariablesInput } from './convert-css-variables';\nimport type { MantineColorScheme, MantineTheme } from './theme.types';\n\nexport interface MantineStylesTransform {\n  sx?: () => (sx: any) => string;\n  styles?: () => (styles: any, payload: any) => Record<string, string>;\n}\n\ninterface MantineContextValue {\n  colorScheme: MantineColorScheme;\n  setColorScheme: (colorScheme: MantineColorScheme) => void;\n  clearColorScheme: () => void;\n  getRootElement: () => HTMLElement | undefined;\n  classNamesPrefix: string;\n  getStyleNonce?: () => string | undefined;\n  cssVariablesResolver?: (theme: MantineTheme) => ConvertCSSVariablesInput;\n  cssVariablesSelector: string;\n  withStaticClasses: boolean;\n  headless?: boolean;\n  stylesTransform?: MantineStylesTransform;\n}\n\nexport const MantineContext = createContext<MantineContextValue | null>(null);\n\nexport function useMantineContext() {\n  const ctx = useContext(MantineContext);\n\n  if (!ctx) {\n    throw new Error('[@mantine/core] MantineProvider was not found in tree');\n  }\n\n  return ctx;\n}\n\nexport function useMantineCssVariablesResolver() {\n  return useMantineContext().cssVariablesResolver;\n}\n\nexport function useMantineClassNamesPrefix() {\n  return useMantineContext().classNamesPrefix;\n}\n\nexport function useMantineStyleNonce() {\n  return useMantineContext().getStyleNonce;\n}\n\nexport function useMantineWithStaticClasses() {\n  return useMantineContext().withStaticClasses;\n}\n\nexport function useMantineIsHeadless() {\n  return useMantineContext().headless;\n}\n\nexport function useMantineSxTransform() {\n  return useMantineContext().stylesTransform?.sx;\n}\n\nexport function useMantineStylesTransform() {\n  return useMantineContext().stylesTransform?.styles;\n}\n"],"mappings":";;;AAuBa,MAAAA,cAAA,GAAiBC,aAAA,CAA0C,IAAI;AAErE,SAASC,iBAAoBA,CAAA;EAC5B,MAAAC,GAAA,GAAMC,UAAA,CAAWJ,cAAc;EAErC,IAAI,CAACG,GAAK;IACF,UAAIE,KAAA,CAAM,uDAAuD;EAAA;EAGlE,OAAAF,GAAA;AACT;AAEO,SAASG,8BAAiCA,CAAA;EAC/C,OAAOJ,iBAAA,CAAoB,EAAAK,oBAAA;AAC7B;AAEO,SAASC,0BAA6BA,CAAA;EAC3C,OAAON,iBAAA,CAAoB,EAAAO,gBAAA;AAC7B;AAEO,SAASC,oBAAuBA,CAAA;EACrC,OAAOR,iBAAA,CAAoB,EAAAS,aAAA;AAC7B;AAEO,SAASC,2BAA8BA,CAAA;EAC5C,OAAOV,iBAAA,CAAoB,EAAAW,iBAAA;AAC7B;AAEO,SAASC,oBAAuBA,CAAA;EACrC,OAAOZ,iBAAA,CAAoB,EAAAa,QAAA;AAC7B;AAEO,SAASC,qBAAwBA,CAAA;EAC/B,OAAAd,iBAAA,GAAoBe,eAAiB,EAAAC,EAAA;AAC9C;AAEO,SAASC,yBAA4BA,CAAA;EACnC,OAAAjB,iBAAA,GAAoBe,eAAiB,EAAAG,MAAA;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}