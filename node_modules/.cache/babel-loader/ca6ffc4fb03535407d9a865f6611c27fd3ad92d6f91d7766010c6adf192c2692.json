{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport 'react';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../CloseButton/CloseIcon.mjs';\nimport { CloseButton } from '../CloseButton/CloseButton.mjs';\nimport { Loader } from '../Loader/Loader.mjs';\nimport classes from './Notification.module.css.mjs';\nconst defaultProps = {\n  withCloseButton: true\n};\nconst varsResolver = createVarsResolver((theme, {\n  radius,\n  color\n}) => ({\n  root: {\n    \"--notification-radius\": radius === void 0 ? void 0 : getRadius(radius),\n    \"--notification-color\": color ? getThemeColor(color, theme) : void 0\n  }\n}));\nconst Notification = factory((_props, ref) => {\n  const props = useProps(\"Notification\", defaultProps, _props);\n  const {\n    className,\n    color,\n    radius,\n    loading,\n    withCloseButton,\n    withBorder,\n    title,\n    icon,\n    children,\n    onClose,\n    closeButtonProps,\n    classNames,\n    style,\n    styles,\n    unstyled,\n    variant,\n    vars,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Notification\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsxs(Box, {\n    ...getStyles(\"root\"),\n    mod: [{\n      \"data-with-icon\": !!icon || loading,\n      \"data-with-border\": withBorder\n    }, mod],\n    ref,\n    variant,\n    ...others,\n    role: \"alert\",\n    children: [icon && !loading && /* @__PURE__ */jsx(\"div\", {\n      ...getStyles(\"icon\"),\n      children: icon\n    }), loading && /* @__PURE__ */jsx(Loader, {\n      size: 28,\n      color,\n      ...getStyles(\"loader\")\n    }), /* @__PURE__ */jsxs(\"div\", {\n      ...getStyles(\"body\"),\n      children: [title && /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"title\"),\n        children: title\n      }), /* @__PURE__ */jsx(Box, {\n        ...getStyles(\"description\"),\n        mod: {\n          \"data-with-title\": !!title\n        },\n        children\n      })]\n    }), withCloseButton && /* @__PURE__ */jsx(CloseButton, {\n      iconSize: 16,\n      color: \"gray\",\n      ...closeButtonProps,\n      unstyled,\n      onClick: onClose,\n      ...getStyles(\"closeButton\")\n    })]\n  });\n});\nNotification.classes = classes;\nNotification.displayName = \"@mantine/core/Notification\";\nexport { Notification };","map":{"version":3,"names":["defaultProps","withCloseButton","varsResolver","createVarsResolver","theme","radius","color","root","getRadius","getThemeColor","Notification","factory","_props","ref","props","useProps","className","loading","withBorder","title","icon","children","onClose","closeButtonProps","classNames","style","styles","unstyled","variant","vars","mod","others","getStyles","useStyles","name","classes","jsxs","Box","role","jsx","Loader","size","CloseButton","iconSize","onClick","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Notification\\Notification.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getRadius,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { CloseButton } from '../CloseButton';\nimport { Loader } from '../Loader';\nimport classes from './Notification.module.css';\n\nexport type NotificationStylesNames =\n  | 'root'\n  | 'icon'\n  | 'loader'\n  | 'body'\n  | 'title'\n  | 'description'\n  | 'closeButton';\nexport type NotificationCssVariables = {\n  root: '--notification-radius' | '--notification-color';\n};\n\nexport interface NotificationProps\n  extends BoxProps,\n    StylesApiProps<NotificationFactory>,\n    ElementProps<'div', 'title'> {\n  variant?: string;\n\n  /** Called when close button is clicked */\n  onClose?: () => void;\n\n  /** Controls notification line or icon color, key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Notification icon, replaces color line */\n  icon?: React.ReactNode;\n\n  /** Notification title, displayed before body */\n  title?: React.ReactNode;\n\n  /** Notification body, place main text here */\n  children?: React.ReactNode;\n\n  /** Replaces colored line or icon with Loader component */\n  loading?: boolean;\n\n  /** Determines whether notification should have a border, `false` by default */\n  withBorder?: boolean;\n\n  /** Determines whether close button should be visible, `true` by default */\n  withCloseButton?: boolean;\n\n  /** Props passed down to the close button */\n  closeButtonProps?: Record<string, any>;\n}\n\nexport type NotificationFactory = Factory<{\n  props: NotificationProps;\n  ref: HTMLDivElement;\n  stylesNames: NotificationStylesNames;\n  vars: NotificationCssVariables;\n}>;\n\nconst defaultProps: Partial<NotificationProps> = {\n  withCloseButton: true,\n};\n\nconst varsResolver = createVarsResolver<NotificationFactory>((theme, { radius, color }) => ({\n  root: {\n    '--notification-radius': radius === undefined ? undefined : getRadius(radius),\n    '--notification-color': color ? getThemeColor(color, theme) : undefined,\n  },\n}));\n\nexport const Notification = factory<NotificationFactory>((_props, ref) => {\n  const props = useProps('Notification', defaultProps, _props);\n  const {\n    className,\n    color,\n    radius,\n    loading,\n    withCloseButton,\n    withBorder,\n    title,\n    icon,\n    children,\n    onClose,\n    closeButtonProps,\n    classNames,\n    style,\n    styles,\n    unstyled,\n    variant,\n    vars,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<NotificationFactory>({\n    name: 'Notification',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box\n      {...getStyles('root')}\n      mod={[{ 'data-with-icon': !!icon || loading, 'data-with-border': withBorder }, mod]}\n      ref={ref}\n      variant={variant}\n      {...others}\n      role=\"alert\"\n    >\n      {icon && !loading && <div {...getStyles('icon')}>{icon}</div>}\n      {loading && <Loader size={28} color={color} {...getStyles('loader')} />}\n\n      <div {...getStyles('body')}>\n        {title && <div {...getStyles('title')}>{title}</div>}\n\n        <Box {...getStyles('description')} mod={{ 'data-with-title': !!title }}>\n          {children}\n        </Box>\n      </div>\n\n      {withCloseButton && (\n        <CloseButton\n          iconSize={16}\n          color=\"gray\"\n          {...closeButtonProps}\n          unstyled={unstyled}\n          onClick={onClose}\n          {...getStyles('closeButton')}\n        />\n      )}\n    </Box>\n  );\n});\n\nNotification.classes = classes;\nNotification.displayName = '@mantine/core/Notification';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AA2EA,MAAMA,YAA2C;EAC/CC,eAAiB;AACnB;AAEA,MAAMC,YAAA,GAAeC,kBAAwC,EAACC,KAAA,EAAO;EAAEC,MAAA;EAAQC;AAAA,CAAa;EAC1FC,IAAM;IACJ,uBAAyB,EAAAF,MAAA,KAAW,KAAY,aAAYG,SAAA,CAAUH,MAAM;IAC5E,sBAAwB,EAAAC,KAAA,GAAQG,aAAc,CAAAH,KAAA,EAAOF,KAAK,CAAI;EAAA;AAElE,CAAE;AAEK,MAAMM,YAAe,GAAAC,OAAA,CAA6B,CAACC,MAAA,EAAQC,GAAQ;EACxE,MAAMC,KAAQ,GAAAC,QAAA,CAAS,cAAgB,EAAAf,YAAA,EAAcY,MAAM;EACrD;IACJI,SAAA;IACAV,KAAA;IACAD,MAAA;IACAY,OAAA;IACAhB,eAAA;IACAiB,UAAA;IACAC,KAAA;IACAC,IAAA;IACAC,QAAA;IACAC,OAAA;IACAC,gBAAA;IACAC,UAAA;IACAC,KAAA;IACAC,MAAA;IACAC,QAAA;IACAC,OAAA;IACAC,IAAA;IACAC,GAAA;IACA,GAAGC;EAAA,CACD,GAAAjB,KAAA;EAEJ,MAAMkB,SAAA,GAAYC,SAA+B;IAC/CC,IAAM;IACNC,OAAA;IACArB,KAAA;IACAE,SAAA;IACAS,KAAA;IACAD,UAAA;IACAE,MAAA;IACAC,QAAA;IACAE,IAAA;IACA3B;EAAA,CACD;EAGC,sBAAAkC,IAAA,CAACC,GAAA;IACE,GAAGL,SAAA,CAAU,MAAM;IACpBF,GAAA,EAAK,CAAC;MAAE,gBAAkB,GAAC,CAACV,IAAA,IAAQH,OAAS;MAAA,oBAAoBC;IAAW,GAAGY,GAAG;IAClFjB,GAAA;IACAe,OAAA;IACC,GAAGG,MAAA;IACJO,IAAK;IAEJjB,QAAA,GAAQD,IAAA,KAACH,OAAA,mBAAYsB,GAAA;MAAK,GAAGP,SAAU,OAAM;MAAIX,QAAK,EAAAD;IAAA,IACtDH,OAAA,mBAAAsB,GAAA,CAAYC,MAAO;MAAAC,IAAA,EAAM;MAAInC,KAAe;MAAA,GAAG0B,SAAU,SAAQ;IAAG,mBAEpEI,IAAA;MAAK,GAAGJ,SAAA,CAAU,MAAM,CACtB;MAAAX,QAAA,GAAAF,KAAA,mBAAAoB,GAAA,CAAU,KAAK;QAAA,GAAGP,SAAU,QAAO;QAAIX,QAAM,EAAAF;MAAA,IAE7C,eAAAoB,GAAA,CAAAF,GAAA;QAAK,GAAGL,SAAA,CAAU,aAAa;QAAGF,GAAK;UAAE,iBAAmB,GAAC,CAACX;QAAA;QAC5DE;MACH;IACF,IAECpB,eACC,mBAAAsC,GAAA,CAACG,WAAA;MACCC,QAAU;MACVrC,KAAM;MACL,GAAGiB,gBAAA;MACJI,QAAA;MACAiB,OAAS,EAAAtB,OAAA;MACR,GAAGU,SAAA,CAAU,aAAa;IAAA;EAC7B,CAEJ;AAEJ,CAAC;AAEDtB,YAAA,CAAayB,OAAU,GAAAA,OAAA;AACvBzB,YAAA,CAAamC,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}