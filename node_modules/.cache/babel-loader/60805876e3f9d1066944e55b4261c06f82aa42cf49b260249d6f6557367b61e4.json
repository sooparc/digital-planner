{"ast":null,"code":"function isHexColor(hex) {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}([0-9A-F]{2})?$/i;\n  return HEX_REGEXP.test(hex);\n}\nfunction hexToRgba(color) {\n  let hexString = color.replace(\"#\", \"\");\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split(\"\");\n    hexString = [shorthandHex[0], shorthandHex[0], shorthandHex[1], shorthandHex[1], shorthandHex[2], shorthandHex[2]].join(\"\");\n  }\n  if (hexString.length === 8) {\n    const alpha = parseInt(hexString.slice(6, 8), 16) / 255;\n    return {\n      r: parseInt(hexString.slice(0, 2), 16),\n      g: parseInt(hexString.slice(2, 4), 16),\n      b: parseInt(hexString.slice(4, 6), 16),\n      a: alpha\n    };\n  }\n  const parsed = parseInt(hexString, 16);\n  const r = parsed >> 16 & 255;\n  const g = parsed >> 8 & 255;\n  const b = parsed & 255;\n  return {\n    r,\n    g,\n    b,\n    a: 1\n  };\n}\nfunction rgbStringToRgba(color) {\n  const [r, g, b, a] = color.replace(/[^0-9,./]/g, \"\").split(/[/,]/).map(Number);\n  return {\n    r,\n    g,\n    b,\n    a: a || 1\n  };\n}\nfunction hslStringToRgba(hslaString) {\n  const hslaRegex = /^hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*(,\\s*(0?\\.\\d+|\\d+(\\.\\d+)?))?\\s*\\)$/i;\n  const matches = hslaString.match(hslaRegex);\n  if (!matches) {\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    };\n  }\n  const h = parseInt(matches[1], 10);\n  const s = parseInt(matches[2], 10) / 100;\n  const l = parseInt(matches[3], 10) / 100;\n  const a = matches[5] ? parseFloat(matches[5]) : void 0;\n  const chroma = (1 - Math.abs(2 * l - 1)) * s;\n  const huePrime = h / 60;\n  const x = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  const m = l - chroma / 2;\n  let r;\n  let g;\n  let b;\n  if (huePrime >= 0 && huePrime < 1) {\n    r = chroma;\n    g = x;\n    b = 0;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    r = x;\n    g = chroma;\n    b = 0;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    r = 0;\n    g = chroma;\n    b = x;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    r = 0;\n    g = x;\n    b = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    r = x;\n    g = 0;\n    b = chroma;\n  } else {\n    r = chroma;\n    g = 0;\n    b = x;\n  }\n  return {\n    r: Math.round((r + m) * 255),\n    g: Math.round((g + m) * 255),\n    b: Math.round((b + m) * 255),\n    a: a || 1\n  };\n}\nfunction toRgba(color) {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n  if (color.startsWith(\"rgb\")) {\n    return rgbStringToRgba(color);\n  }\n  if (color.startsWith(\"hsl\")) {\n    return hslStringToRgba(color);\n  }\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  };\n}\nexport { toRgba };","map":{"version":3,"names":["isHexColor","hex","HEX_REGEXP","test","hexToRgba","color","hexString","replace","length","shorthandHex","split","join","alpha","parseInt","slice","r","g","b","a","parsed","rgbStringToRgba","map","Number","hslStringToRgba","hslaString","hslaRegex","matches","match","h","s","l","parseFloat","chroma","Math","abs","huePrime","x","m","round","toRgba","startsWith"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\MantineProvider\\color-functions\\to-rgba\\to-rgba.ts"],"sourcesContent":["export interface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction isHexColor(hex: string): boolean {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}([0-9A-F]{2})?$/i;\n\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color: string): RGBA {\n  let hexString = color.replace('#', '');\n\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split('');\n    hexString = [\n      shorthandHex[0],\n      shorthandHex[0],\n      shorthandHex[1],\n      shorthandHex[1],\n      shorthandHex[2],\n      shorthandHex[2],\n    ].join('');\n  }\n\n  if (hexString.length === 8) {\n    const alpha = parseInt(hexString.slice(6, 8), 16) / 255;\n\n    return {\n      r: parseInt(hexString.slice(0, 2), 16),\n      g: parseInt(hexString.slice(2, 4), 16),\n      b: parseInt(hexString.slice(4, 6), 16),\n      a: alpha,\n    };\n  }\n\n  const parsed = parseInt(hexString, 16);\n  const r = (parsed >> 16) & 255;\n  const g = (parsed >> 8) & 255;\n  const b = parsed & 255;\n\n  return {\n    r,\n    g,\n    b,\n    a: 1,\n  };\n}\n\nfunction rgbStringToRgba(color: string): RGBA {\n  const [r, g, b, a] = color\n    .replace(/[^0-9,./]/g, '')\n    .split(/[/,]/)\n    .map(Number);\n\n  return { r, g, b, a: a || 1 };\n}\n\nfunction hslStringToRgba(hslaString: string): RGBA {\n  const hslaRegex =\n    /^hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*(,\\s*(0?\\.\\d+|\\d+(\\.\\d+)?))?\\s*\\)$/i;\n\n  const matches = hslaString.match(hslaRegex);\n  if (!matches) {\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1,\n    };\n  }\n\n  const h = parseInt(matches[1], 10);\n  const s = parseInt(matches[2], 10) / 100;\n  const l = parseInt(matches[3], 10) / 100;\n  const a = matches[5] ? parseFloat(matches[5]) : undefined;\n\n  const chroma = (1 - Math.abs(2 * l - 1)) * s;\n  const huePrime = h / 60;\n  const x = chroma * (1 - Math.abs((huePrime % 2) - 1));\n  const m = l - chroma / 2;\n\n  let r: number;\n  let g: number;\n  let b: number;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    r = chroma;\n    g = x;\n    b = 0;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    r = x;\n    g = chroma;\n    b = 0;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    r = 0;\n    g = chroma;\n    b = x;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    r = 0;\n    g = x;\n    b = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    r = x;\n    g = 0;\n    b = chroma;\n  } else {\n    r = chroma;\n    g = 0;\n    b = x;\n  }\n\n  return {\n    r: Math.round((r + m) * 255),\n    g: Math.round((g + m) * 255),\n    b: Math.round((b + m) * 255),\n    a: a || 1,\n  };\n}\n\nexport function toRgba(color: string): RGBA {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith('rgb')) {\n    return rgbStringToRgba(color);\n  }\n\n  if (color.startsWith('hsl')) {\n    return hslStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}