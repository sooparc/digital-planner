{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect } from 'react';\nfunction useEventListener(type, listener, options) {\n  const ref = useRef(null);\n  useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(type, listener, options);\n      return () => node?.removeEventListener(type, listener, options);\n    }\n    return void 0;\n  }, [listener, options]);\n  return ref;\n}\nexport { useEventListener };","map":{"version":3,"names":["useEventListener","type","listener","options","ref","useRef","useEffect","node","current","addEventListener","removeEventListener"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\hooks\\src\\use-event-listener\\use-event-listener.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = any>(\n  type: K,\n  listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  const ref = useRef<T>(null);\n\n  useEffect(() => {\n    const node = ref.current;\n\n    if (node) {\n      node.addEventListener(type, listener as any, options);\n      return () => node?.removeEventListener(type, listener as any, options);\n    }\n    return undefined;\n  }, [listener, options]);\n\n  return ref;\n}\n"],"mappings":";;;AAEgB,SAAAA,iBACdC,IACA,EAAAC,QAAA,EACAC,OACA;EACM,MAAAC,GAAA,GAAMC,MAAA,CAAU,IAAI;EAE1BC,SAAA,CAAU,MAAM;IACd,MAAMC,IAAA,GAAOH,GAAI,CAAAI,OAAA;IAEjB,IAAID,IAAM;MACHA,IAAA,CAAAE,gBAAA,CAAiBR,IAAM,EAAAC,QAAA,EAAiBC,OAAO;MACpD,OAAO,MAAMI,IAAA,EAAMG,mBAAoB,CAAAT,IAAA,EAAMC,QAAA,EAAiBC,OAAO;IAAA;IAEhE;EAAA,CACN,GAACD,QAAU,EAAAC,OAAO,CAAC;EAEf,OAAAC,GAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}