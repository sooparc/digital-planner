{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useComboboxContext } from '../Combobox.context.mjs';\nfunction useComboboxTargetProps({\n  onKeyDown,\n  withKeyboardNavigation,\n  withAriaAttributes,\n  withExpandedAttribute,\n  targetType,\n  autoComplete\n}) {\n  const ctx = useComboboxContext();\n  const [selectedOptionId, setSelectedOptionId] = useState(null);\n  const handleKeyDown = event => {\n    onKeyDown?.(event);\n    if (ctx.readOnly) {\n      return;\n    }\n    if (withKeyboardNavigation) {\n      if (event.nativeEvent.isComposing) {\n        return;\n      }\n      if (event.nativeEvent.code === \"ArrowDown\") {\n        event.preventDefault();\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown(\"keyboard\");\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex(\"selected\", {\n            scrollIntoView: true\n          });\n        } else {\n          setSelectedOptionId(ctx.store.selectNextOption());\n        }\n      }\n      if (event.nativeEvent.code === \"ArrowUp\") {\n        event.preventDefault();\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown(\"keyboard\");\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex(\"selected\", {\n            scrollIntoView: true\n          });\n        } else {\n          setSelectedOptionId(ctx.store.selectPreviousOption());\n        }\n      }\n      if (event.nativeEvent.code === \"Enter\" || event.nativeEvent.code === \"NumpadEnter\") {\n        if (event.nativeEvent.keyCode === 229) {\n          return;\n        }\n        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();\n        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {\n          event.preventDefault();\n          ctx.store.clickSelectedOption();\n        } else if (targetType === \"button\") {\n          event.preventDefault();\n          ctx.store.openDropdown(\"keyboard\");\n        }\n      }\n      if (event.key === \"Escape\") {\n        ctx.store.closeDropdown(\"keyboard\");\n      }\n      if (event.nativeEvent.code === \"Space\") {\n        if (targetType === \"button\") {\n          event.preventDefault();\n          ctx.store.toggleDropdown(\"keyboard\");\n        }\n      }\n    }\n  };\n  const ariaAttributes = withAriaAttributes ? {\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened) || void 0,\n    \"aria-controls\": ctx.store.dropdownOpened ? ctx.store.listId : void 0,\n    \"aria-activedescendant\": ctx.store.dropdownOpened ? selectedOptionId || void 0 : void 0,\n    autoComplete,\n    \"data-expanded\": ctx.store.dropdownOpened || void 0,\n    \"data-mantine-stop-propagation\": ctx.store.dropdownOpened || void 0\n  } : {};\n  return {\n    ...ariaAttributes,\n    onKeyDown: handleKeyDown\n  };\n}\nexport { useComboboxTargetProps };","map":{"version":3,"names":["useComboboxTargetProps","onKeyDown","withKeyboardNavigation","withAriaAttributes","withExpandedAttribute","targetType","autoComplete","ctx","useComboboxContext","selectedOptionId","setSelectedOptionId","useState","handleKeyDown","event","readOnly","nativeEvent","isComposing","code","preventDefault","store","dropdownOpened","openDropdown","selectActiveOption","updateSelectedOptionIndex","scrollIntoView","selectNextOption","selectPreviousOption","keyCode","selectedOptionIndex","getSelectedOptionIndex","clickSelectedOption","key","closeDropdown","toggleDropdown","ariaAttributes","listId"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Combobox\\use-combobox-target-props\\use-combobox-target-props.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useComboboxContext } from '../Combobox.context';\n\ninterface UseComboboxTargetPropsInput {\n  targetType: 'input' | 'button' | undefined;\n  withAriaAttributes: boolean | undefined;\n  withKeyboardNavigation: boolean | undefined;\n  withExpandedAttribute: boolean | undefined;\n  onKeyDown: React.KeyboardEventHandler<HTMLInputElement> | undefined;\n  autoComplete: string | undefined;\n}\n\nexport function useComboboxTargetProps({\n  onKeyDown,\n  withKeyboardNavigation,\n  withAriaAttributes,\n  withExpandedAttribute,\n  targetType,\n  autoComplete,\n}: UseComboboxTargetPropsInput) {\n  const ctx = useComboboxContext();\n  const [selectedOptionId, setSelectedOptionId] = useState<string | null>(null);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (ctx.readOnly) {\n      return;\n    }\n\n    if (withKeyboardNavigation) {\n      // Ignore during composition in IME\n      if (event.nativeEvent.isComposing) {\n        return;\n      }\n\n      if (event.nativeEvent.code === 'ArrowDown') {\n        event.preventDefault();\n\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown('keyboard');\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex('selected', { scrollIntoView: true });\n        } else {\n          setSelectedOptionId(ctx.store.selectNextOption());\n        }\n      }\n\n      if (event.nativeEvent.code === 'ArrowUp') {\n        event.preventDefault();\n\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown('keyboard');\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex('selected', { scrollIntoView: true });\n        } else {\n          setSelectedOptionId(ctx.store.selectPreviousOption());\n        }\n      }\n\n      if (event.nativeEvent.code === 'Enter' || event.nativeEvent.code === 'NumpadEnter') {\n        // This is a workaround for handling differences in behavior of isComposing property in Safari\n        // See: https://dninomiya.github.io/form-guide/stop-enter-submit\n        if (event.nativeEvent.keyCode === 229) {\n          return;\n        }\n\n        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();\n\n        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {\n          event.preventDefault();\n          ctx.store.clickSelectedOption();\n        } else if (targetType === 'button') {\n          event.preventDefault();\n          ctx.store.openDropdown('keyboard');\n        }\n      }\n\n      if (event.key === 'Escape') {\n        ctx.store.closeDropdown('keyboard');\n      }\n\n      if (event.nativeEvent.code === 'Space') {\n        if (targetType === 'button') {\n          event.preventDefault();\n          ctx.store.toggleDropdown('keyboard');\n        }\n      }\n    }\n  };\n\n  const ariaAttributes = withAriaAttributes\n    ? {\n        'aria-haspopup': 'listbox',\n        'aria-expanded':\n          (withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened)) || undefined,\n        'aria-controls': ctx.store.dropdownOpened ? ctx.store.listId : undefined,\n        'aria-activedescendant': ctx.store.dropdownOpened\n          ? selectedOptionId || undefined\n          : undefined,\n        autoComplete,\n        'data-expanded': ctx.store.dropdownOpened || undefined,\n        'data-mantine-stop-propagation': ctx.store.dropdownOpened || undefined,\n      }\n    : {};\n\n  return {\n    ...ariaAttributes,\n    onKeyDown: handleKeyDown,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}