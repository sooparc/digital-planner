{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useTableContext } from './Table.context.mjs';\nimport classes from './Table.module.css.mjs';\nfunction getDataAttributes(ctx, options) {\n  if (!options) {\n    return void 0;\n  }\n  const data = {};\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data[\"data-with-column-border\"] = true;\n  }\n  if (options.rowBorder && ctx.withRowBorders) {\n    data[\"data-with-row-border\"] = true;\n  }\n  if (options.striped && ctx.striped) {\n    data[\"data-striped\"] = ctx.striped;\n  }\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data[\"data-hover\"] = true;\n  }\n  if (options.captionSide && ctx.captionSide) {\n    data[\"data-side\"] = ctx.captionSide;\n  }\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data[\"data-sticky\"] = true;\n  }\n  return data;\n}\nfunction tableElement(element, options) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const {\n      classNames,\n      className,\n      style,\n      styles,\n      ...others\n    } = props;\n    const ctx = useTableContext();\n    return /* @__PURE__ */jsx(Box, {\n      component: element,\n      ref,\n      ...getDataAttributes(ctx, options),\n      ...ctx.getStyles(element, {\n        className,\n        classNames,\n        style,\n        styles,\n        props\n      }),\n      ...others\n    });\n  });\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\nconst TableTh = tableElement(\"th\", {\n  columnBorder: true\n});\nconst TableTd = tableElement(\"td\", {\n  columnBorder: true\n});\nconst TableTr = tableElement(\"tr\", {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true\n});\nconst TableThead = tableElement(\"thead\", {\n  stickyHeader: true\n});\nconst TableTbody = tableElement(\"tbody\");\nconst TableTfoot = tableElement(\"tfoot\");\nconst TableCaption = tableElement(\"caption\", {\n  captionSide: true\n});\nexport { TableCaption, TableTbody, TableTd, TableTfoot, TableTh, TableThead, TableTr, tableElement };","map":{"version":3,"names":["getDataAttributes","ctx","options","data","columnBorder","withColumnBorders","rowBorder","withRowBorders","striped","highlightOnHover","captionSide","stickyHeader","tableElement","element","name","charAt","toUpperCase","slice","Component","factory","_props","ref","props","useProps","classNames","className","style","styles","others","useTableContext","jsx","Box","component","getStyles","displayName","classes","TableTh","TableTd","TableTr","TableThead","TableTbody","TableTfoot","TableCaption"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Table\\Table.components.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  FactoryPayload,\n  useProps,\n} from '../../core';\nimport type { TableFactory } from './Table';\nimport { TableContextValue, useTableContext } from './Table.context';\nimport classes from './Table.module.css';\n\nexport interface TableElementProps<Selector extends string>\n  extends BoxProps,\n    CompoundStylesApiProps<Omit<TableFactory, 'stylesNames'> & { stylesNames: Selector }> {}\n\nexport interface TableThProps extends TableElementProps<'th'>, ElementProps<'th'> {}\nexport interface TableTdProps extends TableElementProps<'td'>, ElementProps<'td'> {}\nexport interface TableTrProps extends TableElementProps<'tr'>, ElementProps<'tr'> {}\nexport interface TableTheadProps extends TableElementProps<'thead'>, ElementProps<'thead'> {}\nexport interface TableTbodyProps extends TableElementProps<'tbody'>, ElementProps<'tbody'> {}\nexport interface TableTfootProps extends TableElementProps<'tfoot'>, ElementProps<'tfoot'> {}\nexport interface TableCaptionProps extends TableElementProps<'caption'>, ElementProps<'caption'> {}\n\nexport type TableThFactory = Factory<{\n  props: TableThProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'th';\n  compound: true;\n}>;\n\nexport type TableTdFactory = Factory<{\n  props: TableTdProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'td';\n  compound: true;\n}>;\n\nexport type TableTrFactory = Factory<{\n  props: TableTrProps;\n  ref: HTMLTableRowElement;\n  stylesNames: 'tr';\n  compound: true;\n}>;\n\nexport type TableTheadFactory = Factory<{\n  props: TableTheadProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'thead';\n  compound: true;\n}>;\n\nexport type TableTbodyFactory = Factory<{\n  props: TableTbodyProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tbody';\n  compound: true;\n}>;\n\nexport type TableTfootFactory = Factory<{\n  props: TableTfootProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tfoot';\n  compound: true;\n}>;\n\nexport type TableCaptionFactory = Factory<{\n  props: TableCaptionProps;\n  ref: HTMLTableCaptionElement;\n  stylesNames: 'caption';\n  compound: true;\n}>;\n\ninterface TableElementOptions {\n  columnBorder?: true;\n  rowBorder?: true;\n  striped?: true;\n  highlightOnHover?: true;\n  captionSide?: true;\n  stickyHeader?: true;\n}\n\nfunction getDataAttributes(ctx: TableContextValue, options?: TableElementOptions) {\n  if (!options) {\n    return undefined;\n  }\n\n  const data: Record<string, boolean | string> = {};\n\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data['data-with-column-border'] = true;\n  }\n\n  if (options.rowBorder && ctx.withRowBorders) {\n    data['data-with-row-border'] = true;\n  }\n\n  if (options.striped && ctx.striped) {\n    data['data-striped'] = ctx.striped;\n  }\n\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data['data-hover'] = true;\n  }\n\n  if (options.captionSide && ctx.captionSide) {\n    data['data-side'] = ctx.captionSide;\n  }\n\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data['data-sticky'] = true;\n  }\n\n  return data;\n}\n\nexport function tableElement<Factory extends FactoryPayload>(\n  element: 'th' | 'td' | 'tr' | 'thead' | 'tbody' | 'tfoot' | 'caption',\n  options?: TableElementOptions\n) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory<Factory>((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const { classNames, className, style, styles, ...others } = props;\n\n    const ctx = useTableContext();\n\n    return (\n      <Box\n        component={element}\n        ref={ref}\n        {...getDataAttributes(ctx, options)}\n        {...ctx.getStyles(element, { className, classNames, style, styles, props })}\n        {...others}\n      />\n    );\n  });\n\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\n\nexport const TableTh = tableElement<TableThFactory>('th', { columnBorder: true });\nexport const TableTd = tableElement<TableTdFactory>('td', { columnBorder: true });\nexport const TableTr = tableElement<TableTrFactory>('tr', {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true,\n});\nexport const TableThead = tableElement<TableTheadFactory>('thead', { stickyHeader: true });\nexport const TableTbody = tableElement<TableTbodyFactory>('tbody');\nexport const TableTfoot = tableElement<TableTfootFactory>('tfoot');\nexport const TableCaption = tableElement<TableCaptionFactory>('caption', { captionSide: true });\n"],"mappings":";;;;;;;;;;;;;;;;;AAoFA,SAASA,kBAAkBC,GAAA,EAAwBC,OAA+B;EAChF,IAAI,CAACA,OAAS;IACL;EAAA;EAGT,MAAMC,IAAA,GAAyC,CAAC;EAE5C,IAAAD,OAAA,CAAQE,YAAgB,IAAAH,GAAA,CAAII,iBAAmB;IACjDF,IAAA,CAAK,yBAAyB,CAAI;EAAA;EAGhC,IAAAD,OAAA,CAAQI,SAAa,IAAAL,GAAA,CAAIM,cAAgB;IAC3CJ,IAAA,CAAK,sBAAsB,CAAI;EAAA;EAG7B,IAAAD,OAAA,CAAQM,OAAW,IAAAP,GAAA,CAAIO,OAAS;IAC7BL,IAAA,eAAc,IAAIF,GAAI,CAAAO,OAAA;EAAA;EAGzB,IAAAN,OAAA,CAAQO,gBAAoB,IAAAR,GAAA,CAAIQ,gBAAkB;IACpDN,IAAA,CAAK,YAAY,CAAI;EAAA;EAGnB,IAAAD,OAAA,CAAQQ,WAAe,IAAAT,GAAA,CAAIS,WAAa;IACrCP,IAAA,YAAW,IAAIF,GAAI,CAAAS,WAAA;EAAA;EAGtB,IAAAR,OAAA,CAAQS,YAAgB,IAAAV,GAAA,CAAIU,YAAc;IAC5CR,IAAA,CAAK,aAAa,CAAI;EAAA;EAGjB,OAAAA,IAAA;AACT;AAEgB,SAAAS,aACdC,OAAA,EACAX,OACA;EACA,MAAMY,IAAO,WAAQD,OAAQ,CAAAE,MAAA,CAAO,CAAC,EAAEC,WAAY,EAAC,GAAGH,OAAA,CAAQI,KAAM,EAAC,CAAC;EACvE,MAAMC,SAAY,GAAAC,OAAA,CAAiB,CAACC,MAAA,EAAQC,GAAQ;IAClD,MAAMC,KAAQ,GAAAC,QAAA,CAAST,IAAM,MAAIM,MAAM;IACvC,MAAM;MAAEI,UAAY;MAAAC,SAAA;MAAWC,KAAA;MAAOC,MAAQ;MAAA,GAAGC;IAAA,CAAW,GAAAN,KAAA;IAE5D,MAAMrB,GAAA,GAAM4B,eAAgB;IAG1B,sBAAAC,GAAA,CAACC,GAAA;MACCC,SAAW,EAAAnB,OAAA;MACXQ,GAAA;MACC,GAAGrB,iBAAkB,CAAAC,GAAA,EAAKC,OAAO;MACjC,GAAGD,GAAI,CAAAgC,SAAA,CAAUpB,OAAS;QAAEY,SAAA;QAAWD,UAAY;QAAAE,KAAA;QAAOC,MAAQ;QAAAL;MAAA,CAAO;MACzE,GAAGM;IAAA,CACN;EAAA,CAEH;EAESV,SAAA,CAAAgB,WAAA,GAAc,iBAAiBpB,IAAI;EAC7CI,SAAA,CAAUiB,OAAU,GAAAA,OAAA;EACb,OAAAjB,SAAA;AACT;AAEO,MAAMkB,OAAA,GAAUxB,YAA6B,OAAM;EAAER,YAAA,EAAc;AAAM;AACzE,MAAMiC,OAAA,GAAUzB,YAA6B,OAAM;EAAER,YAAA,EAAc;AAAM;AACnE,MAAAkC,OAAA,GAAU1B,YAAA,CAA6B,IAAM;EACxDN,SAAW;EACXE,OAAS;EACTC,gBAAkB;AACpB,CAAC;AACM,MAAM8B,UAAA,GAAa3B,YAAgC,UAAS;EAAED,YAAA,EAAc;AAAM;AAC5E,MAAA6B,UAAA,GAAa5B,YAAA,CAAgC,OAAO;AACpD,MAAA6B,UAAA,GAAa7B,YAAA,CAAgC,OAAO;AAC1D,MAAM8B,YAAA,GAAe9B,YAAkC,YAAW;EAAEF,WAAA,EAAa;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}