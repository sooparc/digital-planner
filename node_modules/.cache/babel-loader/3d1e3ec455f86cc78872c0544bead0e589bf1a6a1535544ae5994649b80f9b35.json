{"ast":null,"code":"'use client';\n\nimport { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { useDidUpdate, mergeRefs } from '@mantine/hooks';\nfunction getAutoHeightDuration(height) {\n  if (!height || typeof height === \"string\") {\n    return 0;\n  }\n  const constant = height / 36;\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}\nfunction getElementHeight(el) {\n  return el?.current ? el.current.scrollHeight : \"auto\";\n}\nconst raf = typeof window !== \"undefined\" && window.requestAnimationFrame;\nfunction useCollapse({\n  transitionDuration,\n  transitionTimingFunction = \"ease\",\n  onTransitionEnd = () => {},\n  opened\n}) {\n  const el = useRef(null);\n  const collapsedHeight = 0;\n  const collapsedStyles = {\n    display: \"none\",\n    height: 0,\n    overflow: \"hidden\"\n  };\n  const [styles, setStylesRaw] = useState(opened ? {} : collapsedStyles);\n  const setStyles = newStyles => {\n    flushSync(() => setStylesRaw(newStyles));\n  };\n  const mergeStyles = newStyles => {\n    setStyles(oldStyles => ({\n      ...oldStyles,\n      ...newStyles\n    }));\n  };\n  function getTransitionStyles(height) {\n    const _duration = transitionDuration || getAutoHeightDuration(height);\n    return {\n      transition: `height ${_duration}ms ${transitionTimingFunction}, opacity ${_duration}ms ${transitionTimingFunction}`\n    };\n  }\n  useDidUpdate(() => {\n    if (typeof raf === \"function\") {\n      if (opened) {\n        raf(() => {\n          mergeStyles({\n            willChange: \"height\",\n            display: \"block\",\n            overflow: \"hidden\"\n          });\n          raf(() => {\n            const height = getElementHeight(el);\n            mergeStyles({\n              ...getTransitionStyles(height),\n              height\n            });\n          });\n        });\n      } else {\n        raf(() => {\n          const height = getElementHeight(el);\n          mergeStyles({\n            ...getTransitionStyles(height),\n            willChange: \"height\",\n            height\n          });\n          raf(() => mergeStyles({\n            height: collapsedHeight,\n            overflow: \"hidden\"\n          }));\n        });\n      }\n    }\n  }, [opened]);\n  const handleTransitionEnd = e => {\n    if (e.target !== el.current || e.propertyName !== \"height\") {\n      return;\n    }\n    if (opened) {\n      const height = getElementHeight(el);\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        mergeStyles({\n          height\n        });\n      }\n      onTransitionEnd();\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onTransitionEnd();\n    }\n  };\n  function getCollapseProps({\n    style = {},\n    refKey = \"ref\",\n    ...rest\n  } = {}) {\n    const theirRef = rest[refKey];\n    return {\n      \"aria-hidden\": !opened,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: handleTransitionEnd,\n      style: {\n        boxSizing: \"border-box\",\n        ...style,\n        ...styles\n      }\n    };\n  }\n  return getCollapseProps;\n}\nexport { getElementHeight, useCollapse };","map":{"version":3,"names":["getAutoHeightDuration","height","constant","Math","round","getElementHeight","el","current","scrollHeight","raf","window","requestAnimationFrame","useCollapse","transitionDuration","transitionTimingFunction","onTransitionEnd","opened","useRef","collapsedHeight","collapsedStyles","display","overflow","styles","setStylesRaw","useState","setStyles","newStyles","flushSync","mergeStyles","oldStyles","getTransitionStyles","_duration","transition","useDidUpdate","willChange","handleTransitionEnd","e","target","propertyName","getCollapseProps","style","refKey","rest","theirRef","mergeRefs","boxSizing"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Collapse\\use-collapse.ts"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { mergeRefs, useDidUpdate } from '@mantine/hooks';\nimport { CSSProperties } from '../../core';\n\nfunction getAutoHeightDuration(height: number | string) {\n  if (!height || typeof height === 'string') {\n    return 0;\n  }\n  const constant = height / 36;\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}\n\nexport function getElementHeight(\n  el: React.RefObject<HTMLElement | null> | { current?: { scrollHeight: number } }\n) {\n  return el?.current ? el.current.scrollHeight : 'auto';\n}\n\nconst raf = typeof window !== 'undefined' && window.requestAnimationFrame;\n\ninterface UseCollapse {\n  opened: boolean;\n  transitionDuration?: number;\n  transitionTimingFunction?: string;\n  onTransitionEnd?: () => void;\n}\n\ninterface GetCollapseProps {\n  [key: string]: unknown;\n  style?: CSSProperties;\n  onTransitionEnd?: (e: TransitionEvent) => void;\n  refKey?: string;\n  ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\nexport function useCollapse({\n  transitionDuration,\n  transitionTimingFunction = 'ease',\n  onTransitionEnd = () => {},\n  opened,\n}: UseCollapse): (props: GetCollapseProps) => Record<string, any> {\n  const el = useRef<HTMLElement | null>(null);\n  const collapsedHeight = 0;\n  const collapsedStyles = {\n    display: 'none',\n    height: 0,\n    overflow: 'hidden',\n  };\n  const [styles, setStylesRaw] = useState<CSSProperties>(opened ? {} : collapsedStyles);\n  const setStyles = (newStyles: {} | ((oldStyles: {}) => {})): void => {\n    flushSync(() => setStylesRaw(newStyles));\n  };\n\n  const mergeStyles = (newStyles: {}): void => {\n    setStyles((oldStyles) => ({ ...oldStyles, ...newStyles }));\n  };\n\n  function getTransitionStyles(height: number | string): {\n    transition: string;\n  } {\n    const _duration = transitionDuration || getAutoHeightDuration(height);\n    return {\n      transition: `height ${_duration}ms ${transitionTimingFunction}, opacity ${_duration}ms ${transitionTimingFunction}`,\n    };\n  }\n\n  useDidUpdate(() => {\n    if (typeof raf === 'function') {\n      if (opened) {\n        raf(() => {\n          mergeStyles({ willChange: 'height', display: 'block', overflow: 'hidden' });\n          raf(() => {\n            const height = getElementHeight(el);\n            mergeStyles({ ...getTransitionStyles(height), height });\n          });\n        });\n      } else {\n        raf(() => {\n          const height = getElementHeight(el);\n          mergeStyles({ ...getTransitionStyles(height), willChange: 'height', height });\n          raf(() => mergeStyles({ height: collapsedHeight, overflow: 'hidden' }));\n        });\n      }\n    }\n  }, [opened]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent): void => {\n    if (e.target !== el.current || e.propertyName !== 'height') {\n      return;\n    }\n\n    if (opened) {\n      const height = getElementHeight(el);\n\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        mergeStyles({ height });\n      }\n\n      onTransitionEnd();\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onTransitionEnd();\n    }\n  };\n\n  function getCollapseProps({ style = {}, refKey = 'ref', ...rest }: GetCollapseProps = {}) {\n    const theirRef: any = rest[refKey];\n    return {\n      'aria-hidden': !opened,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: handleTransitionEnd,\n      style: { boxSizing: 'border-box', ...style, ...styles },\n    };\n  }\n\n  return getCollapseProps;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}