{"ast":null,"code":"function getTransformedScaledValue(value) {\n  if (typeof value !== \"string\" || !value.includes(\"var(--mantine-scale)\")) {\n    return value;\n  }\n  return value.match(/^calc\\((.*?)\\)$/)?.[1].split(\"*\")[0].trim();\n}\nfunction px(value) {\n  const transformedValue = getTransformedScaledValue(value);\n  if (typeof transformedValue === \"number\") {\n    return transformedValue;\n  }\n  if (typeof transformedValue === \"string\") {\n    if (transformedValue.includes(\"calc\") || transformedValue.includes(\"var\")) {\n      return transformedValue;\n    }\n    if (transformedValue.includes(\"px\")) {\n      return Number(transformedValue.replace(\"px\", \"\"));\n    }\n    if (transformedValue.includes(\"rem\")) {\n      return Number(transformedValue.replace(\"rem\", \"\")) * 16;\n    }\n    if (transformedValue.includes(\"em\")) {\n      return Number(transformedValue.replace(\"em\", \"\")) * 16;\n    }\n    return Number(transformedValue);\n  }\n  return NaN;\n}\nexport { px };","map":{"version":3,"names":["getTransformedScaledValue","value","includes","match","split","trim","px","transformedValue","Number","replace","NaN"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\utils\\units-converters\\px.ts"],"sourcesContent":["function getTransformedScaledValue(value: unknown) {\n  if (typeof value !== 'string' || !value.includes('var(--mantine-scale)')) {\n    return value;\n  }\n\n  return value\n    .match(/^calc\\((.*?)\\)$/)?.[1]\n    .split('*')[0]\n    .trim();\n}\n\nexport function px(value: unknown) {\n  const transformedValue = getTransformedScaledValue(value);\n\n  if (typeof transformedValue === 'number') {\n    return transformedValue;\n  }\n\n  if (typeof transformedValue === 'string') {\n    if (transformedValue.includes('calc') || transformedValue.includes('var')) {\n      return transformedValue;\n    }\n\n    if (transformedValue.includes('px')) {\n      return Number(transformedValue.replace('px', ''));\n    }\n\n    if (transformedValue.includes('rem')) {\n      return Number(transformedValue.replace('rem', '')) * 16;\n    }\n\n    if (transformedValue.includes('em')) {\n      return Number(transformedValue.replace('em', '')) * 16;\n    }\n\n    return Number(transformedValue);\n  }\n\n  return NaN;\n}\n"],"mappings":"AAAA,SAASA,0BAA0BC,KAAgB;EACjD,IAAI,OAAOA,KAAU,iBAAY,CAACA,KAAM,CAAAC,QAAA,CAAS,sBAAsB,CAAG;IACjE,OAAAD,KAAA;EAAA;EAGF,OAAAA,KAAA,CACJE,KAAM,kBAAiB,CAAI,IAAC,CAC5B,CAAAC,KAAA,CAAM,GAAG,EAAE,CAAC,EACZC,IAAK;AACV;AAEO,SAASC,GAAGL,KAAgB;EAC3B,MAAAM,gBAAA,GAAmBP,yBAAA,CAA0BC,KAAK;EAEpD,WAAOM,gBAAA,KAAqB,QAAU;IACjC,OAAAA,gBAAA;EAAA;EAGL,WAAOA,gBAAA,KAAqB,QAAU;IACxC,IAAIA,gBAAA,CAAiBL,QAAS,OAAM,KAAKK,gBAAiB,CAAAL,QAAA,CAAS,KAAK,CAAG;MAClE,OAAAK,gBAAA;IAAA;IAGL,IAAAA,gBAAA,CAAiBL,QAAS,KAAI,CAAG;MACnC,OAAOM,MAAO,CAAAD,gBAAA,CAAiBE,OAAQ,OAAM,EAAE,CAAC;IAAA;IAG9C,IAAAF,gBAAA,CAAiBL,QAAS,MAAK,CAAG;MACpC,OAAOM,MAAA,CAAOD,gBAAiB,CAAAE,OAAA,CAAQ,KAAO,IAAE,CAAC,CAAI;IAAA;IAGnD,IAAAF,gBAAA,CAAiBL,QAAS,KAAI,CAAG;MACnC,OAAOM,MAAA,CAAOD,gBAAiB,CAAAE,OAAA,CAAQ,IAAM,IAAE,CAAC,CAAI;IAAA;IAGtD,OAAOD,MAAA,CAAOD,gBAAgB;EAAA;EAGzB,OAAAG,GAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}