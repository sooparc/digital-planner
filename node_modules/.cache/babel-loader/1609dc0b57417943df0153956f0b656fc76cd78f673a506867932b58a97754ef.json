{"ast":null,"code":"'use client';\n\nimport cx from 'clsx';\nconst EMPTY_CLASS_NAMES = {};\nfunction mergeClassNames(objects) {\n  const merged = {};\n  objects.forEach(obj => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n  return merged;\n}\nfunction resolveClassNames({\n  theme,\n  classNames,\n  props,\n  stylesCtx\n}) {\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map(item => typeof item === \"function\" ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES);\n  return mergeClassNames(resolvedClassNames);\n}\nexport { resolveClassNames };","map":{"version":3,"names":["EMPTY_CLASS_NAMES","mergeClassNames","objects","merged","forEach","obj","Object","entries","key","value","cx","resolveClassNames","theme","classNames","props","stylesCtx","arrayClassNames","Array","isArray","resolvedClassNames","map","item"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\styles-api\\use-styles\\get-class-name\\resolve-class-names\\resolve-class-names.ts"],"sourcesContent":["import cx from 'clsx';\nimport { MantineTheme } from '../../../../MantineProvider';\nimport type { _ClassNames } from '../get-class-name';\n\nexport interface ResolveClassNamesInput {\n  theme: MantineTheme;\n  classNames: _ClassNames;\n  props: Record<string, any>;\n  stylesCtx: Record<string, any> | undefined;\n}\n\nconst EMPTY_CLASS_NAMES: Partial<Record<string, string>> = {};\n\nfunction mergeClassNames(objects: Partial<Record<string, string>>[]) {\n  const merged: Partial<Record<string, string>> = {};\n\n  objects.forEach((obj) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n\n  return merged;\n}\n\nexport function resolveClassNames({ theme, classNames, props, stylesCtx }: ResolveClassNamesInput) {\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map((item) =>\n    typeof item === 'function' ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES\n  );\n\n  return mergeClassNames(resolvedClassNames);\n}\n"],"mappings":";;;AAWA,MAAMA,iBAAA,GAAqD,CAAC;AAE5D,SAASC,gBAAgBC,OAA4C;EACnE,MAAMC,MAAA,GAA0C,CAAC;EAEzCD,OAAA,CAAAE,OAAA,CAASC,GAAQ;IAChBC,MAAA,CAAAC,OAAA,CAAQF,GAAG,CAAE,CAAAD,OAAA,CAAQ,CAAC,CAACI,GAAA,EAAKC,KAAK,CAAM;MACxC,IAAAN,MAAA,CAAOK,GAAG,CAAG;QACfL,MAAA,CAAOK,GAAG,CAAI,GAAAE,EAAA,CAAGP,MAAO,CAAAK,GAAG,GAAGC,KAAK;MAAA,CAC9B;QACLN,MAAA,CAAOK,GAAG,CAAI,GAAAC,KAAA;MAAA;IAChB,CACD;EAAA,CACF;EAEM,OAAAN,MAAA;AACT;AAEO,SAASQ,kBAAkB;EAAEC,KAAA;EAAOC,UAAY;EAAAC,KAAA;EAAOC;AAAA,CAAqC;EACjG,MAAMC,eAAA,GAAkBC,KAAM,CAAAC,OAAA,CAAQL,UAAU,CAAI,GAAAA,UAAA,GAAa,CAACA,UAAU;EAC5E,MAAMM,kBAAA,GAAqBH,eAAgB,CAAAI,GAAA,CAAKC,IAC9C,WAAOA,IAAS,kBAAaA,IAAA,CAAKT,KAAO,EAAAE,KAAA,EAAOC,SAAS,IAAIM,IAAQ,IAAArB,iBACvE;EAEA,OAAOC,eAAA,CAAgBkB,kBAAkB;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}