{"ast":null,"code":"'use client';\n\nfunction horizontalSide(placement, arrowY, arrowOffset, arrowPosition) {\n  if (placement === \"center\" || arrowPosition === \"center\") {\n    return {\n      top: arrowY\n    };\n  }\n  if (placement === \"end\") {\n    return {\n      bottom: arrowOffset\n    };\n  }\n  if (placement === \"start\") {\n    return {\n      top: arrowOffset\n    };\n  }\n  return {};\n}\nfunction verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir) {\n  if (placement === \"center\" || arrowPosition === \"center\") {\n    return {\n      left: arrowX\n    };\n  }\n  if (placement === \"end\") {\n    return {\n      [dir === \"ltr\" ? \"right\" : \"left\"]: arrowOffset\n    };\n  }\n  if (placement === \"start\") {\n    return {\n      [dir === \"ltr\" ? \"left\" : \"right\"]: arrowOffset\n    };\n  }\n  return {};\n}\nconst radiusByFloatingSide = {\n  bottom: \"borderTopLeftRadius\",\n  left: \"borderTopRightRadius\",\n  right: \"borderBottomLeftRadius\",\n  top: \"borderBottomRightRadius\"\n};\nfunction getArrowPositionStyles({\n  position,\n  arrowSize,\n  arrowOffset,\n  arrowRadius,\n  arrowPosition,\n  arrowX,\n  arrowY,\n  dir\n}) {\n  const [side, placement = \"center\"] = position.split(\"-\");\n  const baseStyles = {\n    width: arrowSize,\n    height: arrowSize,\n    transform: \"rotate(45deg)\",\n    position: \"absolute\",\n    [radiusByFloatingSide[side]]: arrowRadius\n  };\n  const arrowPlacement = -arrowSize / 2;\n  if (side === \"left\") {\n    return {\n      ...baseStyles,\n      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),\n      right: arrowPlacement,\n      borderLeftColor: \"transparent\",\n      borderBottomColor: \"transparent\",\n      clipPath: \"polygon(100% 0, 0 0, 100% 100%)\"\n    };\n  }\n  if (side === \"right\") {\n    return {\n      ...baseStyles,\n      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),\n      left: arrowPlacement,\n      borderRightColor: \"transparent\",\n      borderTopColor: \"transparent\",\n      clipPath: \"polygon(0 100%, 0 0, 100% 100%)\"\n    };\n  }\n  if (side === \"top\") {\n    return {\n      ...baseStyles,\n      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),\n      bottom: arrowPlacement,\n      borderTopColor: \"transparent\",\n      borderLeftColor: \"transparent\",\n      clipPath: \"polygon(0 100%, 100% 100%, 100% 0)\"\n    };\n  }\n  if (side === \"bottom\") {\n    return {\n      ...baseStyles,\n      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),\n      top: arrowPlacement,\n      borderBottomColor: \"transparent\",\n      borderRightColor: \"transparent\",\n      clipPath: \"polygon(0 100%, 0 0, 100% 0)\"\n    };\n  }\n  return {};\n}\nexport { getArrowPositionStyles };","map":{"version":3,"names":["horizontalSide","placement","arrowY","arrowOffset","arrowPosition","top","bottom","verticalSide","arrowX","dir","left","radiusByFloatingSide","right","getArrowPositionStyles","position","arrowSize","arrowRadius","side","split","baseStyles","width","height","transform","arrowPlacement","borderLeftColor","borderBottomColor","clipPath","borderRightColor","borderTopColor"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Floating\\FloatingArrow\\get-arrow-position-styles.ts"],"sourcesContent":["import type { ArrowPosition, FloatingPlacement, FloatingPosition, FloatingSide } from '../types';\n\nfunction horizontalSide(\n  placement: FloatingPlacement | 'center',\n  arrowY: number | undefined,\n  arrowOffset: number,\n  arrowPosition: ArrowPosition\n) {\n  if (placement === 'center' || arrowPosition === 'center') {\n    return { top: arrowY };\n  }\n\n  if (placement === 'end') {\n    return { bottom: arrowOffset };\n  }\n\n  if (placement === 'start') {\n    return { top: arrowOffset };\n  }\n\n  return {};\n}\n\nfunction verticalSide(\n  placement: FloatingPlacement | 'center',\n  arrowX: number | undefined,\n  arrowOffset: number,\n  arrowPosition: ArrowPosition,\n  dir: 'rtl' | 'ltr'\n) {\n  if (placement === 'center' || arrowPosition === 'center') {\n    return { left: arrowX };\n  }\n\n  if (placement === 'end') {\n    return { [dir === 'ltr' ? 'right' : 'left']: arrowOffset };\n  }\n\n  if (placement === 'start') {\n    return { [dir === 'ltr' ? 'left' : 'right']: arrowOffset };\n  }\n\n  return {};\n}\n\nconst radiusByFloatingSide: Record<\n  FloatingSide,\n  keyof Pick<\n    React.CSSProperties,\n    | 'borderBottomLeftRadius'\n    | 'borderBottomRightRadius'\n    | 'borderTopLeftRadius'\n    | 'borderTopRightRadius'\n  >\n> = {\n  bottom: 'borderTopLeftRadius',\n  left: 'borderTopRightRadius',\n  right: 'borderBottomLeftRadius',\n  top: 'borderBottomRightRadius',\n};\n\nexport function getArrowPositionStyles({\n  position,\n  arrowSize,\n  arrowOffset,\n  arrowRadius,\n  arrowPosition,\n  arrowX,\n  arrowY,\n  dir,\n}: {\n  position: FloatingPosition;\n  arrowSize: number;\n  arrowOffset: number;\n  arrowRadius: number;\n  arrowPosition: ArrowPosition;\n  arrowX: number | undefined;\n  arrowY: number | undefined;\n  dir: 'rtl' | 'ltr';\n}) {\n  const [side, placement = 'center'] = position.split('-') as [FloatingSide, FloatingPlacement];\n  const baseStyles = {\n    width: arrowSize,\n    height: arrowSize,\n    transform: 'rotate(45deg)',\n    position: 'absolute',\n    [radiusByFloatingSide[side]]: arrowRadius,\n  };\n\n  const arrowPlacement = -arrowSize / 2;\n\n  if (side === 'left') {\n    return {\n      ...baseStyles,\n      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),\n      right: arrowPlacement,\n      borderLeftColor: 'transparent',\n      borderBottomColor: 'transparent',\n      clipPath: 'polygon(100% 0, 0 0, 100% 100%)',\n    };\n  }\n\n  if (side === 'right') {\n    return {\n      ...baseStyles,\n      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),\n      left: arrowPlacement,\n      borderRightColor: 'transparent',\n      borderTopColor: 'transparent',\n      clipPath: 'polygon(0 100%, 0 0, 100% 100%)',\n    };\n  }\n\n  if (side === 'top') {\n    return {\n      ...baseStyles,\n      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),\n      bottom: arrowPlacement,\n      borderTopColor: 'transparent',\n      borderLeftColor: 'transparent',\n      clipPath: 'polygon(0 100%, 100% 100%, 100% 0)',\n    };\n  }\n\n  if (side === 'bottom') {\n    return {\n      ...baseStyles,\n      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),\n      top: arrowPlacement,\n      borderBottomColor: 'transparent',\n      borderRightColor: 'transparent',\n      clipPath: 'polygon(0 100%, 0 0, 100% 0)',\n    };\n  }\n\n  return {};\n}\n"],"mappings":";;AAEA,SAASA,cACPA,CAAAC,SAAA,EACAC,MACA,EAAAC,WAAA,EACAC,aACA;EACI,IAAAH,SAAA,KAAc,QAAY,IAAAG,aAAA,KAAkB,QAAU;IACjD;MAAEC,GAAA,EAAKH;IAAO;EAAA;EAGvB,IAAID,SAAA,KAAc,KAAO;IAChB;MAAEK,MAAA,EAAQH;IAAY;EAAA;EAG/B,IAAIF,SAAA,KAAc,OAAS;IAClB;MAAEI,GAAA,EAAKF;IAAY;EAAA;EAG5B,OAAO,CAAC;AACV;AAEA,SAASI,YACPA,CAAAN,SAAA,EACAO,MACA,EAAAL,WAAA,EACAC,aAAA,EACAK,GACA;EACI,IAAAR,SAAA,KAAc,QAAY,IAAAG,aAAA,KAAkB,QAAU;IACjD;MAAEM,IAAA,EAAMF;IAAO;EAAA;EAGxB,IAAIP,SAAA,KAAc,KAAO;IACvB,OAAO;MAAE,CAACQ,GAAA,KAAQ,QAAQ,OAAU,SAAM,GAAGN;IAAY;EAAA;EAG3D,IAAIF,SAAA,KAAc,OAAS;IACzB,OAAO;MAAE,CAACQ,GAAA,KAAQ,QAAQ,MAAS,UAAO,GAAGN;IAAY;EAAA;EAG3D,OAAO,CAAC;AACV;AAEA,MAAMQ,oBASF;EACFL,MAAQ;EACRI,IAAM;EACNE,KAAO;EACPP,GAAK;AACP;AAEO,SAASQ,sBAAuBA,CAAA;EACrCC,QAAA;EACAC,SAAA;EACAZ,WAAA;EACAa,WAAA;EACAZ,aAAA;EACAI,MAAA;EACAN,MAAA;EACAO;AACF,CASG;EACD,MAAM,CAACQ,IAAM,EAAAhB,SAAA,GAAY,QAAQ,CAAI,GAAAa,QAAA,CAASI,KAAA,CAAM,GAAG;EACvD,MAAMC,UAAa;IACjBC,KAAO,EAAAL,SAAA;IACPM,MAAQ,EAAAN,SAAA;IACRO,SAAW;IACXR,QAAU;IACV,CAACH,oBAAA,CAAqBM,IAAI,CAAC,GAAGD;EAChC;EAEM,MAAAO,cAAA,GAAiB,CAACR,SAAY;EAEpC,IAAIE,IAAA,KAAS,MAAQ;IACZ;MACL,GAAGE,UAAA;MACH,GAAGnB,cAAA,CAAeC,SAAW,EAAAC,MAAA,EAAQC,WAAA,EAAaC,aAAa;MAC/DQ,KAAO,EAAAW,cAAA;MACPC,eAAiB;MACjBC,iBAAmB;MACnBC,QAAU;IACZ;EAAA;EAGF,IAAIT,IAAA,KAAS,OAAS;IACb;MACL,GAAGE,UAAA;MACH,GAAGnB,cAAA,CAAeC,SAAW,EAAAC,MAAA,EAAQC,WAAA,EAAaC,aAAa;MAC/DM,IAAM,EAAAa,cAAA;MACNI,gBAAkB;MAClBC,cAAgB;MAChBF,QAAU;IACZ;EAAA;EAGF,IAAIT,IAAA,KAAS,KAAO;IACX;MACL,GAAGE,UAAA;MACH,GAAGZ,YAAa,CAAAN,SAAA,EAAWO,MAAQ,EAAAL,WAAA,EAAaC,aAAA,EAAeK,GAAG;MAClEH,MAAQ,EAAAiB,cAAA;MACRK,cAAgB;MAChBJ,eAAiB;MACjBE,QAAU;IACZ;EAAA;EAGF,IAAIT,IAAA,KAAS,QAAU;IACd;MACL,GAAGE,UAAA;MACH,GAAGZ,YAAa,CAAAN,SAAA,EAAWO,MAAQ,EAAAL,WAAA,EAAaC,aAAA,EAAeK,GAAG;MAClEJ,GAAK,EAAAkB,cAAA;MACLE,iBAAmB;MACnBE,gBAAkB;MAClBD,QAAU;IACZ;EAAA;EAGF,OAAO,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}