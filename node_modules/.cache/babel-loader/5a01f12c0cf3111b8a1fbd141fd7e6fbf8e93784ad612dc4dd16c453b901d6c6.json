{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { keys } from '../../core/utils/keys/keys.mjs';\nimport { px } from '../../core/utils/units-converters/px.mjs';\nimport { filterProps } from '../../core/utils/filter-props/filter-props.mjs';\nimport 'react';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { getSortedBreakpoints } from '../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport { getBaseValue } from '../../core/utils/get-base-value/get-base-value.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { InlineStyles } from '../../core/InlineStyles/InlineStyles.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nfunction SimpleGridMediaVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector\n}) {\n  const theme = useMantineTheme();\n  const _verticalSpacing = verticalSpacing === void 0 ? spacing : verticalSpacing;\n  const baseStyles = filterProps({\n    \"--sg-spacing-x\": getSpacing(getBaseValue(spacing)),\n    \"--sg-spacing-y\": getSpacing(getBaseValue(_verticalSpacing)),\n    \"--sg-cols\": getBaseValue(cols)?.toString()\n  });\n  const queries = keys(theme.breakpoints).reduce((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof spacing === \"object\" && spacing[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-spacing-x\"] = getSpacing(spacing[breakpoint]);\n    }\n    if (typeof _verticalSpacing === \"object\" && _verticalSpacing[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-spacing-y\"] = getSpacing(_verticalSpacing[breakpoint]);\n    }\n    if (typeof cols === \"object\" && cols[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-cols\"] = cols[breakpoint];\n    }\n    return acc;\n  }, {});\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme.breakpoints).filter(breakpoint => keys(queries[breakpoint.value]).length > 0);\n  const media = sortedBreakpoints.map(breakpoint => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value]})`,\n    styles: queries[breakpoint.value]\n  }));\n  return /* @__PURE__ */jsx(InlineStyles, {\n    styles: baseStyles,\n    media,\n    selector\n  });\n}\nfunction getBreakpoints(values) {\n  if (typeof values === \"object\" && values !== null) {\n    return keys(values);\n  }\n  return [];\n}\nfunction sortBreakpoints(breakpoints) {\n  return breakpoints.sort((a, b) => px(a) - px(b));\n}\nfunction getUniqueBreakpoints({\n  spacing,\n  verticalSpacing,\n  cols\n}) {\n  const breakpoints = Array.from(/* @__PURE__ */new Set([...getBreakpoints(spacing), ...getBreakpoints(verticalSpacing), ...getBreakpoints(cols)]));\n  return sortBreakpoints(breakpoints);\n}\nfunction SimpleGridContainerVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector\n}) {\n  const _verticalSpacing = verticalSpacing === void 0 ? spacing : verticalSpacing;\n  const baseStyles = filterProps({\n    \"--sg-spacing-x\": getSpacing(getBaseValue(spacing)),\n    \"--sg-spacing-y\": getSpacing(getBaseValue(_verticalSpacing)),\n    \"--sg-cols\": getBaseValue(cols)?.toString()\n  });\n  const uniqueBreakpoints = getUniqueBreakpoints({\n    spacing,\n    verticalSpacing,\n    cols\n  });\n  const queries = uniqueBreakpoints.reduce((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof spacing === \"object\" && spacing[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-spacing-x\"] = getSpacing(spacing[breakpoint]);\n    }\n    if (typeof _verticalSpacing === \"object\" && _verticalSpacing[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-spacing-y\"] = getSpacing(_verticalSpacing[breakpoint]);\n    }\n    if (typeof cols === \"object\" && cols[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-cols\"] = cols[breakpoint];\n    }\n    return acc;\n  }, {});\n  const media = uniqueBreakpoints.map(breakpoint => ({\n    query: `simple-grid (min-width: ${breakpoint})`,\n    styles: queries[breakpoint]\n  }));\n  return /* @__PURE__ */jsx(InlineStyles, {\n    styles: baseStyles,\n    container: media,\n    selector\n  });\n}\nexport { SimpleGridContainerVariables, SimpleGridMediaVariables };","map":{"version":3,"names":["SimpleGridMediaVariables","spacing","verticalSpacing","cols","selector","theme","useMantineTheme","_verticalSpacing","baseStyles","filterProps","getSpacing","getBaseValue","toString","queries","keys","breakpoints","reduce","acc","breakpoint","sortedBreakpoints","getSortedBreakpoints","filter","value","length","media","map","query","styles","jsx","InlineStyles","getBreakpoints","values","sortBreakpoints","sort","a","b","px","getUniqueBreakpoints","Array","from","Set","SimpleGridContainerVariables","uniqueBreakpoints","container"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\SimpleGrid\\SimpleGridVariables.tsx"],"sourcesContent":["import {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  getSpacing,\n  InlineStyles,\n  keys,\n  MantineBreakpoint,\n  px,\n  useMantineTheme,\n} from '../../core';\nimport type { SimpleGridProps } from './SimpleGrid';\n\ninterface SimpleGridVariablesProps extends SimpleGridProps {\n  selector: string;\n}\n\nexport function SimpleGridMediaVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector,\n}: SimpleGridVariablesProps) {\n  const theme = useMantineTheme();\n  const _verticalSpacing = verticalSpacing === undefined ? spacing : verticalSpacing;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--sg-spacing-x': getSpacing(getBaseValue(spacing)),\n    '--sg-spacing-y': getSpacing(getBaseValue(_verticalSpacing)),\n    '--sg-cols': getBaseValue(cols)?.toString(),\n  });\n\n  const queries = keys(theme.breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof spacing === 'object' && spacing[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-spacing-x'] = getSpacing(spacing[breakpoint]);\n      }\n\n      if (typeof _verticalSpacing === 'object' && _verticalSpacing[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-spacing-y'] = getSpacing(_verticalSpacing[breakpoint]);\n      }\n\n      if (typeof cols === 'object' && cols[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-cols'] = cols[breakpoint];\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme.breakpoints).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const media = sortedBreakpoints.map((breakpoint) => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value as MantineBreakpoint]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return <InlineStyles styles={baseStyles} media={media} selector={selector} />;\n}\n\nfunction getBreakpoints(values: unknown) {\n  if (typeof values === 'object' && values !== null) {\n    return keys(values);\n  }\n\n  return [];\n}\n\nfunction sortBreakpoints(breakpoints: string[]) {\n  return breakpoints.sort((a, b) => (px(a) as number) - (px(b) as number));\n}\n\nfunction getUniqueBreakpoints({\n  spacing,\n  verticalSpacing,\n  cols,\n}: Omit<SimpleGridVariablesProps, 'selector'>) {\n  const breakpoints = Array.from(\n    new Set([\n      ...getBreakpoints(spacing),\n      ...getBreakpoints(verticalSpacing),\n      ...getBreakpoints(cols),\n    ])\n  );\n\n  return sortBreakpoints(breakpoints);\n}\n\nexport function SimpleGridContainerVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector,\n}: SimpleGridVariablesProps) {\n  const _verticalSpacing = verticalSpacing === undefined ? spacing : verticalSpacing;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--sg-spacing-x': getSpacing(getBaseValue(spacing)),\n    '--sg-spacing-y': getSpacing(getBaseValue(_verticalSpacing)),\n    '--sg-cols': getBaseValue(cols)?.toString(),\n  });\n\n  const uniqueBreakpoints = getUniqueBreakpoints({ spacing, verticalSpacing, cols });\n\n  const queries = uniqueBreakpoints.reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof spacing === 'object' && spacing[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-spacing-x'] = getSpacing(spacing[breakpoint]);\n      }\n\n      if (typeof _verticalSpacing === 'object' && _verticalSpacing[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-spacing-y'] = getSpacing(_verticalSpacing[breakpoint]);\n      }\n\n      if (typeof cols === 'object' && cols[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-cols'] = cols[breakpoint];\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const media = uniqueBreakpoints.map((breakpoint) => ({\n    query: `simple-grid (min-width: ${breakpoint})`,\n    styles: queries[breakpoint],\n  }));\n\n  return <InlineStyles styles={baseStyles} container={media} selector={selector} />;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAiBO,SAASA,wBAAyBA,CAAA;EACvCC,OAAA;EACAC,eAAA;EACAC,IAAA;EACAC;AACF,CAA6B;EAC3B,MAAMC,KAAA,GAAQC,eAAgB;EACxB,MAAAC,gBAAA,GAAmBL,eAAoB,cAAYD,OAAU,GAAAC,eAAA;EAEnE,MAAMM,UAAA,GAAiDC,WAAY;IACjE,gBAAkB,EAAAC,UAAA,CAAWC,YAAa,CAAAV,OAAO,CAAC;IAClD,gBAAkB,EAAAS,UAAA,CAAWC,YAAa,CAAAJ,gBAAgB,CAAC;IAC3D,WAAa,EAAAI,YAAA,CAAaR,IAAI,GAAGS,QAAS;EAAA,CAC3C;EAED,MAAMC,OAAU,GAAAC,IAAA,CAAKT,KAAM,CAAAU,WAAW,CAAE,CAAAC,MAAA,CACtC,CAACC,GAAA,EAAKC,UAAe;IACf,KAACD,GAAI,CAAAC,UAAU,CAAG;MAChBD,GAAA,CAAAC,UAAU,IAAI,CAAC;IAAA;IAGrB,IAAI,OAAOjB,OAAY,iBAAYA,OAAQ,CAAAiB,UAAU,MAAM,KAAW;MACpED,GAAA,CAAIC,UAAU,CAAE,iBAAgB,IAAIR,UAAW,CAAAT,OAAA,CAAQiB,UAAU,CAAC;IAAA;IAGpE,IAAI,OAAOX,gBAAqB,iBAAYA,gBAAiB,CAAAW,UAAU,MAAM,KAAW;MACtFD,GAAA,CAAIC,UAAU,CAAE,iBAAgB,IAAIR,UAAW,CAAAH,gBAAA,CAAiBW,UAAU,CAAC;IAAA;IAG7E,IAAI,OAAOf,IAAS,iBAAYA,IAAK,CAAAe,UAAU,MAAM,KAAW;MAC9DD,GAAA,CAAIC,UAAU,EAAE,WAAW,IAAIf,IAAA,CAAKe,UAAU;IAAA;IAGzC,OAAAD,GAAA;EACT,GACA,EACF;EAEA,MAAME,iBAAA,GAAoBC,oBAAqB,CAAAN,IAAA,CAAKD,OAAO,CAAG,EAAAR,KAAA,CAAMU,WAAW,CAAE,CAAAM,MAAA,CAC9EH,UAAA,IAAeJ,IAAK,CAAAD,OAAA,CAAQK,UAAA,CAAWI,KAAK,CAAC,EAAEC,MAAS,IAC3D;EAEA,MAAMC,KAAQ,GAAAL,iBAAA,CAAkBM,GAAI,CAACP,UAAgB;IACnDQ,KAAA,EAAO,eAAerB,KAAA,CAAMU,WAAY,CAAAG,UAAA,CAAWI,KAA0B,CAAC;IAC9EK,MAAA,EAAQd,OAAQ,CAAAK,UAAA,CAAWI,KAAK;EAAA,CAChC;EAEF,OAAQ,eAAAM,GAAA,CAAAC,YAAA;IAAaF,MAAQ,EAAAnB,UAAA;IAAYgB,KAAA;IAAcpB;EAAoB;AAC7E;AAEA,SAAS0B,eAAeC,MAAiB;EACvC,IAAI,OAAOA,MAAA,KAAW,QAAY,IAAAA,MAAA,KAAW,IAAM;IACjD,OAAOjB,IAAA,CAAKiB,MAAM;EAAA;EAGpB,OAAO,EAAC;AACV;AAEA,SAASC,gBAAgBjB,WAAuB;EACvC,OAAAA,WAAA,CAAYkB,IAAK,EAACC,CAAG,EAAAC,CAAA,KAAOC,EAAA,CAAGF,CAAC,IAAgBE,EAAG,CAAAD,CAAC,CAAY;AACzE;AAEA,SAASE,oBAAqBA,CAAA;EAC5BpC,OAAA;EACAC,eAAA;EACAC;AACF,CAA+C;EAC7C,MAAMY,WAAA,GAAcuB,KAAM,CAAAC,IAAA,oBACpBC,GAAI,EACN,GAAGV,cAAA,CAAe7B,OAAO,GACzB,GAAG6B,cAAA,CAAe5B,eAAe,GACjC,GAAG4B,cAAA,CAAe3B,IAAI,EACvB,CACH;EAEA,OAAO6B,eAAA,CAAgBjB,WAAW;AACpC;AAEO,SAAS0B,4BAA6BA,CAAA;EAC3CxC,OAAA;EACAC,eAAA;EACAC,IAAA;EACAC;AACF,CAA6B;EACrB,MAAAG,gBAAA,GAAmBL,eAAoB,cAAYD,OAAU,GAAAC,eAAA;EAEnE,MAAMM,UAAA,GAAiDC,WAAY;IACjE,gBAAkB,EAAAC,UAAA,CAAWC,YAAa,CAAAV,OAAO,CAAC;IAClD,gBAAkB,EAAAS,UAAA,CAAWC,YAAa,CAAAJ,gBAAgB,CAAC;IAC3D,WAAa,EAAAI,YAAA,CAAaR,IAAI,GAAGS,QAAS;EAAA,CAC3C;EAED,MAAM8B,iBAAA,GAAoBL,oBAAqB;IAAEpC,OAAS;IAAAC,eAAA;IAAiBC;EAAA,CAAM;EAEjF,MAAMU,OAAA,GAAU6B,iBAAkB,CAAA1B,MAAA,CAChC,CAACC,GAAA,EAAKC,UAAe;IACf,KAACD,GAAI,CAAAC,UAAU,CAAG;MAChBD,GAAA,CAAAC,UAAU,IAAI,CAAC;IAAA;IAGrB,IAAI,OAAOjB,OAAY,iBAAYA,OAAQ,CAAAiB,UAAU,MAAM,KAAW;MACpED,GAAA,CAAIC,UAAU,CAAE,iBAAgB,IAAIR,UAAW,CAAAT,OAAA,CAAQiB,UAAU,CAAC;IAAA;IAGpE,IAAI,OAAOX,gBAAqB,iBAAYA,gBAAiB,CAAAW,UAAU,MAAM,KAAW;MACtFD,GAAA,CAAIC,UAAU,CAAE,iBAAgB,IAAIR,UAAW,CAAAH,gBAAA,CAAiBW,UAAU,CAAC;IAAA;IAG7E,IAAI,OAAOf,IAAS,iBAAYA,IAAK,CAAAe,UAAU,MAAM,KAAW;MAC9DD,GAAA,CAAIC,UAAU,EAAE,WAAW,IAAIf,IAAA,CAAKe,UAAU;IAAA;IAGzC,OAAAD,GAAA;EACT,GACA,EACF;EAEA,MAAMO,KAAQ,GAAAkB,iBAAA,CAAkBjB,GAAI,CAACP,UAAgB;IACnDQ,KAAA,EAAO,2BAA2BR,UAAU;IAC5CS,MAAA,EAAQd,OAAA,CAAQK,UAAU;EAAA,CAC1B;EAEF,sBAAAU,GAAA,CAAQC,YAAa;IAAAF,MAAA,EAAQnB,UAAY;IAAAmC,SAAA,EAAWnB,KAAA;IAAOpB;EAAoB;AACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}