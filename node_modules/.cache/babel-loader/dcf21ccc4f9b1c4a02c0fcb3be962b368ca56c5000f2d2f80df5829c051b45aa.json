{"ast":null,"code":"'use client';\n\nimport { parseThemeColor } from '../../../../MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport 'react';\nimport 'react/jsx-runtime';\nimport '@mantine/hooks';\nimport '../../../../MantineProvider/Mantine.context.mjs';\nimport '../../../../MantineProvider/default-theme.mjs';\nimport '../../../../MantineProvider/MantineProvider.mjs';\nimport '../../../../MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../../MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nfunction colorResolver(color, theme) {\n  const parsedColor = parseThemeColor({\n    color,\n    theme\n  });\n  if (parsedColor.color === \"dimmed\") {\n    return \"var(--mantine-color-dimmed)\";\n  }\n  if (parsedColor.color === \"bright\") {\n    return \"var(--mantine-color-bright)\";\n  }\n  return parsedColor.variable ? `var(${parsedColor.variable})` : parsedColor.color;\n}\nfunction textColorResolver(color, theme) {\n  const parsedColor = parseThemeColor({\n    color,\n    theme\n  });\n  if (parsedColor.isThemeColor && parsedColor.shade === void 0) {\n    return `var(--mantine-color-${parsedColor.color}-text)`;\n  }\n  return colorResolver(color, theme);\n}\nexport { colorResolver, textColorResolver };","map":{"version":3,"names":["colorResolver","color","theme","parsedColor","parseThemeColor","variable","textColorResolver","isThemeColor","shade"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\Box\\style-props\\resolvers\\color-resolver\\color-resolver.ts"],"sourcesContent":["import { MantineTheme, parseThemeColor } from '../../../../MantineProvider';\n\nexport function colorResolver(color: unknown, theme: MantineTheme) {\n  const parsedColor = parseThemeColor({ color, theme });\n\n  if (parsedColor.color === 'dimmed') {\n    return 'var(--mantine-color-dimmed)';\n  }\n\n  if (parsedColor.color === 'bright') {\n    return 'var(--mantine-color-bright)';\n  }\n  return parsedColor.variable ? `var(${parsedColor.variable})` : parsedColor.color;\n}\n\nexport function textColorResolver(color: unknown, theme: MantineTheme) {\n  const parsedColor = parseThemeColor({ color, theme });\n\n  if (parsedColor.isThemeColor && parsedColor.shade === undefined) {\n    return `var(--mantine-color-${parsedColor.color}-text)`;\n  }\n\n  return colorResolver(color, theme);\n}\n"],"mappings":";;;;;;;;;;;AAEgB,SAAAA,cAAcC,KAAA,EAAgBC,KAAqB;EACjE,MAAMC,WAAc,GAAAC,eAAA,CAAgB;IAAEH,KAAA;IAAOC;EAAA,CAAO;EAEhD,IAAAC,WAAA,CAAYF,KAAA,KAAU,QAAU;IAC3B;EAAA;EAGL,IAAAE,WAAA,CAAYF,KAAA,KAAU,QAAU;IAC3B;EAAA;EAET,OAAOE,WAAA,CAAYE,QAAW,UAAOF,WAAY,CAAAE,QAAQ,MAAMF,WAAY,CAAAF,KAAA;AAC7E;AAEgB,SAAAK,kBAAkBL,KAAA,EAAgBC,KAAqB;EACrE,MAAMC,WAAc,GAAAC,eAAA,CAAgB;IAAEH,KAAA;IAAOC;EAAA,CAAO;EAEpD,IAAIC,WAAY,CAAAI,YAAA,IAAgBJ,WAAY,CAAAK,KAAA,KAAU,KAAW;IACxD,8BAAuBL,WAAA,CAAYF,KAAK;EAAA;EAG1C,OAAAD,aAAA,CAAcC,KAAA,EAAOC,KAAK;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}