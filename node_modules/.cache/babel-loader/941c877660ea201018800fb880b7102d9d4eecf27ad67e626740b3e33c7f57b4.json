{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport cx from 'clsx';\nimport '../../Checkbox/Checkbox.mjs';\nimport '../../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../../Checkbox/CheckIcon.mjs';\nimport '../../Checkbox/CheckboxIndicator/CheckboxIndicator.mjs';\nimport '../../Checkbox/CheckboxCard/CheckboxCard.mjs';\nimport '../../Checkbox/CheckboxCard/CheckboxCard.context.mjs';\nimport '../../Checkbox/CheckboxGroup.context.mjs';\nimport { ScrollArea } from '../../ScrollArea/ScrollArea.mjs';\nimport { Combobox } from '../Combobox.mjs';\nimport { defaultOptionsFilter } from './default-options-filter.mjs';\nimport { isEmptyComboboxData } from './is-empty-combobox-data.mjs';\nimport { isOptionsGroup } from './is-options-group.mjs';\nimport { validateOptions } from './validate-options.mjs';\nimport classes from '../Combobox.module.css.mjs';\nfunction isValueChecked(value, optionValue) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\nfunction Option({\n  data,\n  withCheckIcon,\n  value,\n  checkIconPosition,\n  unstyled,\n  renderOption\n}) {\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && /* @__PURE__ */jsx(CheckIcon, {\n      className: classes.optionsDropdownCheckIcon\n    });\n    const defaultContent = /* @__PURE__ */jsxs(Fragment, {\n      children: [checkIconPosition === \"left\" && check, /* @__PURE__ */jsx(\"span\", {\n        children: data.label\n      }), checkIconPosition === \"right\" && check]\n    });\n    return /* @__PURE__ */jsx(Combobox.Option, {\n      value: data.value,\n      disabled: data.disabled,\n      className: cx({\n        [classes.optionsDropdownOption]: !unstyled\n      }),\n      \"data-reverse\": checkIconPosition === \"right\" || void 0,\n      \"data-checked\": checked || void 0,\n      \"aria-selected\": checked,\n      active: checked,\n      children: typeof renderOption === \"function\" ? renderOption({\n        option: data,\n        checked\n      }) : defaultContent\n    });\n  }\n  const options = data.items.map(item => /* @__PURE__ */jsx(Option, {\n    data: item,\n    value,\n    unstyled,\n    withCheckIcon,\n    checkIconPosition,\n    renderOption\n  }, item.value));\n  return /* @__PURE__ */jsx(Combobox.Group, {\n    label: data.group,\n    children: options\n  });\n}\nfunction OptionsDropdown({\n  data,\n  hidden,\n  hiddenWhenEmpty,\n  filter,\n  search,\n  limit,\n  maxDropdownHeight,\n  withScrollArea = true,\n  filterOptions = true,\n  withCheckIcon = false,\n  value,\n  checkIconPosition,\n  nothingFoundMessage,\n  unstyled,\n  labelId,\n  renderOption,\n  scrollAreaProps,\n  \"aria-label\": ariaLabel\n}) {\n  validateOptions(data);\n  const shouldFilter = typeof search === \"string\";\n  const filteredData = shouldFilter ? (filter || defaultOptionsFilter)({\n    options: data,\n    search: filterOptions ? search : \"\",\n    limit: limit ?? Infinity\n  }) : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n  const options = filteredData.map(item => /* @__PURE__ */jsx(Option, {\n    data: item,\n    withCheckIcon,\n    value,\n    checkIconPosition,\n    unstyled,\n    renderOption\n  }, isOptionsGroup(item) ? item.group : item.value));\n  return /* @__PURE__ */jsx(Combobox.Dropdown, {\n    hidden: hidden || hiddenWhenEmpty && isEmpty,\n    children: /* @__PURE__ */jsxs(Combobox.Options, {\n      labelledBy: labelId,\n      \"aria-label\": ariaLabel,\n      children: [withScrollArea ? /* @__PURE__ */jsx(ScrollArea.Autosize, {\n        mah: maxDropdownHeight ?? 220,\n        type: \"scroll\",\n        scrollbarSize: \"var(--combobox-padding)\",\n        offsetScrollbars: \"y\",\n        ...scrollAreaProps,\n        children: options\n      }) : options, isEmpty && nothingFoundMessage && /* @__PURE__ */jsx(Combobox.Empty, {\n        children: nothingFoundMessage\n      })]\n    })\n  });\n}\nexport { OptionsDropdown };","map":{"version":3,"names":["isValueChecked","value","optionValue","Array","isArray","includes","Option","data","withCheckIcon","checkIconPosition","unstyled","renderOption","isOptionsGroup","checked","check","jsx","CheckIcon","className","classes","optionsDropdownCheckIcon","defaultContent","jsxs","Fragment","children","label","Combobox","disabled","cx","optionsDropdownOption","active","option","options","items","map","item","Group","group","OptionsDropdown","hidden","hiddenWhenEmpty","filter","search","limit","maxDropdownHeight","withScrollArea","filterOptions","nothingFoundMessage","labelId","scrollAreaProps","ariaLabel","validateOptions","shouldFilter","filteredData","defaultOptionsFilter","Infinity","isEmpty","isEmptyComboboxData","Dropdown","Options","labelledBy","ScrollArea","Autosize","mah","type","scrollbarSize","offsetScrollbars","Empty"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Combobox\\OptionsDropdown\\OptionsDropdown.tsx"],"sourcesContent":["import cx from 'clsx';\nimport { CheckIcon } from '../../Checkbox';\nimport { ScrollArea, ScrollAreaProps } from '../../ScrollArea/ScrollArea';\nimport { Combobox } from '../Combobox';\nimport { ComboboxItem, ComboboxLikeRenderOptionInput, ComboboxParsedItem } from '../Combobox.types';\nimport { defaultOptionsFilter, FilterOptionsInput } from './default-options-filter';\nimport { isEmptyComboboxData } from './is-empty-combobox-data';\nimport { isOptionsGroup } from './is-options-group';\nimport { validateOptions } from './validate-options';\nimport classes from '../Combobox.module.css';\n\nexport type OptionsFilter = (input: FilterOptionsInput) => ComboboxParsedItem[];\n\nexport interface OptionsGroup {\n  group: string;\n  items: ComboboxItem[];\n}\n\nexport type OptionsData = (ComboboxItem | OptionsGroup)[];\n\ninterface OptionProps {\n  data: ComboboxItem | OptionsGroup;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  unstyled: boolean | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n}\n\nfunction isValueChecked(value: string | string[] | undefined | null, optionValue: string) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\n\nfunction Option({\n  data,\n  withCheckIcon,\n  value,\n  checkIconPosition,\n  unstyled,\n  renderOption,\n}: OptionProps) {\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && (\n      <CheckIcon className={classes.optionsDropdownCheckIcon} />\n    );\n\n    const defaultContent = (\n      <>\n        {checkIconPosition === 'left' && check}\n        <span>{data.label}</span>\n        {checkIconPosition === 'right' && check}\n      </>\n    );\n\n    return (\n      <Combobox.Option\n        value={data.value}\n        disabled={data.disabled}\n        className={cx({ [classes.optionsDropdownOption]: !unstyled })}\n        data-reverse={checkIconPosition === 'right' || undefined}\n        data-checked={checked || undefined}\n        aria-selected={checked}\n        active={checked}\n      >\n        {typeof renderOption === 'function'\n          ? renderOption({ option: data, checked })\n          : defaultContent}\n      </Combobox.Option>\n    );\n  }\n\n  const options = data.items.map((item) => (\n    <Option\n      data={item}\n      value={value}\n      key={item.value}\n      unstyled={unstyled}\n      withCheckIcon={withCheckIcon}\n      checkIconPosition={checkIconPosition}\n      renderOption={renderOption}\n    />\n  ));\n\n  return <Combobox.Group label={data.group}>{options}</Combobox.Group>;\n}\n\nexport interface OptionsDropdownProps {\n  data: OptionsData;\n  filter: OptionsFilter | undefined;\n  search: string | undefined;\n  limit: number | undefined;\n  withScrollArea: boolean | undefined;\n  maxDropdownHeight: number | string | undefined;\n  hidden?: boolean;\n  hiddenWhenEmpty?: boolean;\n  filterOptions?: boolean;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  nothingFoundMessage?: React.ReactNode;\n  unstyled: boolean | undefined;\n  labelId: string | undefined;\n  'aria-label': string | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n  scrollAreaProps: ScrollAreaProps | undefined;\n}\n\nexport function OptionsDropdown({\n  data,\n  hidden,\n  hiddenWhenEmpty,\n  filter,\n  search,\n  limit,\n  maxDropdownHeight,\n  withScrollArea = true,\n  filterOptions = true,\n  withCheckIcon = false,\n  value,\n  checkIconPosition,\n  nothingFoundMessage,\n  unstyled,\n  labelId,\n  renderOption,\n  scrollAreaProps,\n  'aria-label': ariaLabel,\n}: OptionsDropdownProps) {\n  validateOptions(data);\n\n  const shouldFilter = typeof search === 'string';\n  const filteredData = shouldFilter\n    ? (filter || defaultOptionsFilter)({\n        options: data,\n        search: filterOptions ? search : '',\n        limit: limit ?? Infinity,\n      })\n    : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n\n  const options = filteredData.map((item) => (\n    <Option\n      data={item}\n      key={isOptionsGroup(item) ? item.group : item.value}\n      withCheckIcon={withCheckIcon}\n      value={value}\n      checkIconPosition={checkIconPosition}\n      unstyled={unstyled}\n      renderOption={renderOption}\n    />\n  ));\n\n  return (\n    <Combobox.Dropdown hidden={hidden || (hiddenWhenEmpty && isEmpty)}>\n      <Combobox.Options labelledBy={labelId} aria-label={ariaLabel}>\n        {withScrollArea ? (\n          <ScrollArea.Autosize\n            mah={maxDropdownHeight ?? 220}\n            type=\"scroll\"\n            scrollbarSize=\"var(--combobox-padding)\"\n            offsetScrollbars=\"y\"\n            {...scrollAreaProps}\n          >\n            {options}\n          </ScrollArea.Autosize>\n        ) : (\n          options\n        )}\n        {isEmpty && nothingFoundMessage && <Combobox.Empty>{nothingFoundMessage}</Combobox.Empty>}\n      </Combobox.Options>\n    </Combobox.Dropdown>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}