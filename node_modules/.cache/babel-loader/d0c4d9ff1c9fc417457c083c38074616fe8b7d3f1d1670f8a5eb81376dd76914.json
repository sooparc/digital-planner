{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useProgressContext } from '../Progress.context.mjs';\nimport classes from '../Progress.module.css.mjs';\nconst defaultProps = {\n  withAria: true\n};\nconst ProgressSection = factory((props, ref) => {\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    value,\n    withAria,\n    color,\n    striped,\n    animated,\n    mod,\n    ...others\n  } = useProps(\"ProgressSection\", defaultProps, props);\n  const ctx = useProgressContext();\n  const theme = useMantineTheme();\n  const ariaAttributes = withAria ? {\n    role: \"progressbar\",\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": value,\n    \"aria-valuetext\": `${value}%`\n  } : {};\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...ctx.getStyles(\"section\", {\n      className,\n      classNames,\n      styles,\n      style\n    }),\n    ...others,\n    ...ariaAttributes,\n    mod: [{\n      striped: striped || animated,\n      animated\n    }, mod],\n    __vars: {\n      \"--progress-section-width\": `${value}%`,\n      \"--progress-section-color\": getThemeColor(color, theme),\n      \"--progress-label-color\": getAutoContrastValue(ctx.autoContrast, theme) ? getContrastColor({\n        color,\n        theme,\n        autoContrast: ctx.autoContrast\n      }) : void 0\n    }\n  });\n});\nProgressSection.classes = classes;\nProgressSection.displayName = \"@mantine/core/ProgressSection\";\nexport { ProgressSection };","map":{"version":3,"names":["defaultProps","withAria","ProgressSection","factory","props","ref","classNames","className","style","styles","vars","value","color","striped","animated","mod","others","useProps","ctx","useProgressContext","theme","useMantineTheme","ariaAttributes","role","jsx","Box","getStyles","__vars","getThemeColor","getAutoContrastValue","autoContrast","getContrastColor","classes","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Progress\\ProgressSection\\ProgressSection.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  getAutoContrastValue,\n  getContrastColor,\n  getThemeColor,\n  MantineColor,\n  useMantineTheme,\n  useProps,\n} from '../../../core';\nimport { useProgressContext } from '../Progress.context';\nimport classes from '../Progress.module.css';\n\nexport type ProgressSectionStylesNames = 'section';\n\nexport interface ProgressSectionProps\n  extends BoxProps,\n    CompoundStylesApiProps<ProgressSectionFactory>,\n    ElementProps<'div'> {\n  /** Value of the section in 0â€“100 range  */\n  value: number;\n\n  /** Determines whether `aria-*` props should be added to the root element, `true` by default */\n  withAria?: boolean;\n\n  /** Key of `theme.colors` or any valid CSS value, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Determines whether the section should have stripes, `false` by default */\n  striped?: boolean;\n\n  /** Determines whether the sections stripes should be animated, if set, `striped` prop is ignored, `false` by default */\n  animated?: boolean;\n}\n\nexport type ProgressSectionFactory = Factory<{\n  props: ProgressSectionProps;\n  ref: HTMLDivElement;\n  stylesNames: ProgressSectionStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ProgressSectionProps> = {\n  withAria: true,\n};\n\nexport const ProgressSection = factory<ProgressSectionFactory>((props, ref) => {\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    value,\n    withAria,\n    color,\n    striped,\n    animated,\n    mod,\n    ...others\n  } = useProps('ProgressSection', defaultProps, props);\n\n  const ctx = useProgressContext();\n  const theme = useMantineTheme();\n\n  const ariaAttributes = withAria\n    ? {\n        role: 'progressbar',\n        'aria-valuemax': 100,\n        'aria-valuemin': 0,\n        'aria-valuenow': value,\n        'aria-valuetext': `${value}%`,\n      }\n    : {};\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles('section', { className, classNames, styles, style })}\n      {...others}\n      {...ariaAttributes}\n      mod={[{ striped: striped || animated, animated }, mod]}\n      __vars={{\n        '--progress-section-width': `${value}%`,\n        '--progress-section-color': getThemeColor(color, theme),\n        '--progress-label-color': getAutoContrastValue(ctx.autoContrast, theme)\n          ? getContrastColor({ color, theme, autoContrast: ctx.autoContrast })\n          : undefined,\n      }}\n    />\n  );\n});\n\nProgressSection.classes = classes;\nProgressSection.displayName = '@mantine/core/ProgressSection';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AA8CA,MAAMA,YAA8C;EAClDC,QAAU;AACZ;AAEO,MAAMC,eAAkB,GAAAC,OAAA,CAAgC,CAACC,KAAA,EAAOC,GAAQ;EACvE;IACJC,UAAA;IACAC,SAAA;IACAC,KAAA;IACAC,MAAA;IACAC,IAAA;IACAC,KAAA;IACAV,QAAA;IACAW,KAAA;IACAC,OAAA;IACAC,QAAA;IACAC,GAAA;IACA,GAAGC;EACD,IAAAC,QAAA,CAAS,iBAAmB,EAAAjB,YAAA,EAAcI,KAAK;EAEnD,MAAMc,GAAA,GAAMC,kBAAmB;EAC/B,MAAMC,KAAA,GAAQC,eAAgB;EAE9B,MAAMC,cAAA,GAAiBrB,QACnB;IACEsB,IAAM;IACN,eAAiB;IACjB,eAAiB;IACjB,eAAiB,EAAAZ,KAAA;IACjB,kBAAkB,GAAGA,KAAK;EAAA,IAE5B,CAAC;EAGH,sBAAAa,GAAA,CAACC,GAAA;IACCpB,GAAA;IACC,GAAGa,GAAA,CAAIQ,SAAU,YAAW;MAAEnB,SAAW;MAAAD,UAAA;MAAYG,MAAQ;MAAAD;IAAA,CAAO;IACpE,GAAGQ,MAAA;IACH,GAAGM,cAAA;IACJP,GAAA,EAAK,CAAC;MAAEF,OAAA,EAASA,OAAA,IAAWC,QAAU;MAAAA;IAAA,GAAYC,GAAG;IACrDY,MAAQ;MACN,4BAA4B,GAAGhB,KAAK;MACpC,4BAA4BiB,aAAc,CAAAhB,KAAA,EAAOQ,KAAK;MACtD,wBAA0B,EAAAS,oBAAA,CAAqBX,GAAI,CAAAY,YAAA,EAAcV,KAAK,CAClE,GAAAW,gBAAA,CAAiB;QAAEnB,KAAA;QAAOQ,KAAO;QAAAU,YAAA,EAAcZ,GAAI,CAAAY;MAAA,CAAc,CACjE;IAAA;EACN,CACF;AAEJ,CAAC;AAED5B,eAAA,CAAgB8B,OAAU,GAAAA,OAAA;AAC1B9B,eAAA,CAAgB+B,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}