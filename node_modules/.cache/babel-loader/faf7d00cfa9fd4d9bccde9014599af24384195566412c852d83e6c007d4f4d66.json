{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useUncontrolled } from '@mantine/hooks';\nimport 'react';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ChipGroupProvider } from '../ChipGroup.context.mjs';\nconst defaultProps = {};\nfunction ChipGroup(props) {\n  const {\n    value,\n    defaultValue,\n    onChange,\n    multiple,\n    children\n  } = useProps(\"ChipGroup\", defaultProps, props);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isChipSelected = val => Array.isArray(_value) ? _value.includes(val) : val === _value;\n  const handleChange = event => {\n    const val = event.currentTarget.value;\n    if (Array.isArray(_value)) {\n      setValue(_value.includes(val) ? _value.filter(v => v !== val) : [..._value, val]);\n    } else {\n      setValue(val);\n    }\n  };\n  return /* @__PURE__ */jsx(ChipGroupProvider, {\n    value: {\n      isChipSelected,\n      onChange: handleChange,\n      multiple\n    },\n    children\n  });\n}\nChipGroup.displayName = \"@mantine/core/ChipGroup\";\nexport { ChipGroup };","map":{"version":3,"names":["defaultProps","ChipGroup","props","value","defaultValue","onChange","multiple","children","useProps","_value","setValue","useUncontrolled","finalValue","isChipSelected","val","Array","isArray","includes","handleChange","event","currentTarget","filter","v","jsx","ChipGroupProvider","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Chip\\ChipGroup\\ChipGroup.tsx"],"sourcesContent":["import { useUncontrolled } from '@mantine/hooks';\nimport { useProps } from '../../../core';\nimport { ChipGroupProvider } from '../ChipGroup.context';\n\nexport interface ChipGroupProps<T extends boolean = false> {\n  /** Determines whether it is allowed to select multiple values, `false` by default */\n  multiple?: T;\n\n  /** Controlled component value */\n  value?: T extends true ? string[] : string | null;\n\n  /** Uncontrolled component initial value */\n  defaultValue?: T extends true ? string[] : string | null;\n\n  /** Called when value changes. If `multiple` prop is set, called with an array of selected values. If not, called with a string value of selected chip. */\n  onChange?: (value: T extends true ? string[] : string) => void;\n\n  /** `Chip` components and any other elements */\n  children?: React.ReactNode;\n}\n\nconst defaultProps: Partial<ChipGroupProps<false>> = {};\n\nexport function ChipGroup<T extends boolean>(props: ChipGroupProps<T>) {\n  const { value, defaultValue, onChange, multiple, children } = useProps(\n    'ChipGroup',\n    defaultProps as any,\n    props\n  );\n\n  const [_value, setValue] = useUncontrolled<string | null | string[]>({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as string[]) : null,\n    onChange,\n  });\n\n  const isChipSelected = (val: string) =>\n    Array.isArray(_value) ? _value.includes(val) : val === _value;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.currentTarget.value;\n    if (Array.isArray(_value)) {\n      setValue(_value.includes(val) ? _value.filter((v) => v !== val) : [..._value, val]);\n    } else {\n      setValue(val);\n    }\n  };\n\n  return (\n    <ChipGroupProvider value={{ isChipSelected, onChange: handleChange, multiple }}>\n      {children}\n    </ChipGroupProvider>\n  );\n}\n\nChipGroup.displayName = '@mantine/core/ChipGroup';\n"],"mappings":";;;;;;;;;;;;;;;AAqBA,MAAMA,YAAA,GAA+C,CAAC;AAE/C,SAASC,UAA6BC,KAA0B;EACrE,MAAM;IAAEC,KAAO;IAAAC,YAAA;IAAcC,QAAU;IAAAC,QAAA;IAAUC;EAAA,CAAa,GAAAC,QAAA,CAC5D,aACAR,YAAA,EACAE,KACF;EAEA,MAAM,CAACO,MAAA,EAAQC,QAAQ,IAAIC,eAA0C;IACnER,KAAA;IACAC,YAAA;IACAQ,UAAA,EAAYN,QAAY,KAAkB;IAC1CD;EAAA,CACD;EAEK,MAAAQ,cAAA,GAAkBC,GAAA,IACtBC,KAAM,CAAAC,OAAA,CAAQP,MAAM,IAAIA,MAAO,CAAAQ,QAAA,CAASH,GAAG,IAAIA,GAAQ,KAAAL,MAAA;EAEnD,MAAAS,YAAA,GAAgBC,KAA+C;IAC7D,MAAAL,GAAA,GAAMK,KAAA,CAAMC,aAAc,CAAAjB,KAAA;IAC5B,IAAAY,KAAA,CAAMC,OAAQ,CAAAP,MAAM,CAAG;MACzBC,QAAA,CAASD,MAAO,CAAAQ,QAAA,CAASH,GAAG,IAAIL,MAAA,CAAOY,MAAO,CAACC,CAAM,IAAAA,CAAA,KAAMR,GAAG,CAAI,IAAC,GAAGL,MAAA,EAAQK,GAAG,CAAC;IAAA,CAC7E;MACLJ,QAAA,CAASI,GAAG;IAAA;EAEhB;EAGE,sBAAAS,GAAA,CAACC,iBAAA;IAAkBrB,KAAO;MAAEU,cAAA;MAAgBR,QAAU,EAAAa,YAAA;MAAcZ;IAAS;IAC1EC;EACH;AAEJ;AAEAN,SAAA,CAAUwB,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}