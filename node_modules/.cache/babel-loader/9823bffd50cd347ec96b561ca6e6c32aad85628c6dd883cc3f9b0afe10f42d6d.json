{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nfunction useClipboard({\n  timeout = 2e3\n} = {}) {\n  const [error, setError] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n  const handleCopyResult = value => {\n    window.clearTimeout(copyTimeout);\n    setCopyTimeout(window.setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n  const copy = valueToCopy => {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch(err => setError(err));\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    window.clearTimeout(copyTimeout);\n  };\n  return {\n    copy,\n    reset,\n    error,\n    copied\n  };\n}\nexport { useClipboard };","map":{"version":3,"names":["useClipboard","timeout","error","setError","useState","copied","setCopied","copyTimeout","setCopyTimeout","handleCopyResult","value","window","clearTimeout","setTimeout","copy","valueToCopy","navigator","clipboard","writeText","then","catch","err","Error","reset"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\hooks\\src\\use-clipboard\\use-clipboard.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useClipboard({ timeout = 2000 } = {}) {\n  const [error, setError] = useState<Error | null>(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState<number | null>(null);\n\n  const handleCopyResult = (value: boolean) => {\n    window.clearTimeout(copyTimeout!);\n    setCopyTimeout(window.setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n\n  const copy = (valueToCopy: any) => {\n    if ('clipboard' in navigator) {\n      navigator.clipboard\n        .writeText(valueToCopy)\n        .then(() => handleCopyResult(true))\n        .catch((err) => setError(err));\n    } else {\n      setError(new Error('useClipboard: navigator.clipboard is not supported'));\n    }\n  };\n\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    window.clearTimeout(copyTimeout!);\n  };\n\n  return { copy, reset, error, copied };\n}\n"],"mappings":";;;AAEO,SAASA,aAAa;EAAEC,OAAA,GAAU;AAAK,IAAI,EAAI;EACpD,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CAAuB,IAAI;EACrD,MAAM,CAACC,MAAA,EAAQC,SAAS,IAAIF,QAAA,CAAS,KAAK;EAC1C,MAAM,CAACG,WAAA,EAAaC,cAAc,IAAIJ,QAAA,CAAwB,IAAI;EAE5D,MAAAK,gBAAA,GAAoBC,KAAmB;IAC3CC,MAAA,CAAOC,YAAA,CAAaL,WAAY;IAChCC,cAAA,CAAeG,MAAA,CAAOE,UAAW,OAAMP,SAAA,CAAU,KAAK,GAAGL,OAAO,CAAC;IACjEK,SAAA,CAAUI,KAAK;EACjB;EAEM,MAAAI,IAAA,GAAQC,WAAqB;IACjC,IAAI,eAAeC,SAAW;MAC5BA,SAAA,CAAUC,SACP,CAAAC,SAAA,CAAUH,WAAW,EACrBI,IAAA,CAAK,MAAMV,gBAAA,CAAiB,IAAI,CAAC,EACjCW,KAAM,CAACC,GAAQ,IAAAlB,QAAA,CAASkB,GAAG,CAAC;IAAA,CAC1B;MACIlB,QAAA,KAAImB,KAAM,qDAAoD,CAAC;IAAA;EAE5E;EAEA,MAAMC,KAAA,GAAQA,CAAA,KAAM;IAClBjB,SAAA,CAAU,KAAK;IACfH,QAAA,CAAS,IAAI;IACbQ,MAAA,CAAOC,YAAA,CAAaL,WAAY;EAClC;EAEA,OAAO;IAAEO,IAAA;IAAMS,KAAO;IAAArB,KAAA;IAAOG;EAAO;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}