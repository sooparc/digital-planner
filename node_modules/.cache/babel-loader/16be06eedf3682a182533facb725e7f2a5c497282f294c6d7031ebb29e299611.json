{"ast":null,"code":"'use client';\n\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade.mjs';\nimport { isLightColor } from '../luminance/luminance.mjs';\nfunction parseThemeColor({\n  color,\n  theme,\n  colorScheme\n}) {\n  if (typeof color !== \"string\") {\n    throw new Error(`[@mantine/core] Failed to parse color. Expected color to be a string, instead got ${typeof color}`);\n  }\n  if (color === \"bright\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-bright\"\n    };\n  }\n  if (color === \"dimmed\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[6], theme.luminanceThreshold),\n      variable: \"--mantine-color-dimmed\"\n    };\n  }\n  if (color === \"white\" || color === \"black\") {\n    return {\n      color,\n      value: color === \"white\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(color === \"white\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: `--mantine-color-${color}`\n    };\n  }\n  const [_color, shade] = color.split(\".\");\n  const colorShade = shade ? Number(shade) : void 0;\n  const isThemeColor = _color in theme.colors;\n  if (isThemeColor) {\n    const colorValue = colorShade !== void 0 ? theme.colors[_color][colorShade] : theme.colors[_color][getPrimaryShade(theme, colorScheme || \"light\")];\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade ? `--mantine-color-${_color}-${colorShade}` : `--mantine-color-${_color}-filled`\n    };\n  }\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: void 0\n  };\n}\nexport { parseThemeColor };","map":{"version":3,"names":["parseThemeColor","color","theme","colorScheme","Error","value","white","black","shade","isThemeColor","isLight","isLightColor","luminanceThreshold","variable","colors","dark","gray","_color","split","colorShade","Number","colorValue","getPrimaryShade"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\MantineProvider\\color-functions\\parse-theme-color\\parse-theme-color.ts"],"sourcesContent":["import type { CssVariable } from '../../../Box';\nimport type { MantineColorScheme, MantineColorShade, MantineTheme } from '../../theme.types';\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade';\nimport { isLightColor } from '../luminance/luminance';\n\ninterface ParseThemeColorOptions {\n  color: unknown;\n  theme: MantineTheme;\n  colorScheme?: MantineColorScheme;\n}\n\ninterface ParseThemeColorResult {\n  color: string;\n  value: string;\n  shade: MantineColorShade | undefined;\n  variable: CssVariable | undefined;\n  isThemeColor: boolean;\n  isLight: boolean;\n}\n\nexport function parseThemeColor({\n  color,\n  theme,\n  colorScheme,\n}: ParseThemeColorOptions): ParseThemeColorResult {\n  if (typeof color !== 'string') {\n    throw new Error(\n      `[@mantine/core] Failed to parse color. Expected color to be a string, instead got ${typeof color}`\n    );\n  }\n\n  if (color === 'bright') {\n    return {\n      color,\n      value: colorScheme === 'dark' ? theme.white : theme.black,\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        colorScheme === 'dark' ? theme.white : theme.black,\n        theme.luminanceThreshold\n      ),\n      variable: '--mantine-color-bright',\n    };\n  }\n\n  if (color === 'dimmed') {\n    return {\n      color,\n      value: colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n        theme.luminanceThreshold\n      ),\n      variable: '--mantine-color-dimmed',\n    };\n  }\n\n  if (color === 'white' || color === 'black') {\n    return {\n      color,\n      value: color === 'white' ? theme.white : theme.black,\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        color === 'white' ? theme.white : theme.black,\n        theme.luminanceThreshold\n      ),\n      variable: `--mantine-color-${color}`,\n    };\n  }\n\n  const [_color, shade] = color.split('.');\n  const colorShade = shade ? (Number(shade) as MantineColorShade) : undefined;\n  const isThemeColor = _color in theme.colors;\n\n  if (isThemeColor) {\n    const colorValue =\n      colorShade !== undefined\n        ? theme.colors[_color][colorShade]\n        : theme.colors[_color][getPrimaryShade(theme, colorScheme || 'light')];\n\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade\n        ? `--mantine-color-${_color}-${colorShade}`\n        : `--mantine-color-${_color}-filled`,\n    };\n  }\n\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: undefined,\n  };\n}\n"],"mappings":";;;;AAoBO,SAASA,eAAgBA,CAAA;EAC9BC,KAAA;EACAC,KAAA;EACAC;AACF,CAAkD;EAC5C,WAAOF,KAAA,KAAU,QAAU;IAC7B,MAAM,IAAIG,KAAA,CACR,qFAAqF,OAAOH,KAAK,EACnG;EAAA;EAGF,IAAIA,KAAA,KAAU,QAAU;IACf;MACLA,KAAA;MACAI,KAAO,EAAAF,WAAA,KAAgB,MAAS,GAAAD,KAAA,CAAMI,KAAA,GAAQJ,KAAM,CAAAK,KAAA;MACpDC,KAAO;MACPC,YAAc;MACdC,OAAS,EAAAC,YAAA,CACPR,WAAgB,cAASD,KAAM,CAAAI,KAAA,GAAQJ,KAAM,CAAAK,KAAA,EAC7CL,KAAM,CAAAU,kBACR;MACAC,QAAU;IACZ;EAAA;EAGF,IAAIZ,KAAA,KAAU,QAAU;IACf;MACLA,KAAA;MACAI,KAAA,EAAOF,WAAgB,cAASD,KAAM,CAAAY,MAAA,CAAOC,IAAK,EAAC,CAAI,GAAAb,KAAA,CAAMY,MAAO,CAAAE,IAAA,CAAK,CAAC;MAC1ER,KAAO;MACPC,YAAc;MACdC,OAAS,EAAAC,YAAA,CACPR,WAAA,KAAgB,MAAS,GAAAD,KAAA,CAAMY,MAAO,CAAAC,IAAA,CAAK,CAAC,CAAI,GAAAb,KAAA,CAAMY,MAAO,CAAAE,IAAA,CAAK,CAAC,GACnEd,KAAM,CAAAU,kBACR;MACAC,QAAU;IACZ;EAAA;EAGE,IAAAZ,KAAA,KAAU,OAAW,IAAAA,KAAA,KAAU,OAAS;IACnC;MACLA,KAAA;MACAI,KAAO,EAAAJ,KAAA,KAAU,OAAU,GAAAC,KAAA,CAAMI,KAAA,GAAQJ,KAAM,CAAAK,KAAA;MAC/CC,KAAO;MACPC,YAAc;MACdC,OAAS,EAAAC,YAAA,CACPV,KAAU,eAAUC,KAAM,CAAAI,KAAA,GAAQJ,KAAM,CAAAK,KAAA,EACxCL,KAAM,CAAAU,kBACR;MACAC,QAAA,EAAU,mBAAmBZ,KAAK;IACpC;EAAA;EAGF,MAAM,CAACgB,MAAQ,EAAAT,KAAK,CAAI,GAAAP,KAAA,CAAMiB,KAAA,CAAM,GAAG;EACvC,MAAMC,UAAa,GAAAX,KAAA,GAASY,MAAO,CAAAZ,KAAK,CAA0B;EAC5D,MAAAC,YAAA,GAAeQ,MAAA,IAAUf,KAAM,CAAAY,MAAA;EAErC,IAAIL,YAAc;IAChB,MAAMY,UAAA,GACJF,UAAe,cACXjB,KAAM,CAAAY,MAAA,CAAOG,MAAM,CAAE,CAAAE,UAAU,CAC/B,GAAAjB,KAAA,CAAMY,MAAA,CAAOG,MAAM,EAAEK,eAAA,CAAgBpB,KAAO,EAAAC,WAAA,IAAe,OAAO,CAAC;IAElE;MACLF,KAAO,EAAAgB,MAAA;MACPZ,KAAO,EAAAgB,UAAA;MACPb,KAAO,EAAAW,UAAA;MACPV,YAAA;MACAC,OAAS,EAAAC,YAAA,CAAaU,UAAY,EAAAnB,KAAA,CAAMU,kBAAkB;MAC1DC,QAAA,EAAUL,KAAA,GACN,mBAAmBS,MAAM,IAAIE,UAAU,KACvC,mBAAmBF,MAAM;IAC/B;EAAA;EAGK;IACLhB,KAAA;IACAI,KAAO,EAAAJ,KAAA;IACPQ,YAAA;IACAC,OAAS,EAAAC,YAAA,CAAaV,KAAO,EAAAC,KAAA,CAAMU,kBAAkB;IACrDJ,KAAO,EAAAW,UAAA;IACPN,QAAU;EACZ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}