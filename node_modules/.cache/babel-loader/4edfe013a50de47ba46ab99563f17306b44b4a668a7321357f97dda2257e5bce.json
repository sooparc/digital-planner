{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\nfunction exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === \"function\") {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === \"function\") {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === \"function\") {\n    return _document.mozCancelFullScreen();\n  }\n  return null;\n}\nfunction enterFullScreen(element) {\n  const _element = element;\n  return _element.requestFullscreen?.() || _element.msRequestFullscreen?.() || _element.webkitEnterFullscreen?.() || _element.webkitRequestFullscreen?.() || _element.mozRequestFullscreen?.();\n}\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\nfunction addEvents(element, {\n  onFullScreen,\n  onError\n}) {\n  prefixes.forEach(prefix => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n  const _ref = useRef(null);\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    return void 0;\n  }, [_ref.current]);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\nexport { useFullscreen };","map":{"version":3,"names":["getFullscreenElement","_document","window","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","webkitExitFullscreen","mozCancelFullScreen","enterFullScreen","element","_element","requestFullscreen","msRequestFullscreen","webkitEnterFullscreen","webkitRequestFullscreen","mozRequestFullscreen","prefixes","addEvents","onFullScreen","onError","forEach","prefix","addEventListener","removeEventListener","useFullscreen","fullscreen","setFullscreen","useState","_ref","useRef","handleFullscreenChange","useCallback","event","target","handleFullscreenError","console","error","toggle","current","ref","documentElement","useEffect"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\hooks\\src\\use-fullscreen\\use-fullscreen.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === 'function') {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === 'function') {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === 'function') {\n    return _document.mozCancelFullScreen();\n  }\n\n  return null;\n}\n\nfunction enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>(null);\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current!);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, [_ref.current]);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}