{"ast":null,"code":"function scaleRem(remValue) {\n  if (remValue === \"0rem\") {\n    return \"0rem\";\n  }\n  return `calc(${remValue} * var(--mantine-scale))`;\n}\nfunction createConverter(units, {\n  shouldScale = false\n} = {}) {\n  function converter(value) {\n    if (value === 0 || value === \"0\") {\n      return `0${units}`;\n    }\n    if (typeof value === \"number\") {\n      const val = `${value / 16}${units}`;\n      return shouldScale ? scaleRem(val) : val;\n    }\n    if (typeof value === \"string\") {\n      if (value === \"\") {\n        return value;\n      }\n      if (value.startsWith(\"calc(\") || value.startsWith(\"clamp(\") || value.includes(\"rgba(\")) {\n        return value;\n      }\n      if (value.includes(\",\")) {\n        return value.split(\",\").map(val => converter(val)).join(\",\");\n      }\n      if (value.includes(\" \")) {\n        return value.split(\" \").map(val => converter(val)).join(\" \");\n      }\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n      const replaced = value.replace(\"px\", \"\");\n      if (!Number.isNaN(Number(replaced))) {\n        const val = `${Number(replaced) / 16}${units}`;\n        return shouldScale ? scaleRem(val) : val;\n      }\n    }\n    return value;\n  }\n  return converter;\n}\nconst rem = createConverter(\"rem\", {\n  shouldScale: true\n});\nconst em = createConverter(\"em\");\nexport { em, rem };","map":{"version":3,"names":["scaleRem","remValue","createConverter","units","shouldScale","converter","value","val","startsWith","includes","split","map","join","replaced","replace","Number","isNaN","rem","em"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\utils\\units-converters\\rem.ts"],"sourcesContent":["function scaleRem(remValue: string) {\n  if (remValue === '0rem') {\n    return '0rem';\n  }\n\n  return `calc(${remValue} * var(--mantine-scale))`;\n}\n\nfunction createConverter(units: string, { shouldScale = false } = {}) {\n  function converter(value: unknown): string {\n    if (value === 0 || value === '0') {\n      return `0${units}`;\n    }\n\n    if (typeof value === 'number') {\n      const val = `${value / 16}${units}`;\n      return shouldScale ? scaleRem(val) : val;\n    }\n\n    if (typeof value === 'string') {\n      // Number(\"\") === 0 so exit early\n      if (value === '') {\n        return value;\n      }\n\n      if (value.startsWith('calc(') || value.startsWith('clamp(') || value.includes('rgba(')) {\n        return value;\n      }\n\n      if (value.includes(',')) {\n        return value\n          .split(',')\n          .map((val) => converter(val))\n          .join(',');\n      }\n\n      if (value.includes(' ')) {\n        return value\n          .split(' ')\n          .map((val) => converter(val))\n          .join(' ');\n      }\n\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n\n      const replaced = value.replace('px', '');\n      if (!Number.isNaN(Number(replaced))) {\n        const val = `${Number(replaced) / 16}${units}`;\n        return shouldScale ? scaleRem(val) : val;\n      }\n    }\n\n    return value as string;\n  }\n\n  return converter;\n}\n\nexport const rem = createConverter('rem', { shouldScale: true });\nexport const em = createConverter('em');\n"],"mappings":"AAAA,SAASA,SAASC,QAAkB;EAClC,IAAIA,QAAA,KAAa,MAAQ;IAChB;EAAA;EAGT,OAAO,QAAQA,QAAQ;AACzB;AAEA,SAASC,gBAAgBC,KAAe;EAAEC,WAAA,GAAc;AAAM,IAAI,EAAI;EACpE,SAASC,UAAUC,KAAwB;IACrC,IAAAA,KAAA,KAAU,CAAK,IAAAA,KAAA,KAAU,GAAK;MAChC,OAAO,IAAIH,KAAK;IAAA;IAGd,WAAOG,KAAA,KAAU,QAAU;MAC7B,MAAMC,GAAM,MAAGD,KAAQ,KAAE,GAAGH,KAAK;MAC1B,OAAAC,WAAA,GAAcJ,QAAS,CAAAO,GAAG,CAAI,GAAAA,GAAA;IAAA;IAGnC,WAAOD,KAAA,KAAU,QAAU;MAE7B,IAAIA,KAAA,KAAU,EAAI;QACT,OAAAA,KAAA;MAAA;MAGL,IAAAA,KAAA,CAAME,UAAW,QAAO,CAAK,IAAAF,KAAA,CAAME,UAAW,SAAQ,CAAK,IAAAF,KAAA,CAAMG,QAAS,QAAO,CAAG;QAC/E,OAAAH,KAAA;MAAA;MAGL,IAAAA,KAAA,CAAMG,QAAS,IAAG,CAAG;QACvB,OAAOH,KACJ,CAAAI,KAAA,CAAM,GAAG,EACTC,GAAI,CAACJ,GAAQ,IAAAF,SAAA,CAAUE,GAAG,CAAC,CAC3B,CAAAK,IAAA,CAAK,GAAG;MAAA;MAGT,IAAAN,KAAA,CAAMG,QAAS,IAAG,CAAG;QACvB,OAAOH,KACJ,CAAAI,KAAA,CAAM,GAAG,EACTC,GAAI,CAACJ,GAAQ,IAAAF,SAAA,CAAUE,GAAG,CAAC,CAC3B,CAAAK,IAAA,CAAK,GAAG;MAAA;MAGT,IAAAN,KAAA,CAAMG,QAAS,CAAAN,KAAK,CAAG;QAClB,OAAAC,WAAA,GAAcJ,QAAS,CAAAM,KAAK,CAAI,GAAAA,KAAA;MAAA;MAGzC,MAAMO,QAAW,GAAAP,KAAA,CAAMQ,OAAQ,OAAM,EAAE;MACvC,IAAI,CAACC,MAAO,CAAAC,KAAA,CAAMD,MAAO,CAAAF,QAAQ,CAAC,CAAG;QACnC,MAAMN,GAAA,GAAM,GAAGQ,MAAA,CAAOF,QAAQ,CAAI,KAAE,GAAGV,KAAK;QACrC,OAAAC,WAAA,GAAcJ,QAAS,CAAAO,GAAG,CAAI,GAAAA,GAAA;MAAA;IACvC;IAGK,OAAAD,KAAA;EAAA;EAGF,OAAAD,SAAA;AACT;AAEO,MAAMY,GAAA,GAAMf,eAAgB,QAAO;EAAEE,WAAA,EAAa;AAAA,CAAM;AAClD,MAAAc,EAAA,GAAKhB,eAAA,CAAgB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}