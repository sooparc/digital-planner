{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useEffect } from 'react';\nimport { getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { polymorphicFactory } from '../../core/factory/polymorphic-factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { AvatarGroup } from './AvatarGroup/AvatarGroup.mjs';\nimport { useAvatarGroupContext } from './AvatarGroup/AvatarGroup.context.mjs';\nimport { AvatarPlaceholderIcon } from './AvatarPlaceholderIcon.mjs';\nimport { getInitialsColor } from './get-initials-color/get-initials-color.mjs';\nimport { getInitials } from './get-initials/get-initials.mjs';\nimport classes from './Avatar.module.css.mjs';\nconst defaultProps = {};\nconst varsResolver = createVarsResolver((theme, {\n  size,\n  radius,\n  variant,\n  gradient,\n  color,\n  autoContrast,\n  name,\n  allowedInitialsColors\n}) => {\n  const _color = color === \"initials\" && typeof name === \"string\" ? getInitialsColor(name, allowedInitialsColors) : color;\n  const colors = theme.variantColorResolver({\n    color: _color || \"gray\",\n    theme,\n    gradient,\n    variant: variant || \"light\",\n    autoContrast\n  });\n  return {\n    root: {\n      \"--avatar-size\": getSize(size, \"avatar-size\"),\n      \"--avatar-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--avatar-bg\": _color || variant ? colors.background : void 0,\n      \"--avatar-color\": _color || variant ? colors.color : void 0,\n      \"--avatar-bd\": _color || variant ? colors.border : void 0\n    }\n  };\n});\nconst Avatar = polymorphicFactory((_props, ref) => {\n  const props = useProps(\"Avatar\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    src,\n    alt,\n    radius,\n    color,\n    gradient,\n    imageProps,\n    children,\n    autoContrast,\n    mod,\n    name,\n    allowedInitialsColors,\n    ...others\n  } = props;\n  const ctx = useAvatarGroupContext();\n  const [error, setError] = useState(!src);\n  const getStyles = useStyles({\n    name: \"Avatar\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  useEffect(() => setError(!src), [src]);\n  return /* @__PURE__ */jsx(Box, {\n    ...getStyles(\"root\"),\n    mod: [{\n      \"within-group\": ctx.withinGroup\n    }, mod],\n    ref,\n    ...others,\n    children: error ? /* @__PURE__ */jsx(\"span\", {\n      ...getStyles(\"placeholder\"),\n      title: alt,\n      children: children || typeof name === \"string\" && getInitials(name) || /* @__PURE__ */jsx(AvatarPlaceholderIcon, {})\n    }) : /* @__PURE__ */jsx(\"img\", {\n      ...imageProps,\n      ...getStyles(\"image\"),\n      src,\n      alt,\n      onError: event => {\n        setError(true);\n        imageProps?.onError?.(event);\n      }\n    })\n  });\n});\nAvatar.classes = classes;\nAvatar.displayName = \"@mantine/core/Avatar\";\nAvatar.Group = AvatarGroup;\nexport { Avatar };","map":{"version":3,"names":["defaultProps","varsResolver","createVarsResolver","theme","size","radius","variant","gradient","color","autoContrast","name","allowedInitialsColors","_color","getInitialsColor","colors","variantColorResolver","root","getSize","getRadius","background","border","Avatar","polymorphicFactory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","src","alt","imageProps","children","mod","others","ctx","useAvatarGroupContext","error","setError","useState","getStyles","useStyles","classes","useEffect","jsx","Box","withinGroup","title","getInitials","AvatarPlaceholderIcon","onError","event","displayName","Group","AvatarGroup"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Avatar\\Avatar.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  getRadius,\n  getSize,\n  MantineColor,\n  MantineGradient,\n  MantineRadius,\n  MantineSize,\n  polymorphicFactory,\n  PolymorphicFactory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { AvatarGroup } from './AvatarGroup/AvatarGroup';\nimport { useAvatarGroupContext } from './AvatarGroup/AvatarGroup.context';\nimport { AvatarPlaceholderIcon } from './AvatarPlaceholderIcon';\nimport { getInitialsColor } from './get-initials-color/get-initials-color';\nimport { getInitials } from './get-initials/get-initials';\nimport classes from './Avatar.module.css';\n\nexport type AvatarStylesNames = 'root' | 'placeholder' | 'image';\nexport type AvatarVariant =\n  | 'filled'\n  | 'light'\n  | 'gradient'\n  | 'outline'\n  | 'transparent'\n  | 'default'\n  | 'white';\n\nexport type AvatarCssVariables = {\n  root: '--avatar-size' | '--avatar-radius' | '--avatar-bg' | '--avatar-color' | '--avatar-bd';\n};\n\nexport interface AvatarProps extends BoxProps, StylesApiProps<AvatarFactory> {\n  /** Width and height of the avatar, numbers are converted to rem, `'md'` by default */\n  size?: MantineSize | (string & {}) | number;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius, `'100%'` by default */\n  radius?: MantineRadius;\n\n  /** Key of `theme.colors` or any valid CSS color, default value is `'gray'`  */\n  color?: MantineColor | 'initials';\n\n  /** Gradient configuration used when `variant=\"gradient\"`, default value is `theme.defaultGradient` */\n  gradient?: MantineGradient;\n\n  /** Image url, if the image cannot be loaded or `src={null}`, then placeholder is displayed instead */\n  src?: string | null;\n\n  /** Image `alt` attribute, also used as `title` attribute for placeholder */\n  alt?: string;\n\n  /** `img` tag attributes */\n  imageProps?: React.ComponentPropsWithoutRef<'img'>;\n\n  /** Avatar placeholder, displayed when `src={null}` or when the image cannot be loaded */\n  children?: React.ReactNode;\n\n  /** Determines whether text color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n\n  /** Name of the user. When `src` is not set, used to display initials and to generate color when `color=\"initials\"` is set. */\n  name?: string;\n\n  /** An array of colors that can be used for autogenerated initials. By default, all default Mantine colors can be used except gray and dark. */\n  allowedInitialsColors?: MantineColor[];\n}\n\nexport type AvatarFactory = PolymorphicFactory<{\n  props: AvatarProps;\n  defaultRef: HTMLDivElement;\n  defaultComponent: 'div';\n  stylesNames: AvatarStylesNames;\n  vars: AvatarCssVariables;\n  variant: AvatarVariant;\n  staticComponents: {\n    Group: typeof AvatarGroup;\n  };\n}>;\n\nconst defaultProps: Partial<AvatarProps> = {};\n\nconst varsResolver = createVarsResolver<AvatarFactory>(\n  (\n    theme,\n    { size, radius, variant, gradient, color, autoContrast, name, allowedInitialsColors }\n  ) => {\n    const _color =\n      color === 'initials' && typeof name === 'string'\n        ? getInitialsColor(name, allowedInitialsColors)\n        : color;\n\n    const colors = theme.variantColorResolver({\n      color: _color || 'gray',\n      theme,\n      gradient,\n      variant: variant || 'light',\n      autoContrast,\n    });\n\n    return {\n      root: {\n        '--avatar-size': getSize(size, 'avatar-size'),\n        '--avatar-radius': radius === undefined ? undefined : getRadius(radius),\n        '--avatar-bg': _color || variant ? colors.background : undefined,\n        '--avatar-color': _color || variant ? colors.color : undefined,\n        '--avatar-bd': _color || variant ? colors.border : undefined,\n      },\n    };\n  }\n);\n\nexport const Avatar = polymorphicFactory<AvatarFactory>((_props, ref) => {\n  const props = useProps('Avatar', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    src,\n    alt,\n    radius,\n    color,\n    gradient,\n    imageProps,\n    children,\n    autoContrast,\n    mod,\n    name,\n    allowedInitialsColors,\n    ...others\n  } = props;\n  const ctx = useAvatarGroupContext();\n  const [error, setError] = useState(!src);\n\n  const getStyles = useStyles<AvatarFactory>({\n    name: 'Avatar',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  useEffect(() => setError(!src), [src]);\n\n  return (\n    <Box\n      {...getStyles('root')}\n      mod={[{ 'within-group': ctx.withinGroup }, mod]}\n      ref={ref}\n      {...others}\n    >\n      {error ? (\n        <span {...getStyles('placeholder')} title={alt}>\n          {children || (typeof name === 'string' && getInitials(name)) || <AvatarPlaceholderIcon />}\n        </span>\n      ) : (\n        <img\n          {...imageProps}\n          {...getStyles('image')}\n          src={src!}\n          alt={alt}\n          onError={(event) => {\n            setError(true);\n            imageProps?.onError?.(event);\n          }}\n        />\n      )}\n    </Box>\n  );\n});\n\nAvatar.classes = classes;\nAvatar.displayName = '@mantine/core/Avatar';\nAvatar.Group = AvatarGroup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}