{"ast":null,"code":"'use client';\n\nimport { keys } from '../../../../core/utils/keys/keys.mjs';\nimport { rem } from '../../../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport 'react/jsx-runtime';\nimport { getBreakpointValue } from '../../../../core/utils/get-breakpoint-value/get-breakpoint-value.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../../core/MantineProvider/default-theme.mjs';\nimport '../../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../../core/Box/Box.mjs';\nimport '../../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getBaseSize } from '../get-base-size/get-base-size.mjs';\nimport { isPrimitiveSize } from '../is-primitive-size/is-primitive-size.mjs';\nimport { isResponsiveSize } from '../is-responsive-size/is-responsive-size.mjs';\nfunction assignNavbarVariables({\n  baseStyles,\n  minMediaStyles,\n  maxMediaStyles,\n  navbar,\n  theme\n}) {\n  const navbarWidth = navbar?.width;\n  const collapsedNavbarTransform = \"translateX(calc(var(--app-shell-navbar-width) * -1))\";\n  const collapsedNavbarTransformRtl = \"translateX(var(--app-shell-navbar-width))\";\n  if (navbar?.breakpoint && !navbar?.collapsed?.mobile) {\n    maxMediaStyles[navbar?.breakpoint] = maxMediaStyles[navbar?.breakpoint] || {};\n    maxMediaStyles[navbar?.breakpoint][\"--app-shell-navbar-width\"] = \"100%\";\n    maxMediaStyles[navbar?.breakpoint][\"--app-shell-navbar-offset\"] = \"0px\";\n  }\n  if (isPrimitiveSize(navbarWidth)) {\n    const baseSize = rem(getBaseSize(navbarWidth));\n    baseStyles[\"--app-shell-navbar-width\"] = baseSize;\n    baseStyles[\"--app-shell-navbar-offset\"] = baseSize;\n  }\n  if (isResponsiveSize(navbarWidth)) {\n    if (typeof navbarWidth.base !== \"undefined\") {\n      baseStyles[\"--app-shell-navbar-width\"] = rem(navbarWidth.base);\n      baseStyles[\"--app-shell-navbar-offset\"] = rem(navbarWidth.base);\n    }\n    keys(navbarWidth).forEach(key => {\n      if (key !== \"base\") {\n        minMediaStyles[key] = minMediaStyles[key] || {};\n        minMediaStyles[key][\"--app-shell-navbar-width\"] = rem(navbarWidth[key]);\n        minMediaStyles[key][\"--app-shell-navbar-offset\"] = rem(navbarWidth[key]);\n      }\n    });\n  }\n  if (navbar?.collapsed?.desktop) {\n    const breakpointValue = navbar.breakpoint;\n    minMediaStyles[breakpointValue] = minMediaStyles[breakpointValue] || {};\n    minMediaStyles[breakpointValue][\"--app-shell-navbar-transform\"] = collapsedNavbarTransform;\n    minMediaStyles[breakpointValue][\"--app-shell-navbar-transform-rtl\"] = collapsedNavbarTransformRtl;\n    minMediaStyles[breakpointValue][\"--app-shell-navbar-offset\"] = \"0px !important\";\n  }\n  if (navbar?.collapsed?.mobile) {\n    const breakpointValue = getBreakpointValue(navbar.breakpoint, theme.breakpoints) - 0.1;\n    maxMediaStyles[breakpointValue] = maxMediaStyles[breakpointValue] || {};\n    maxMediaStyles[breakpointValue][\"--app-shell-navbar-width\"] = \"100%\";\n    maxMediaStyles[breakpointValue][\"--app-shell-navbar-offset\"] = \"0px\";\n    maxMediaStyles[breakpointValue][\"--app-shell-navbar-transform\"] = collapsedNavbarTransform;\n    maxMediaStyles[breakpointValue][\"--app-shell-navbar-transform-rtl\"] = collapsedNavbarTransformRtl;\n  }\n}\nexport { assignNavbarVariables };","map":{"version":3,"names":["assignNavbarVariables","baseStyles","minMediaStyles","maxMediaStyles","navbar","theme","navbarWidth","width","collapsedNavbarTransform","collapsedNavbarTransformRtl","breakpoint","collapsed","mobile","isPrimitiveSize","baseSize","rem","getBaseSize","isResponsiveSize","base","keys","forEach","key","desktop","breakpointValue","getBreakpointValue","breakpoints"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\AppShell\\AppShellMediaStyles\\assign-navbar-variables\\assign-navbar-variables.ts"],"sourcesContent":["import { getBreakpointValue, keys, MantineTheme, rem } from '../../../../core';\nimport type { AppShellProps } from '../../AppShell';\nimport { getBaseSize } from '../get-base-size/get-base-size';\nimport type { CSSVariables, MediaQueryVariables } from '../get-variables/get-variables';\nimport { isPrimitiveSize } from '../is-primitive-size/is-primitive-size';\nimport { isResponsiveSize } from '../is-responsive-size/is-responsive-size';\n\ninterface AssignNavbarVariablesInput {\n  baseStyles: CSSVariables;\n  minMediaStyles: MediaQueryVariables;\n  maxMediaStyles: MediaQueryVariables;\n  navbar: AppShellProps['navbar'] | undefined;\n  theme: MantineTheme;\n}\n\nexport function assignNavbarVariables({\n  baseStyles,\n  minMediaStyles,\n  maxMediaStyles,\n  navbar,\n  theme,\n}: AssignNavbarVariablesInput) {\n  const navbarWidth = navbar?.width;\n  const collapsedNavbarTransform = 'translateX(calc(var(--app-shell-navbar-width) * -1))';\n  const collapsedNavbarTransformRtl = 'translateX(var(--app-shell-navbar-width))';\n\n  if (navbar?.breakpoint && !navbar?.collapsed?.mobile) {\n    maxMediaStyles[navbar?.breakpoint] = maxMediaStyles[navbar?.breakpoint] || {};\n    maxMediaStyles[navbar?.breakpoint]['--app-shell-navbar-width'] = '100%';\n    maxMediaStyles[navbar?.breakpoint]['--app-shell-navbar-offset'] = '0px';\n  }\n\n  if (isPrimitiveSize(navbarWidth)) {\n    const baseSize = rem(getBaseSize(navbarWidth));\n    baseStyles['--app-shell-navbar-width'] = baseSize;\n    baseStyles['--app-shell-navbar-offset'] = baseSize;\n  }\n\n  if (isResponsiveSize(navbarWidth)) {\n    if (typeof navbarWidth.base !== 'undefined') {\n      baseStyles['--app-shell-navbar-width'] = rem(navbarWidth.base);\n      baseStyles['--app-shell-navbar-offset'] = rem(navbarWidth.base);\n    }\n\n    keys(navbarWidth).forEach((key) => {\n      if (key !== 'base') {\n        minMediaStyles[key] = minMediaStyles[key] || {};\n        minMediaStyles[key]['--app-shell-navbar-width'] = rem(navbarWidth![key]);\n        minMediaStyles[key]['--app-shell-navbar-offset'] = rem(navbarWidth![key]);\n      }\n    });\n  }\n\n  if (navbar?.collapsed?.desktop) {\n    const breakpointValue = navbar!.breakpoint;\n    minMediaStyles[breakpointValue] = minMediaStyles[breakpointValue] || {};\n    minMediaStyles[breakpointValue]['--app-shell-navbar-transform'] = collapsedNavbarTransform;\n    minMediaStyles[breakpointValue]['--app-shell-navbar-transform-rtl'] =\n      collapsedNavbarTransformRtl;\n    minMediaStyles[breakpointValue]['--app-shell-navbar-offset'] = '0px !important';\n  }\n\n  if (navbar?.collapsed?.mobile) {\n    const breakpointValue = getBreakpointValue(navbar!.breakpoint, theme.breakpoints) - 0.1;\n    maxMediaStyles[breakpointValue] = maxMediaStyles[breakpointValue] || {};\n    maxMediaStyles[breakpointValue]['--app-shell-navbar-width'] = '100%';\n    maxMediaStyles[breakpointValue]['--app-shell-navbar-offset'] = '0px';\n    maxMediaStyles[breakpointValue]['--app-shell-navbar-transform'] = collapsedNavbarTransform;\n    maxMediaStyles[breakpointValue]['--app-shell-navbar-transform-rtl'] =\n      collapsedNavbarTransformRtl;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAeO,SAASA,qBAAsBA,CAAA;EACpCC,UAAA;EACAC,cAAA;EACAC,cAAA;EACAC,MAAA;EACAC;AACF,CAA+B;EAC7B,MAAMC,WAAA,GAAcF,MAAQ,EAAAG,KAAA;EAC5B,MAAMC,wBAA2B;EACjC,MAAMC,2BAA8B;EAEpC,IAAIL,MAAQ,EAAAM,UAAA,IAAc,CAACN,MAAA,EAAQO,SAAA,EAAWC,MAAQ;IACpDT,cAAA,CAAeC,MAAA,EAAQM,UAAU,IAAIP,cAAA,CAAeC,MAAQ,EAAAM,UAAU,KAAK,CAAC;IAC5EP,cAAA,CAAeC,MAAQ,EAAAM,UAAU,CAAE,2BAA0B,CAAI;IACjEP,cAAA,CAAeC,MAAQ,EAAAM,UAAU,CAAE,4BAA2B,CAAI;EAAA;EAGhE,IAAAG,eAAA,CAAgBP,WAAW,CAAG;IAChC,MAAMQ,QAAW,GAAAC,GAAA,CAAIC,WAAY,CAAAV,WAAW,CAAC;IAC7CL,UAAA,CAAW,0BAA0B,CAAI,GAAAa,QAAA;IACzCb,UAAA,CAAW,2BAA2B,CAAI,GAAAa,QAAA;EAAA;EAGxC,IAAAG,gBAAA,CAAiBX,WAAW,CAAG;IAC7B,WAAOA,WAAY,CAAAY,IAAA,KAAS,WAAa;MAC3CjB,UAAA,CAAW,0BAA0B,IAAIc,GAAI,CAAAT,WAAA,CAAYY,IAAI;MAC7DjB,UAAA,CAAW,2BAA2B,IAAIc,GAAI,CAAAT,WAAA,CAAYY,IAAI;IAAA;IAGhEC,IAAA,CAAKb,WAAW,EAAEc,OAAQ,CAACC,GAAQ;MACjC,IAAIA,GAAA,KAAQ,MAAQ;QAClBnB,cAAA,CAAemB,GAAG,IAAInB,cAAe,CAAAmB,GAAG,KAAK,CAAC;QAC9CnB,cAAA,CAAemB,GAAG,CAAE,2BAA0B,IAAIN,GAAI,CAAAT,WAAA,CAAae,GAAG,CAAC;QACvEnB,cAAA,CAAemB,GAAG,CAAE,4BAA2B,IAAIN,GAAI,CAAAT,WAAA,CAAae,GAAG,CAAC;MAAA;IAC1E,CACD;EAAA;EAGC,IAAAjB,MAAA,EAAQO,SAAA,EAAWW,OAAS;IAC9B,MAAMC,eAAA,GAAkBnB,MAAQ,CAAAM,UAAA;IAChCR,cAAA,CAAeqB,eAAe,IAAIrB,cAAe,CAAAqB,eAAe,KAAK,CAAC;IACvDrB,cAAA,CAAAqB,eAAe,CAAE,+BAA8B,CAAI,GAAAf,wBAAA;IACnDN,cAAA,CAAAqB,eAAe,CAAE,mCAAkC,CAChE,GAAAd,2BAAA;IACaP,cAAA,CAAAqB,eAAe,CAAE,4BAA2B,CAAI;EAAA;EAG7D,IAAAnB,MAAA,EAAQO,SAAA,EAAWC,MAAQ;IAC7B,MAAMW,eAAA,GAAkBC,kBAAmB,CAAApB,MAAA,CAAQM,UAAY,EAAAL,KAAA,CAAMoB,WAAW,CAAI;IACpFtB,cAAA,CAAeoB,eAAe,IAAIpB,cAAe,CAAAoB,eAAe,KAAK,CAAC;IACvDpB,cAAA,CAAAoB,eAAe,CAAE,2BAA0B,CAAI;IAC/CpB,cAAA,CAAAoB,eAAe,CAAE,4BAA2B,CAAI;IAChDpB,cAAA,CAAAoB,eAAe,CAAE,+BAA8B,CAAI,GAAAf,wBAAA;IACnDL,cAAA,CAAAoB,eAAe,CAAE,mCAAkC,CAChE,GAAAd,2BAAA;EAAA;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}