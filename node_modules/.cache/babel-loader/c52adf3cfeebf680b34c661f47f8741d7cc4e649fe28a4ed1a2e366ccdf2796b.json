{"ast":null,"code":"'use client';\n\nimport { rem } from '../../../utils/units-converters/rem.mjs';\nimport 'react';\nimport 'react/jsx-runtime';\nimport '@mantine/hooks';\nimport { darken } from '../darken/darken.mjs';\nimport { getGradient } from '../get-gradient/get-gradient.mjs';\nimport { parseThemeColor } from '../parse-theme-color/parse-theme-color.mjs';\nimport { rgba } from '../rgba/rgba.mjs';\nconst defaultVariantColorsResolver = ({\n  color,\n  theme,\n  variant,\n  gradient,\n  autoContrast\n}) => {\n  const parsed = parseThemeColor({\n    color,\n    theme\n  });\n  const _autoContrast = typeof autoContrast === \"boolean\" ? autoContrast : theme.autoContrast;\n  if (variant === \"filled\") {\n    const textColor = _autoContrast ? parsed.isLight ? \"var(--mantine-color-black)\" : \"var(--mantine-color-white)\" : \"var(--mantine-color-white)\";\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: `var(--mantine-color-${color}-filled)`,\n          hover: `var(--mantine-color-${color}-filled-hover)`,\n          color: textColor,\n          border: `${rem(1)} solid transparent`\n        };\n      }\n      return {\n        background: `var(--mantine-color-${parsed.color}-${parsed.shade})`,\n        hover: `var(--mantine-color-${parsed.color}-${parsed.shade === 9 ? 8 : parsed.shade + 1})`,\n        color: textColor,\n        border: `${rem(1)} solid transparent`\n      };\n    }\n    return {\n      background: color,\n      hover: darken(color, 0.1),\n      color: textColor,\n      border: `${rem(1)} solid transparent`\n    };\n  }\n  if (variant === \"light\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: `var(--mantine-color-${color}-light)`,\n          hover: `var(--mantine-color-${color}-light-hover)`,\n          color: `var(--mantine-color-${color}-light-color)`,\n          border: `${rem(1)} solid transparent`\n        };\n      }\n      const parsedColor = theme.colors[parsed.color][parsed.shade];\n      return {\n        background: rgba(parsedColor, 0.1),\n        hover: rgba(parsedColor, 0.12),\n        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,\n        border: `${rem(1)} solid transparent`\n      };\n    }\n    return {\n      background: rgba(color, 0.1),\n      hover: rgba(color, 0.12),\n      color,\n      border: `${rem(1)} solid transparent`\n    };\n  }\n  if (variant === \"outline\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"transparent\",\n          hover: `var(--mantine-color-${color}-outline-hover)`,\n          color: `var(--mantine-color-${color}-outline)`,\n          border: `${rem(1)} solid var(--mantine-color-${color}-outline)`\n        };\n      }\n      return {\n        background: \"transparent\",\n        hover: rgba(theme.colors[parsed.color][parsed.shade], 0.05),\n        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,\n        border: `${rem(1)} solid var(--mantine-color-${parsed.color}-${parsed.shade})`\n      };\n    }\n    return {\n      background: \"transparent\",\n      hover: rgba(color, 0.05),\n      color,\n      border: `${rem(1)} solid ${color}`\n    };\n  }\n  if (variant === \"subtle\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"transparent\",\n          hover: `var(--mantine-color-${color}-light-hover)`,\n          color: `var(--mantine-color-${color}-light-color)`,\n          border: `${rem(1)} solid transparent`\n        };\n      }\n      const parsedColor = theme.colors[parsed.color][parsed.shade];\n      return {\n        background: \"transparent\",\n        hover: rgba(parsedColor, 0.12),\n        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,\n        border: `${rem(1)} solid transparent`\n      };\n    }\n    return {\n      background: \"transparent\",\n      hover: rgba(color, 0.12),\n      color,\n      border: `${rem(1)} solid transparent`\n    };\n  }\n  if (variant === \"transparent\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"transparent\",\n          hover: \"transparent\",\n          color: `var(--mantine-color-${color}-light-color)`,\n          border: `${rem(1)} solid transparent`\n        };\n      }\n      return {\n        background: \"transparent\",\n        hover: \"transparent\",\n        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,\n        border: `${rem(1)} solid transparent`\n      };\n    }\n    return {\n      background: \"transparent\",\n      hover: \"transparent\",\n      color,\n      border: `${rem(1)} solid transparent`\n    };\n  }\n  if (variant === \"white\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"var(--mantine-color-white)\",\n          hover: darken(theme.white, 0.01),\n          color: `var(--mantine-color-${color}-filled)`,\n          border: `${rem(1)} solid transparent`\n        };\n      }\n      return {\n        background: \"var(--mantine-color-white)\",\n        hover: darken(theme.white, 0.01),\n        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,\n        border: `${rem(1)} solid transparent`\n      };\n    }\n    return {\n      background: \"var(--mantine-color-white)\",\n      hover: darken(theme.white, 0.01),\n      color,\n      border: `${rem(1)} solid transparent`\n    };\n  }\n  if (variant === \"gradient\") {\n    return {\n      background: getGradient(gradient, theme),\n      hover: getGradient(gradient, theme),\n      color: \"var(--mantine-color-white)\",\n      border: \"none\"\n    };\n  }\n  if (variant === \"default\") {\n    return {\n      background: \"var(--mantine-color-default)\",\n      hover: \"var(--mantine-color-default-hover)\",\n      color: \"var(--mantine-color-default-color)\",\n      border: `${rem(1)} solid var(--mantine-color-default-border)`\n    };\n  }\n  return {};\n};\nexport { defaultVariantColorsResolver };","map":{"version":3,"names":["defaultVariantColorsResolver","color","theme","variant","gradient","autoContrast","parsed","parseThemeColor","_autoContrast","textColor","isLight","isThemeColor","shade","background","hover","border","rem","darken","parsedColor","colors","rgba","Math","min","white","getGradient"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\MantineProvider\\color-functions\\default-variant-colors-resolver\\default-variant-colors-resolver.ts"],"sourcesContent":["import { rem } from '../../../utils';\nimport { MantineColor, MantineGradient, MantineTheme } from '../../theme.types';\nimport { darken } from '../darken/darken';\nimport { getGradient } from '../get-gradient/get-gradient';\nimport { parseThemeColor } from '../parse-theme-color/parse-theme-color';\nimport { rgba } from '../rgba/rgba';\n\nexport interface VariantColorsResolverInput {\n  color: MantineColor | undefined;\n  theme: MantineTheme;\n  variant: string;\n  gradient?: MantineGradient;\n  autoContrast?: boolean;\n}\n\nexport interface VariantColorResolverResult {\n  background: string;\n  hover: string;\n  color: string;\n  border: string;\n  hoverColor?: string;\n}\n\nexport type VariantColorsResolver = (\n  input: VariantColorsResolverInput\n) => VariantColorResolverResult;\n\nexport const defaultVariantColorsResolver: VariantColorsResolver = ({\n  color,\n  theme,\n  variant,\n  gradient,\n  autoContrast,\n}) => {\n  const parsed = parseThemeColor({ color, theme });\n\n  const _autoContrast = typeof autoContrast === 'boolean' ? autoContrast : theme.autoContrast;\n\n  if (variant === 'filled') {\n    const textColor = _autoContrast\n      ? parsed.isLight\n        ? 'var(--mantine-color-black)'\n        : 'var(--mantine-color-white)'\n      : 'var(--mantine-color-white)';\n    if (parsed.isThemeColor) {\n      if (parsed.shade === undefined) {\n        return {\n          background: `var(--mantine-color-${color}-filled)`,\n          hover: `var(--mantine-color-${color}-filled-hover)`,\n          color: textColor,\n          border: `${rem(1)} solid transparent`,\n        };\n      }\n\n      return {\n        background: `var(--mantine-color-${parsed.color}-${parsed.shade})`,\n        hover: `var(--mantine-color-${parsed.color}-${parsed.shade === 9 ? 8 : parsed.shade + 1})`,\n        color: textColor,\n        border: `${rem(1)} solid transparent`,\n      };\n    }\n\n    return {\n      background: color!,\n      hover: darken(color!, 0.1),\n      color: textColor,\n      border: `${rem(1)} solid transparent`,\n    };\n  }\n\n  if (variant === 'light') {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === undefined) {\n        return {\n          background: `var(--mantine-color-${color}-light)`,\n          hover: `var(--mantine-color-${color}-light-hover)`,\n          color: `var(--mantine-color-${color}-light-color)`,\n          border: `${rem(1)} solid transparent`,\n        };\n      }\n\n      const parsedColor = theme.colors[parsed.color][parsed.shade];\n\n      return {\n        background: rgba(parsedColor, 0.1),\n        hover: rgba(parsedColor, 0.12),\n        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,\n        border: `${rem(1)} solid transparent`,\n      };\n    }\n\n    return {\n      background: rgba(color!, 0.1),\n      hover: rgba(color!, 0.12),\n      color: color!,\n      border: `${rem(1)} solid transparent`,\n    };\n  }\n\n  if (variant === 'outline') {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === undefined) {\n        return {\n          background: 'transparent',\n          hover: `var(--mantine-color-${color}-outline-hover)`,\n          color: `var(--mantine-color-${color}-outline)`,\n          border: `${rem(1)} solid var(--mantine-color-${color}-outline)`,\n        };\n      }\n\n      return {\n        background: 'transparent',\n        hover: rgba(theme.colors[parsed.color][parsed.shade], 0.05),\n        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,\n        border: `${rem(1)} solid var(--mantine-color-${parsed.color}-${parsed.shade})`,\n      };\n    }\n\n    return {\n      background: 'transparent',\n      hover: rgba(color!, 0.05),\n      color: color!,\n      border: `${rem(1)} solid ${color}`,\n    };\n  }\n\n  if (variant === 'subtle') {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === undefined) {\n        return {\n          background: 'transparent',\n          hover: `var(--mantine-color-${color}-light-hover)`,\n          color: `var(--mantine-color-${color}-light-color)`,\n          border: `${rem(1)} solid transparent`,\n        };\n      }\n\n      const parsedColor = theme.colors[parsed.color][parsed.shade];\n\n      return {\n        background: 'transparent',\n        hover: rgba(parsedColor, 0.12),\n        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,\n        border: `${rem(1)} solid transparent`,\n      };\n    }\n\n    return {\n      background: 'transparent',\n      hover: rgba(color!, 0.12),\n      color: color!,\n      border: `${rem(1)} solid transparent`,\n    };\n  }\n\n  if (variant === 'transparent') {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === undefined) {\n        return {\n          background: 'transparent',\n          hover: 'transparent',\n          color: `var(--mantine-color-${color}-light-color)`,\n          border: `${rem(1)} solid transparent`,\n        };\n      }\n\n      return {\n        background: 'transparent',\n        hover: 'transparent',\n        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,\n        border: `${rem(1)} solid transparent`,\n      };\n    }\n\n    return {\n      background: 'transparent',\n      hover: 'transparent',\n      color: color!,\n      border: `${rem(1)} solid transparent`,\n    };\n  }\n\n  if (variant === 'white') {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === undefined) {\n        return {\n          background: 'var(--mantine-color-white)',\n          hover: darken(theme.white, 0.01),\n          color: `var(--mantine-color-${color}-filled)`,\n          border: `${rem(1)} solid transparent`,\n        };\n      }\n\n      return {\n        background: 'var(--mantine-color-white)',\n        hover: darken(theme.white, 0.01),\n        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,\n        border: `${rem(1)} solid transparent`,\n      };\n    }\n\n    return {\n      background: 'var(--mantine-color-white)',\n      hover: darken(theme.white, 0.01),\n      color: color!,\n      border: `${rem(1)} solid transparent`,\n    };\n  }\n\n  if (variant === 'gradient') {\n    return {\n      background: getGradient(gradient, theme),\n      hover: getGradient(gradient, theme),\n      color: 'var(--mantine-color-white)',\n      border: 'none',\n    };\n  }\n\n  if (variant === 'default') {\n    return {\n      background: 'var(--mantine-color-default)',\n      hover: 'var(--mantine-color-default-hover)',\n      color: 'var(--mantine-color-default-color)',\n      border: `${rem(1)} solid var(--mantine-color-default-border)`,\n    };\n  }\n\n  return {} as VariantColorResolverResult;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}