{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { NumericFormat } from 'react-number-format';\nimport 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nconst defaultProps = {};\nfunction NumberFormatter(_props) {\n  const props = useProps(\"NumberFormatter\", defaultProps, _props);\n  const {\n    value,\n    defaultValue,\n    ...others\n  } = props;\n  if (value === void 0) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(NumericFormat, {\n    displayType: \"text\",\n    value,\n    ...others\n  });\n}\nconst extendNumberFormatter = c => c;\nNumberFormatter.extend = extendNumberFormatter;\nNumberFormatter.displayName = \"@mantine/core/NumberFormatter\";\nexport { NumberFormatter };","map":{"version":3,"names":["defaultProps","NumberFormatter","_props","props","useProps","value","defaultValue","others","jsx","NumericFormat","displayType","extendNumberFormatter","c","extend","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\NumberFormatter\\NumberFormatter.tsx"],"sourcesContent":["import { NumericFormat } from 'react-number-format';\nimport { ExtendComponent, Factory, MantineThemeComponent, useProps } from '../../core';\n\nexport interface NumberFormatterProps extends React.ComponentPropsWithoutRef<'span'> {\n  /** Value to format */\n  value?: number | string;\n\n  /** Determines whether negative values are allowed, `true` by default */\n  allowNegative?: boolean;\n\n  /** Limits the number of digits that are displayed after the decimal point, by default there is no limit */\n  decimalScale?: number;\n\n  /** Character used as a decimal separator, `'.'` by default */\n  decimalSeparator?: string;\n\n  /** If set, 0s are added after `decimalSeparator` to match given `decimalScale`. `false` by default */\n  fixedDecimalScale?: boolean;\n\n  /** Prefix added before the value */\n  prefix?: string;\n\n  /** Suffix added after the value */\n  suffix?: string;\n\n  /** Defines the thousand grouping style */\n  thousandsGroupStyle?: 'thousand' | 'lakh' | 'wan' | 'none';\n\n  /** A character used to separate thousands, `','` by default */\n  thousandSeparator?: string | boolean;\n}\n\nexport type NumberFormatterFactory = Factory<{\n  props: NumberFormatterProps;\n  ref: HTMLDivElement;\n}>;\n\nconst defaultProps: Partial<NumberFormatterProps> = {};\n\nexport function NumberFormatter(_props: NumberFormatterProps) {\n  const props = useProps('NumberFormatter', defaultProps, _props);\n  const { value, defaultValue, ...others } = props;\n\n  if (value === undefined) {\n    return null;\n  }\n\n  return <NumericFormat displayType=\"text\" value={value} {...others} />;\n}\n\nconst extendNumberFormatter = (c: ExtendComponent<NumberFormatterFactory>): MantineThemeComponent =>\n  c;\n\nNumberFormatter.extend = extendNumberFormatter;\nNumberFormatter.displayName = '@mantine/core/NumberFormatter';\n"],"mappings":";;;;;;;;;;;;;;;AAqCA,MAAMA,YAAA,GAA8C,CAAC;AAE9C,SAASC,gBAAgBC,MAA8B;EAC5D,MAAMC,KAAQ,GAAAC,QAAA,CAAS,iBAAmB,EAAAJ,YAAA,EAAcE,MAAM;EAC9D,MAAM;IAAEG,KAAA;IAAOC,YAAc;IAAA,GAAGC;EAAW,IAAAJ,KAAA;EAE3C,IAAIE,KAAA,KAAU,KAAW;IAChB;EAAA;EAGT,sBAAAG,GAAA,CAAQC,aAAc;IAAAC,WAAA,EAAY,MAAO;IAAAL,KAAA;IAAe,GAAGE;EAAQ;AACrE;AAEA,MAAMI,qBAAA,GAAyBC,CAC7B,IAAAA,CAAA;AAEFX,eAAA,CAAgBY,MAAS,GAAAF,qBAAA;AACzBV,eAAA,CAAgBa,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}