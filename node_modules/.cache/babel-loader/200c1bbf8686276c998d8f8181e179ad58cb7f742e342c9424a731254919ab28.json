{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion.mjs';\nimport { useWindowEvent } from '../use-window-event/use-window-event.mjs';\nimport { easeInOutQuad } from './utils/ease-in-out-quad.mjs';\nimport { getRelativePosition } from './utils/get-relative-position.mjs';\nimport { getScrollStart } from './utils/get-scroll-start.mjs';\nimport { setScrollParam } from './utils/set-scroll-param.mjs';\nfunction useScrollIntoView({\n  duration = 1250,\n  axis = \"y\",\n  onScrollFinish,\n  easing = easeInOutQuad,\n  offset = 0,\n  cancelable = true,\n  isList = false\n} = {}) {\n  const frameID = useRef(0);\n  const startTime = useRef(0);\n  const shouldStop = useRef(false);\n  const scrollableRef = useRef(null);\n  const targetRef = useRef(null);\n  const reducedMotion = useReducedMotion();\n  const cancel = () => {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n  const scrollIntoView = useCallback(({\n    alignment = \"start\"\n  } = {}) => {\n    shouldStop.current = false;\n    if (frameID.current) {\n      cancel();\n    }\n    const start = getScrollStart({\n      parent: scrollableRef.current,\n      axis\n    }) ?? 0;\n    const change = getRelativePosition({\n      parent: scrollableRef.current,\n      target: targetRef.current,\n      axis,\n      alignment,\n      offset,\n      isList\n    }) - (scrollableRef.current ? 0 : start);\n    function animateScroll() {\n      if (startTime.current === 0) {\n        startTime.current = performance.now();\n      }\n      const now = performance.now();\n      const elapsed = now - startTime.current;\n      const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n      const distance = start + change * easing(t);\n      setScrollParam({\n        parent: scrollableRef.current,\n        axis,\n        distance\n      });\n      if (!shouldStop.current && t < 1) {\n        frameID.current = requestAnimationFrame(animateScroll);\n      } else {\n        typeof onScrollFinish === \"function\" && onScrollFinish();\n        startTime.current = 0;\n        frameID.current = 0;\n        cancel();\n      }\n    }\n    animateScroll();\n  }, [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]);\n  const handleStop = () => {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n  useWindowEvent(\"wheel\", handleStop, {\n    passive: true\n  });\n  useWindowEvent(\"touchmove\", handleStop, {\n    passive: true\n  });\n  useEffect(() => cancel, []);\n  return {\n    scrollableRef,\n    targetRef,\n    scrollIntoView,\n    cancel\n  };\n}\nexport { useScrollIntoView };","map":{"version":3,"names":["useScrollIntoView","duration","axis","onScrollFinish","easing","easeInOutQuad","offset","cancelable","isList","frameID","useRef","startTime","shouldStop","scrollableRef","targetRef","reducedMotion","useReducedMotion","cancel","current","cancelAnimationFrame","scrollIntoView","useCallback","alignment","start","getScrollStart","parent","change","getRelativePosition","target","animateScroll","performance","now","elapsed","t","distance","setScrollParam","requestAnimationFrame","handleStop","useWindowEvent","passive","useEffect"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\hooks\\src\\use-scroll-into-view\\use-scroll-into-view.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\nimport { easeInOutQuad } from './utils/ease-in-out-quad';\nimport { getRelativePosition } from './utils/get-relative-position';\nimport { getScrollStart } from './utils/get-scroll-start';\nimport { setScrollParam } from './utils/set-scroll-param';\n\ninterface ScrollIntoViewAnimation {\n  /** Target element alignment relatively to parent based on current axis */\n  alignment?: 'start' | 'end' | 'center';\n}\n\ninterface ScrollIntoViewParams {\n  /** Callback fired after scroll */\n  onScrollFinish?: () => void;\n\n  /** Duration of scroll in milliseconds */\n  duration?: number;\n\n  /** Axis of scroll */\n  axis?: 'x' | 'y';\n\n  /** Custom mathematical easing function */\n  easing?: (t: number) => number;\n\n  /** Additional distance between nearest edge and element */\n  offset?: number;\n\n  /** Indicator if animation may be interrupted by user scrolling */\n  cancelable?: boolean;\n\n  /** Prevents content jumping in scrolling lists with multiple targets */\n  isList?: boolean;\n}\n\ninterface ScrollIntoViewReturnType<\n  Target extends HTMLElement = any,\n  Parent extends HTMLElement | null = null,\n> {\n  scrollableRef: React.RefObject<Parent>;\n  targetRef: React.RefObject<Target>;\n  scrollIntoView: (params?: ScrollIntoViewAnimation) => void;\n  cancel: () => void;\n}\n\nexport function useScrollIntoView<\n  Target extends HTMLElement = any,\n  Parent extends HTMLElement | null = null,\n>({\n  duration = 1250,\n  axis = 'y',\n  onScrollFinish,\n  easing = easeInOutQuad,\n  offset = 0,\n  cancelable = true,\n  isList = false,\n}: ScrollIntoViewParams = {}) {\n  const frameID = useRef(0);\n  const startTime = useRef(0);\n  const shouldStop = useRef(false);\n\n  const scrollableRef = useRef<Parent>(null);\n  const targetRef = useRef<Target>(null);\n\n  const reducedMotion = useReducedMotion();\n\n  const cancel = (): void => {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n\n  const scrollIntoView = useCallback(\n    ({ alignment = 'start' }: ScrollIntoViewAnimation = {}) => {\n      shouldStop.current = false;\n\n      if (frameID.current) {\n        cancel();\n      }\n\n      const start = getScrollStart({ parent: scrollableRef.current, axis }) ?? 0;\n\n      const change =\n        getRelativePosition({\n          parent: scrollableRef.current,\n          target: targetRef.current,\n          axis,\n          alignment,\n          offset,\n          isList,\n        }) - (scrollableRef.current ? 0 : start);\n\n      function animateScroll() {\n        if (startTime.current === 0) {\n          startTime.current = performance.now();\n        }\n\n        const now = performance.now();\n        const elapsed = now - startTime.current;\n\n        // Easing timing progress\n        const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n\n        const distance = start + change * easing(t);\n\n        setScrollParam({\n          parent: scrollableRef.current,\n          axis,\n          distance,\n        });\n\n        if (!shouldStop.current && t < 1) {\n          frameID.current = requestAnimationFrame(animateScroll);\n        } else {\n          typeof onScrollFinish === 'function' && onScrollFinish();\n          startTime.current = 0;\n          frameID.current = 0;\n          cancel();\n        }\n      }\n      animateScroll();\n    },\n    [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]\n  );\n\n  const handleStop = () => {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n\n  /**\n   * Detection of one of these events stops scroll animation\n   * wheel - mouse wheel / touch pad\n   * touchmove - any touchable device\n   */\n\n  useWindowEvent('wheel', handleStop, {\n    passive: true,\n  });\n\n  useWindowEvent('touchmove', handleStop, {\n    passive: true,\n  });\n\n  // Cleanup requestAnimationFrame\n  useEffect(() => cancel, []);\n\n  return {\n    scrollableRef,\n    targetRef,\n    scrollIntoView,\n    cancel,\n  } as ScrollIntoViewReturnType<Target, Parent>;\n}\n"],"mappings":";;;;;;;;;AA8CO,SAASA,iBAGdA,CAAA;EACAC,QAAW;EACXC,IAAO;EACPC,cAAA;EACAC,MAAS,GAAAC,aAAA;EACTC,MAAS;EACTC,UAAa;EACbC,MAAS;AACX,IAA0B,EAAI;EACtB,MAAAC,OAAA,GAAUC,MAAA,CAAO,CAAC;EAClB,MAAAC,SAAA,GAAYD,MAAA,CAAO,CAAC;EACpB,MAAAE,UAAA,GAAaF,MAAA,CAAO,KAAK;EAEzB,MAAAG,aAAA,GAAgBH,MAAA,CAAe,IAAI;EACnC,MAAAI,SAAA,GAAYJ,MAAA,CAAe,IAAI;EAErC,MAAMK,aAAA,GAAgBC,gBAAiB;EAEvC,MAAMC,MAAA,GAASA,CAAA,KAAY;IACzB,IAAIR,OAAA,CAAQS,OAAS;MACnBC,oBAAA,CAAqBV,OAAA,CAAQS,OAAO;IAAA;EAExC;EAEA,MAAME,cAAiB,GAAAC,WAAA,CACrB,CAAC;IAAEC,SAAA,GAAY;EAAQ,IAA6B,EAAO;IACzDV,UAAA,CAAWM,OAAU;IAErB,IAAIT,OAAA,CAAQS,OAAS;MACZD,MAAA;IAAA;IAGH,MAAAM,KAAA,GAAQC,cAAA,CAAe;MAAEC,MAAA,EAAQZ,aAAA,CAAcK,OAAS;MAAAhB;IAAM,EAAK;IAEzE,MAAMwB,MAAA,GACJC,mBAAoB;MAClBF,MAAA,EAAQZ,aAAc,CAAAK,OAAA;MACtBU,MAAA,EAAQd,SAAU,CAAAI,OAAA;MAClBhB,IAAA;MACAoB,SAAA;MACAhB,MAAA;MACAE;IACD,MAAKK,aAAc,CAAAK,OAAA,GAAU,CAAI,GAAAK,KAAA;IAEpC,SAASM,aAAgBA,CAAA;MACnB,IAAAlB,SAAA,CAAUO,OAAA,KAAY,CAAG;QACjBP,SAAA,CAAAO,OAAA,GAAUY,WAAA,CAAYC,GAAI;MAAA;MAGhC,MAAAA,GAAA,GAAMD,WAAA,CAAYC,GAAI;MACtB,MAAAC,OAAA,GAAUD,GAAA,GAAMpB,SAAU,CAAAO,OAAA;MAGhC,MAAMe,CAAI,GAAAlB,aAAA,IAAiBd,QAAa,SAAI,IAAI+B,OAAU,GAAA/B,QAAA;MAE1D,MAAMiC,QAAW,GAAAX,KAAA,GAAQG,MAAS,GAAAtB,MAAA,CAAO6B,CAAC;MAE3BE,cAAA;QACbV,MAAA,EAAQZ,aAAc,CAAAK,OAAA;QACtBhB,IAAA;QACAgC;MAAA,CACD;MAED,IAAI,CAACtB,UAAA,CAAWM,OAAW,IAAAe,CAAA,GAAI,CAAG;QACxBxB,OAAA,CAAAS,OAAA,GAAUkB,qBAAA,CAAsBP,aAAa;MAAA,CAChD;QACE,OAAA1B,cAAA,KAAmB,cAAcA,cAAe;QACvDQ,SAAA,CAAUO,OAAU;QACpBT,OAAA,CAAQS,OAAU;QACXD,MAAA;MAAA;IACT;IAEYY,aAAA;EAChB,GACA,CAAC3B,IAAM,EAAAD,QAAA,EAAUG,MAAA,EAAQI,MAAQ,EAAAF,MAAA,EAAQH,cAAA,EAAgBY,aAAa,CACxE;EAEA,MAAMsB,UAAA,GAAaA,CAAA,KAAM;IACvB,IAAI9B,UAAY;MACdK,UAAA,CAAWM,OAAU;IAAA;EAEzB;EAQAoB,cAAA,CAAe,SAASD,UAAY;IAClCE,OAAS;EAAA,CACV;EAEDD,cAAA,CAAe,aAAaD,UAAY;IACtCE,OAAS;EAAA,CACV;EAGSC,SAAA,OAAMvB,MAAQ,IAAE;EAEnB;IACLJ,aAAA;IACAC,SAAA;IACAM,cAAA;IACAH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}