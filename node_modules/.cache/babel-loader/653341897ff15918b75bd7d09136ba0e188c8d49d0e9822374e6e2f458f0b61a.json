{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core/utils/is-element/is-element.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nfunction FocusTrap({\n  children,\n  active = true,\n  refProp = \"ref\",\n  innerRef\n}) {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, innerRef);\n  if (!isElement(children)) {\n    return children;\n  }\n  return cloneElement(children, {\n    [refProp]: ref\n  });\n}\nfunction FocusTrapInitialFocus(props) {\n  return /* @__PURE__ */jsx(VisuallyHidden, {\n    tabIndex: -1,\n    \"data-autofocus\": true,\n    ...props\n  });\n}\nFocusTrap.displayName = \"@mantine/core/FocusTrap\";\nFocusTrapInitialFocus.displayName = \"@mantine/core/FocusTrapInitialFocus\";\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\nexport { FocusTrap, FocusTrapInitialFocus };","map":{"version":3,"names":["FocusTrap","children","active","refProp","innerRef","focusTrapRef","useFocusTrap","ref","useMergedRef","isElement","cloneElement","FocusTrapInitialFocus","props","jsx","VisuallyHidden","tabIndex","displayName","InitialFocus"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\FocusTrap\\FocusTrap.tsx"],"sourcesContent":["import { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core';\nimport { VisuallyHidden } from '../VisuallyHidden';\n\nexport interface FocusTrapProps {\n  /** Element at which focus should be trapped, should support ref prop */\n  children: any;\n\n  /** Determines whether focus should be trapped within child element */\n  active?: boolean;\n\n  /** Prop that should be used to access component ref */\n  refProp?: string;\n\n  /** Assigns element `ref` */\n  innerRef?: React.ForwardedRef<any>;\n}\n\nexport function FocusTrap({\n  children,\n  active = true,\n  refProp = 'ref',\n  innerRef,\n}: FocusTrapProps): React.ReactElement {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, innerRef);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, { [refProp]: ref });\n}\n\nexport function FocusTrapInitialFocus(props: React.ComponentPropsWithoutRef<'span'>) {\n  return <VisuallyHidden tabIndex={-1} data-autofocus {...props} />;\n}\n\nFocusTrap.displayName = '@mantine/core/FocusTrap';\nFocusTrapInitialFocus.displayName = '@mantine/core/FocusTrapInitialFocus';\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\n"],"mappings":";;;;;;;;;;;;;;;AAmBO,SAASA,SAAUA,CAAA;EACxBC,QAAA;EACAC,MAAS;EACTC,OAAU;EACVC;AACF,CAAuC;EAC/B,MAAAC,YAAA,GAAeC,YAAA,CAAaJ,MAAM;EAClC,MAAAK,GAAA,GAAMC,YAAa,CAAAH,YAAA,EAAcD,QAAQ;EAE3C,KAACK,SAAU,CAAAR,QAAQ,CAAG;IACjB,OAAAA,QAAA;EAAA;EAGT,OAAOS,YAAA,CAAaT,QAAU;IAAE,CAACE,OAAO,GAAGI;EAAA,CAAK;AAClD;AAEO,SAASI,sBAAsBC,KAA+C;EACnF,sBAAAC,GAAA,CAAQC,cAAe;IAAAC,QAAA,EAAU;IAAI,gBAAc;IAAE,GAAGH;EAAO;AACjE;AAEAZ,SAAA,CAAUgB,WAAc;AACxBL,qBAAA,CAAsBK,WAAc;AACpChB,SAAA,CAAUiB,YAAe,GAAAN,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}