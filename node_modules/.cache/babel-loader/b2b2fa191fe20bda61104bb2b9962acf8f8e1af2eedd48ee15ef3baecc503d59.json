{"ast":null,"code":"'use client';\n\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\"),\n    plus: keys.includes(\"[plus]\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return {\n    ...modifiers,\n    key: freeKey === \"[plus]\" ? \"+\" : freeKey\n  };\n}\nfunction isExactHotkey(hotkey, event, usePhysicalKeys) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey,\n    code: pressedCode\n  } = event;\n  if (alt !== altKey) {\n    return false;\n  }\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n  if (key && (!usePhysicalKeys && pressedKey.toLowerCase() === key.toLowerCase() || pressedCode.replace(\"Key\", \"\").toLowerCase() === key.toLowerCase())) {\n    return true;\n  }\n  return false;\n}\nfunction getHotkeyMatcher(hotkey, usePhysicalKeys) {\n  return event => isExactHotkey(parseHotkey(hotkey), event, usePhysicalKeys);\n}\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    const _event = \"nativeEvent\" in event ? event.nativeEvent : event;\n    hotkeys.forEach(([hotkey, handler, options = {\n      preventDefault: true,\n      usePhysicalKeys: false\n    }]) => {\n      if (getHotkeyMatcher(hotkey, options.usePhysicalKeys)(_event)) {\n        if (options.preventDefault) {\n          event.preventDefault();\n        }\n        handler(_event);\n      }\n    });\n  };\n}\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"names":["parseHotkey","hotkey","keys","toLowerCase","split","map","part","trim","modifiers","alt","includes","ctrl","meta","mod","shift","plus","reservedKeys","freeKey","find","key","isExactHotkey","event","usePhysicalKeys","altKey","ctrlKey","metaKey","shiftKey","pressedKey","code","pressedCode","replace","getHotkeyMatcher","getHotkeyHandler","hotkeys","_event","nativeEvent","forEach","handler","options","preventDefault"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\hooks\\src\\use-hotkeys\\parse-hotkey.ts"],"sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n  plus: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n    plus: keys.includes('[plus]'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey === '[plus]' ? '+' : freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent, usePhysicalKeys?: boolean): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey, code: pressedCode } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    ((!usePhysicalKeys && pressedKey.toLowerCase() === key.toLowerCase()) ||\n      pressedCode.replace('Key', '').toLowerCase() === key.toLowerCase())\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string, usePhysicalKeys?: boolean): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event, usePhysicalKeys);\n}\n\nexport interface HotkeyItemOptions {\n  preventDefault?: boolean;\n  usePhysicalKeys?: boolean;\n}\n\ntype HotkeyItem = [string, (event: any) => void, HotkeyItemOptions?];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => {\n    const _event = 'nativeEvent' in event ? event.nativeEvent : event;\n    hotkeys.forEach(\n      ([hotkey, handler, options = { preventDefault: true, usePhysicalKeys: false }]) => {\n        if (getHotkeyMatcher(hotkey, options.usePhysicalKeys)(_event)) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n\n          handler(_event);\n        }\n      }\n    );\n  };\n}\n"],"mappings":";;AAeO,SAASA,YAAYC,MAAwB;EAClD,MAAMC,IAAO,GAAAD,MAAA,CACVE,WAAY,GACZC,KAAM,IAAG,CACT,CAAAC,GAAA,CAAKC,IAAA,IAASA,IAAK,CAAAC,IAAA,EAAM;EAE5B,MAAMC,SAA+B;IACnCC,GAAA,EAAKP,IAAK,CAAAQ,QAAA,CAAS,KAAK;IACxBC,IAAA,EAAMT,IAAK,CAAAQ,QAAA,CAAS,MAAM;IAC1BE,IAAA,EAAMV,IAAK,CAAAQ,QAAA,CAAS,MAAM;IAC1BG,GAAA,EAAKX,IAAK,CAAAQ,QAAA,CAAS,KAAK;IACxBI,KAAA,EAAOZ,IAAK,CAAAQ,QAAA,CAAS,OAAO;IAC5BK,IAAA,EAAMb,IAAK,CAAAQ,QAAA,CAAS,QAAQ;EAC9B;EAEA,MAAMM,YAAA,GAAe,CAAC,OAAO,MAAQ,UAAQ,SAAS,KAAK;EAErD,MAAAC,OAAA,GAAUf,IAAA,CAAKgB,IAAK,CAACC,GAAA,IAAQ,CAACH,YAAA,CAAaN,QAAS,CAAAS,GAAG,CAAC;EAEvD;IACL,GAAGX,SAAA;IACHW,GAAA,EAAKF,OAAY,gBAAW,GAAM,GAAAA;EACpC;AACF;AAEA,SAASG,cAAcnB,MAAgB,EAAAoB,KAAA,EAAsBC,eAAoC;EAC/F,MAAM;IAAEb,GAAK;IAAAE,IAAA;IAAMC,IAAA;IAAMC,GAAK;IAAAC,KAAA;IAAOK;EAAA,CAAQ,GAAAlB,MAAA;EACvC;IAAEsB,MAAA;IAAQC,OAAS;IAAAC,OAAA;IAASC,QAAA;IAAUP,GAAK,EAAAQ,UAAA;IAAYC,IAAM,EAAAC;EAAA,CAAgB,GAAAR,KAAA;EAEnF,IAAIZ,GAAA,KAAQc,MAAQ;IACX;EAAA;EAGT,IAAIV,GAAK;IACH,KAACW,OAAW,KAACC,OAAS;MACjB;IAAA;EACT,CACK;IACL,IAAId,IAAA,KAASa,OAAS;MACb;IAAA;IAET,IAAIZ,IAAA,KAASa,OAAS;MACb;IAAA;EACT;EAEF,IAAIX,KAAA,KAAUY,QAAU;IACf;EAAA;EAGT,IACEP,GAAA,KACE,CAACG,eAAA,IAAmBK,UAAA,CAAWxB,WAAY,OAAMgB,GAAA,CAAIhB,WAAY,MACjE0B,WAAY,CAAAC,OAAA,CAAQ,OAAO,EAAE,EAAE3B,WAAA,EAAkB,KAAAgB,GAAA,CAAIhB,WAAA,EACvD;IACO;EAAA;EAGF;AACT;AAEgB,SAAA4B,iBAAiB9B,MAAA,EAAgBqB,eAA6C;EAC5F,OAAQD,KAAU,IAAAD,aAAA,CAAcpB,WAAA,CAAYC,MAAM,GAAGoB,KAAA,EAAOC,eAAe;AAC7E;AASO,SAASU,iBAAiBC,OAAuB;EACtD,OAAQZ,KAA4D;IAClE,MAAMa,MAAS,oBAAiBb,KAAQ,GAAAA,KAAA,CAAMc,WAAc,GAAAd,KAAA;IACpDY,OAAA,CAAAG,OAAA,CACN,CAAC,CAACnC,MAAA,EAAQoC,OAAS,EAAAC,OAAA,GAAU;MAAEC,cAAA,EAAgB,IAAM;MAAAjB,eAAA,EAAiB;IAAM,CAAC,CAAM;MACjF,IAAIS,gBAAA,CAAiB9B,MAAQ,EAAAqC,OAAA,CAAQhB,eAAe,EAAEY,MAAM,CAAG;QAC7D,IAAII,OAAA,CAAQC,cAAgB;UAC1BlB,KAAA,CAAMkB,cAAe;QAAA;QAGvBF,OAAA,CAAQH,MAAM;MAAA;IAChB,CAEJ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}