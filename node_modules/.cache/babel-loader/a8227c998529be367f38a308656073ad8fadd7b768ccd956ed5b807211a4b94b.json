{"ast":null,"code":"'use client';\n\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport cx from 'clsx';\nimport { createPolymorphicComponent } from '../factory/create-polymorphic-component.mjs';\nimport { InlineStyles } from '../InlineStyles/InlineStyles.mjs';\nimport { isNumberLike } from '../utils/is-number-like/is-number-like.mjs';\nimport '@mantine/hooks';\nimport { useMantineSxTransform } from '../MantineProvider/Mantine.context.mjs';\nimport '../MantineProvider/default-theme.mjs';\nimport '../MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { getBoxMod } from './get-box-mod/get-box-mod.mjs';\nimport { getBoxStyle } from './get-box-style/get-box-style.mjs';\nimport { extractStyleProps } from './style-props/extract-style-props/extract-style-props.mjs';\nimport { STYlE_PROPS_DATA } from './style-props/style-props-data.mjs';\nimport { parseStyleProps } from './style-props/parse-style-props/parse-style-props.mjs';\nimport { useRandomClassName } from './use-random-classname/use-random-classname.mjs';\nconst _Box = forwardRef(({\n  component,\n  style,\n  __vars,\n  className,\n  variant,\n  mod,\n  size,\n  hiddenFrom,\n  visibleFrom,\n  lightHidden,\n  darkHidden,\n  renderRoot,\n  __size,\n  ...others\n}, ref) => {\n  const theme = useMantineTheme();\n  const Element = component || \"div\";\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const useSxTransform = useMantineSxTransform();\n  const transformedSx = useSxTransform?.()?.(styleProps.sx);\n  const responsiveClassName = useRandomClassName();\n  const parsedStyleProps = parseStyleProps({\n    styleProps,\n    theme,\n    data: STYlE_PROPS_DATA\n  });\n  const props = {\n    ref,\n    style: getBoxStyle({\n      theme,\n      style,\n      vars: __vars,\n      styleProps: parsedStyleProps.inlineStyles\n    }),\n    className: cx(className, transformedSx, {\n      [responsiveClassName]: parsedStyleProps.hasResponsiveStyles,\n      \"mantine-light-hidden\": lightHidden,\n      \"mantine-dark-hidden\": darkHidden,\n      [`mantine-hidden-from-${hiddenFrom}`]: hiddenFrom,\n      [`mantine-visible-from-${visibleFrom}`]: visibleFrom\n    }),\n    \"data-variant\": variant,\n    \"data-size\": isNumberLike(size) ? void 0 : size || void 0,\n    size: __size,\n    ...getBoxMod(mod),\n    ...rest\n  };\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [parsedStyleProps.hasResponsiveStyles && /* @__PURE__ */jsx(InlineStyles, {\n      selector: `.${responsiveClassName}`,\n      styles: parsedStyleProps.styles,\n      media: parsedStyleProps.media\n    }), typeof renderRoot === \"function\" ? renderRoot(props) : /* @__PURE__ */jsx(Element, {\n      ...props\n    })]\n  });\n});\n_Box.displayName = \"@mantine/core/Box\";\nconst Box = createPolymorphicComponent(_Box);\nexport { Box };","map":{"version":3,"names":["_Box","forwardRef","component","style","__vars","className","variant","mod","size","hiddenFrom","visibleFrom","lightHidden","darkHidden","renderRoot","__size","others","ref","theme","useMantineTheme","Element","styleProps","rest","extractStyleProps","useSxTransform","useMantineSxTransform","transformedSx","sx","responsiveClassName","useRandomClassName","parsedStyleProps","parseStyleProps","data","STYlE_PROPS_DATA","props","getBoxStyle","vars","inlineStyles","cx","hasResponsiveStyles","isNumberLike","getBoxMod","jsxs","Fragment","children","jsx","InlineStyles","selector","styles","media","displayName","Box","createPolymorphicComponent"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\Box\\Box.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport cx from 'clsx';\nimport { createPolymorphicComponent } from '../factory';\nimport { InlineStyles } from '../InlineStyles';\nimport { MantineBreakpoint, useMantineSxTransform, useMantineTheme } from '../MantineProvider';\nimport { isNumberLike } from '../utils';\nimport type { CssVarsProp, MantineStyleProp } from './Box.types';\nimport { getBoxMod } from './get-box-mod/get-box-mod';\nimport { getBoxStyle } from './get-box-style/get-box-style';\nimport {\n  extractStyleProps,\n  MantineStyleProps,\n  parseStyleProps,\n  STYlE_PROPS_DATA,\n} from './style-props';\nimport { useRandomClassName } from './use-random-classname/use-random-classname';\n\nexport type Mod = Record<string, any> | string;\nexport type BoxMod = Mod | Mod[] | BoxMod[];\n\nexport interface BoxProps extends MantineStyleProps {\n  /** Class added to the root element, if applicable */\n  className?: string;\n\n  /** Inline style added to root component element, can subscribe to theme defined on MantineProvider */\n  style?: MantineStyleProp;\n\n  /** CSS variables defined on root component element */\n  __vars?: CssVarsProp;\n\n  /** `size` property passed down the HTML element */\n  __size?: string;\n\n  /** Breakpoint above which the component is hidden with `display: none` */\n  hiddenFrom?: MantineBreakpoint;\n\n  /** Breakpoint below which the component is hidden with `display: none` */\n  visibleFrom?: MantineBreakpoint;\n\n  /** Determines whether component should be hidden in light color scheme with `display: none` */\n  lightHidden?: boolean;\n\n  /** Determines whether component should be hidden in dark color scheme with `display: none` */\n  darkHidden?: boolean;\n\n  /** Element modifiers transformed into `data-` attributes, for example, `{ 'data-size': 'xl' }`, falsy values are removed */\n  mod?: BoxMod;\n}\n\nexport type ElementProps<\n  ElementType extends React.ElementType,\n  PropsToOmit extends string = never,\n> = Omit<React.ComponentPropsWithoutRef<ElementType>, 'style' | PropsToOmit>;\n\nexport interface BoxComponentProps extends BoxProps {\n  /** Variant passed from parent component, sets `data-variant` */\n  variant?: string;\n\n  /** Size passed from parent component, sets `data-size` if value is not number like */\n  size?: string | number;\n}\n\nconst _Box = forwardRef<\n  HTMLDivElement,\n  BoxComponentProps & { component: any; className: string; renderRoot: any }\n>(\n  (\n    {\n      component,\n      style,\n      __vars,\n      className,\n      variant,\n      mod,\n      size,\n      hiddenFrom,\n      visibleFrom,\n      lightHidden,\n      darkHidden,\n      renderRoot,\n      __size,\n      ...others\n    },\n    ref\n  ) => {\n    const theme = useMantineTheme();\n    const Element = component || 'div';\n    const { styleProps, rest } = extractStyleProps(others);\n    const useSxTransform = useMantineSxTransform();\n    const transformedSx = useSxTransform?.()?.(styleProps.sx);\n    const responsiveClassName = useRandomClassName();\n    const parsedStyleProps = parseStyleProps({\n      styleProps,\n      theme,\n      data: STYlE_PROPS_DATA,\n    });\n\n    const props = {\n      ref,\n      style: getBoxStyle({\n        theme,\n        style,\n        vars: __vars,\n        styleProps: parsedStyleProps.inlineStyles,\n      }),\n      className: cx(className, transformedSx, {\n        [responsiveClassName]: parsedStyleProps.hasResponsiveStyles,\n        'mantine-light-hidden': lightHidden,\n        'mantine-dark-hidden': darkHidden,\n        [`mantine-hidden-from-${hiddenFrom}`]: hiddenFrom,\n        [`mantine-visible-from-${visibleFrom}`]: visibleFrom,\n      }),\n      'data-variant': variant,\n      'data-size': isNumberLike(size) ? undefined : size || undefined,\n      size: __size,\n      ...getBoxMod(mod),\n      ...rest,\n    };\n\n    return (\n      <>\n        {parsedStyleProps.hasResponsiveStyles && (\n          <InlineStyles\n            selector={`.${responsiveClassName}`}\n            styles={parsedStyleProps.styles}\n            media={parsedStyleProps.media}\n          />\n        )}\n\n        {typeof renderRoot === 'function' ? renderRoot(props) : <Element {...props} />}\n      </>\n    );\n  }\n);\n\n_Box.displayName = '@mantine/core/Box';\n\nexport const Box = createPolymorphicComponent<'div', BoxComponentProps>(_Box);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AA8DA,MAAMA,IAAO,GAAAC,UAAA,CAIX,CACE;EACEC,SAAA;EACAC,KAAA;EACAC,MAAA;EACAC,SAAA;EACAC,OAAA;EACAC,GAAA;EACAC,IAAA;EACAC,UAAA;EACAC,WAAA;EACAC,WAAA;EACAC,UAAA;EACAC,UAAA;EACAC,MAAA;EACA,GAAGC;AAAA,GAELC,GACG;EACH,MAAMC,KAAA,GAAQC,eAAgB;EAC9B,MAAMC,OAAA,GAAUjB,SAAa;EAC7B,MAAM;IAAEkB,UAAA;IAAYC;EAAK,IAAIC,iBAAA,CAAkBP,MAAM;EACrD,MAAMQ,cAAA,GAAiBC,qBAAsB;EAC7C,MAAMC,aAAgB,GAAAF,cAAA,IAAqB,GAAAH,UAAA,CAAWM,EAAE;EACxD,MAAMC,mBAAA,GAAsBC,kBAAmB;EAC/C,MAAMC,gBAAA,GAAmBC,eAAgB;IACvCV,UAAA;IACAH,KAAA;IACAc,IAAM,EAAAC;EAAA,CACP;EAED,MAAMC,KAAQ;IACZjB,GAAA;IACAb,KAAA,EAAO+B,WAAY;MACjBjB,KAAA;MACAd,KAAA;MACAgC,IAAM,EAAA/B,MAAA;MACNgB,UAAA,EAAYS,gBAAiB,CAAAO;IAAA,CAC9B;IACD/B,SAAA,EAAWgC,EAAG,CAAAhC,SAAA,EAAWoB,aAAe;MACtC,CAACE,mBAAmB,GAAGE,gBAAiB,CAAAS,mBAAA;MACxC,sBAAwB,EAAA3B,WAAA;MACxB,qBAAuB,EAAAC,UAAA;MACvB,CAAC,uBAAuBH,UAAU,EAAE,GAAGA,UAAA;MACvC,CAAC,wBAAwBC,WAAW,EAAE,GAAGA;IAAA,CAC1C;IACD,cAAgB,EAAAJ,OAAA;IAChB,WAAa,EAAAiC,YAAA,CAAa/B,IAAI,IAAI,SAAYA,IAAQ;IACtDA,IAAM,EAAAM,MAAA;IACN,GAAG0B,SAAA,CAAUjC,GAAG;IAChB,GAAGc;EACL;EAEA,sBAEKoB,IAAA,CAAAC,QAAA;IAAAC,QAAA,GAAAd,gBAAA,CAAiBS,mBAChB,mBAAAM,GAAA,CAACC,YAAA;MACCC,QAAA,EAAU,IAAInB,mBAAmB;MACjCoB,MAAA,EAAQlB,gBAAiB,CAAAkB,MAAA;MACzBC,KAAA,EAAOnB,gBAAiB,CAAAmB;IAAA,CAC1B,GAGD,OAAOnC,UAAA,KAAe,UAAa,GAAAA,UAAA,CAAWoB,KAAK,CAAI,kBAAAW,GAAA,CAACzB,OAAS;MAAA,GAAGc;IAAO;EAC9E;AAAA,CAGN;AAEAjC,IAAA,CAAKiD,WAAc;AAEN,MAAAC,GAAA,GAAMC,0BAAA,CAAqDnD,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}