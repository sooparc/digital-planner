{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Skeleton.module.css.mjs';\nconst defaultProps = {\n  visible: true,\n  animate: true\n};\nconst varsResolver = createVarsResolver((_, {\n  width,\n  height,\n  radius,\n  circle\n}) => ({\n  root: {\n    \"--skeleton-height\": rem(height),\n    \"--skeleton-width\": circle ? rem(height) : rem(width),\n    \"--skeleton-radius\": circle ? \"1000px\" : radius === void 0 ? void 0 : getRadius(radius)\n  }\n}));\nconst Skeleton = factory((_props, ref) => {\n  const props = useProps(\"Skeleton\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    width,\n    height,\n    circle,\n    visible,\n    radius,\n    animate,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Skeleton\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...getStyles(\"root\"),\n    mod: [{\n      visible,\n      animate\n    }, mod],\n    ...others\n  });\n});\nSkeleton.classes = classes;\nSkeleton.displayName = \"@mantine/core/Skeleton\";\nexport { Skeleton };","map":{"version":3,"names":["defaultProps","visible","animate","varsResolver","createVarsResolver","_","width","height","radius","circle","root","rem","getRadius","Skeleton","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","mod","others","getStyles","useStyles","name","classes","jsx","Box","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Skeleton\\Skeleton.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getRadius,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Skeleton.module.css';\n\nexport type SkeletonStylesNames = 'root';\nexport type SkeletonCssVariables = {\n  root: '--skeleton-width' | '--skeleton-height' | '--skeleton-radius';\n};\n\nexport interface SkeletonProps\n  extends BoxProps,\n    StylesApiProps<SkeletonFactory>,\n    ElementProps<'div'> {\n  /** Determines whether Skeleton overlay should be displayed, `true` by default */\n  visible?: boolean;\n\n  /** Skeleton `height`, numbers are converted to rem, `auto` by default */\n  height?: React.CSSProperties['height'];\n\n  /** Skeleton `width`, numbers are converted to rem, `100%` by default, ignored when `circle` prop is set */\n  width?: React.CSSProperties['width'];\n\n  /** If set, Skeleton `width` and `border-radius` are equal to its `height`, `false` by default */\n  circle?: boolean;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius. Numbers are converted to rem. `theme.defaultRadius` by default. */\n  radius?: React.CSSProperties['borderRadius'];\n\n  /** Determines whether Skeleton should be animated, `true` by default */\n  animate?: boolean;\n}\n\nexport type SkeletonFactory = Factory<{\n  props: SkeletonProps;\n  ref: HTMLDivElement;\n  stylesNames: SkeletonStylesNames;\n  vars: SkeletonCssVariables;\n}>;\n\nconst defaultProps: Partial<SkeletonProps> = {\n  visible: true,\n  animate: true,\n};\n\nconst varsResolver = createVarsResolver<SkeletonFactory>(\n  (_, { width, height, radius, circle }) => ({\n    root: {\n      '--skeleton-height': rem(height),\n      '--skeleton-width': circle ? rem(height) : rem(width),\n      '--skeleton-radius': circle ? '1000px' : radius === undefined ? undefined : getRadius(radius),\n    },\n  })\n);\n\nexport const Skeleton = factory<SkeletonFactory>((_props, ref) => {\n  const props = useProps('Skeleton', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    width,\n    height,\n    circle,\n    visible,\n    radius,\n    animate,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SkeletonFactory>({\n    name: 'Skeleton',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return <Box ref={ref} {...getStyles('root')} mod={[{ visible, animate }, mod]} {...others} />;\n});\n\nSkeleton.classes = classes;\nSkeleton.displayName = '@mantine/core/Skeleton';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAkDA,MAAMA,YAAuC;EAC3CC,OAAS;EACTC,OAAS;AACX;AAEA,MAAMC,YAAe,GAAAC,kBAAA,CACnB,CAACC,CAAG;EAAEC,KAAA;EAAOC,MAAQ;EAAAC,MAAA;EAAQC;AAAA,CAAc;EACzCC,IAAM;IACJ,qBAAqBC,GAAA,CAAIJ,MAAM;IAC/B,oBAAoBE,MAAS,GAAAE,GAAA,CAAIJ,MAAM,IAAII,GAAA,CAAIL,KAAK;IACpD,qBAAqBG,MAAS,cAAWD,MAAA,KAAW,KAAY,aAAYI,SAAA,CAAUJ,MAAM;EAAA;AAEhG,EACF;AAEO,MAAMK,QAAW,GAAAC,OAAA,CAAyB,CAACC,MAAA,EAAQC,GAAQ;EAChE,MAAMC,KAAQ,GAAAC,QAAA,CAAS,UAAY,EAAAlB,YAAA,EAAce,MAAM;EACjD;IACJI,UAAA;IACAC,SAAA;IACAC,KAAA;IACAC,MAAA;IACAC,QAAA;IACAC,IAAA;IACAlB,KAAA;IACAC,MAAA;IACAE,MAAA;IACAR,OAAA;IACAO,MAAA;IACAN,OAAA;IACAuB,GAAA;IACA,GAAGC;EAAA,CACD,GAAAT,KAAA;EAEJ,MAAMU,SAAA,GAAYC,SAA2B;IAC3CC,IAAM;IACNC,OAAA;IACAb,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAC,IAAA;IACArB;EAAA,CACD;EAED,sBAAA4B,GAAA,CAAQC,GAAI;IAAAhB,GAAA;IAAW,GAAGW,SAAA,CAAU,MAAM,CAAG;IAAAF,GAAA,EAAK,CAAC;MAAExB,OAAA;MAASC;IAAQ,GAAGuB,GAAG;IAAI,GAAGC;EAAQ;AAC7F,CAAC;AAEDb,QAAA,CAASiB,OAAU,GAAAA,OAAA;AACnBjB,QAAA,CAASoB,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}