{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport 'react';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Container.module.css.mjs';\nconst defaultProps = {};\nconst varsResolver = createVarsResolver((_, {\n  size,\n  fluid\n}) => ({\n  root: {\n    \"--container-size\": fluid ? void 0 : getSize(size, \"container-size\")\n  }\n}));\nconst Container = factory((_props, ref) => {\n  const props = useProps(\"Container\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    fluid,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Container\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    mod: [{\n      fluid\n    }, mod],\n    ...getStyles(\"root\"),\n    ...others\n  });\n});\nContainer.classes = classes;\nContainer.displayName = \"@mantine/core/Container\";\nexport { Container };","map":{"version":3,"names":["defaultProps","varsResolver","createVarsResolver","_","size","fluid","root","getSize","Container","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","mod","others","getStyles","useStyles","name","classes","jsx","Box","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Container\\Container.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSize,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Container.module.css';\n\nexport type ContainerStylesNames = 'root';\nexport type ContainerCssVariables = {\n  root: '--container-size';\n};\n\nexport interface ContainerProps\n  extends BoxProps,\n    StylesApiProps<ContainerFactory>,\n    ElementProps<'div'> {\n  /** Sets `max-width` of the container, value is not responsive â€“ it is the same for all screen sizes. Numbers are converted to rem. Ignored when `fluid` prop is set. `'md'` by default */\n  size?: MantineSize | (string & {}) | number;\n\n  /** Determines whether the container should take 100% of its parent width. If set, `size` prop is ignored. `false` by default. */\n  fluid?: boolean;\n}\n\nexport type ContainerFactory = Factory<{\n  props: ContainerProps;\n  ref: HTMLDivElement;\n  stylesNames: ContainerStylesNames;\n  vars: ContainerCssVariables;\n}>;\n\nconst defaultProps: Partial<ContainerProps> = {};\n\nconst varsResolver = createVarsResolver<ContainerFactory>((_, { size, fluid }) => ({\n  root: {\n    '--container-size': fluid ? undefined : getSize(size, 'container-size'),\n  },\n}));\n\nexport const Container = factory<ContainerFactory>((_props, ref) => {\n  const props = useProps('Container', defaultProps, _props);\n  const { classNames, className, style, styles, unstyled, vars, fluid, mod, ...others } = props;\n\n  const getStyles = useStyles<ContainerFactory>({\n    name: 'Container',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return <Box ref={ref} mod={[{ fluid }, mod]} {...getStyles('root')} {...others} />;\n});\n\nContainer.classes = classes;\nContainer.displayName = '@mantine/core/Container';\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAsCA,MAAMA,YAAA,GAAwC,CAAC;AAE/C,MAAMC,YAAA,GAAeC,kBAAqC,EAACC,CAAA,EAAG;EAAEC,IAAA;EAAMC;AAAA,CAAa;EACjFC,IAAM;IACJ,kBAAoB,EAAAD,KAAA,GAAQ,KAAY,IAAAE,OAAA,CAAQH,IAAA,EAAM,gBAAgB;EAAA;AAE1E,CAAE;AAEK,MAAMI,SAAY,GAAAC,OAAA,CAA0B,CAACC,MAAA,EAAQC,GAAQ;EAClE,MAAMC,KAAQ,GAAAC,QAAA,CAAS,WAAa,EAAAb,YAAA,EAAcU,MAAM;EAClD;IAAEI,UAAY;IAAAC,SAAA;IAAWC,KAAO;IAAAC,MAAA;IAAQC,QAAU;IAAAC,IAAA;IAAMd,KAAO;IAAAe,GAAA;IAAK,GAAGC;EAAW,IAAAT,KAAA;EAExF,MAAMU,SAAA,GAAYC,SAA4B;IAC5CC,IAAM;IACNC,OAAA;IACAb,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAC,IAAA;IACAlB;EAAA,CACD;EAED,sBAAQyB,GAAA,CAAAC,GAAA;IAAIhB,GAAU;IAAAS,GAAA,EAAK,CAAC;MAAEf;IAAS,GAAAe,GAAG;IAAI,GAAGE,SAAA,CAAU,MAAM;IAAI,GAAGD;EAAQ;AAClF,CAAC;AAEDb,SAAA,CAAUiB,OAAU,GAAAA,OAAA;AACpBjB,SAAA,CAAUoB,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}