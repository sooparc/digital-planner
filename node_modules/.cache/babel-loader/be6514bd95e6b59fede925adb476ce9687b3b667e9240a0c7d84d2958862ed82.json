{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { convertCssVariables } from '../convert-css-variables/convert-css-variables.mjs';\nimport { useMantineStyleNonce, useMantineCssVariablesResolver } from '../Mantine.context.mjs';\nimport { useMantineTheme } from '../MantineThemeProvider/MantineThemeProvider.mjs';\nimport { getMergedVariables } from './get-merged-variables.mjs';\nimport { removeDefaultVariables } from './remove-default-variables.mjs';\nfunction getColorSchemeCssVariables(selector) {\n  return `\n  ${selector}[data-mantine-color-scheme=\"dark\"] { --mantine-color-scheme: dark; }\n  ${selector}[data-mantine-color-scheme=\"light\"] { --mantine-color-scheme: light; }\n`;\n}\nfunction MantineCssVariables({\n  cssVariablesSelector,\n  deduplicateCssVariables\n}) {\n  const theme = useMantineTheme();\n  const nonce = useMantineStyleNonce();\n  const generator = useMantineCssVariablesResolver();\n  const mergedVariables = getMergedVariables({\n    theme,\n    generator\n  });\n  const shouldCleanVariables = cssVariablesSelector === \":root\" && deduplicateCssVariables;\n  const cleanedVariables = shouldCleanVariables ? removeDefaultVariables(mergedVariables) : mergedVariables;\n  const css = convertCssVariables(cleanedVariables, cssVariablesSelector);\n  if (css) {\n    return /* @__PURE__ */jsx(\"style\", {\n      \"data-mantine-styles\": true,\n      nonce: nonce?.(),\n      dangerouslySetInnerHTML: {\n        __html: `${css}${shouldCleanVariables ? \"\" : getColorSchemeCssVariables(cssVariablesSelector)}`\n      }\n    });\n  }\n  return null;\n}\nMantineCssVariables.displayName = \"@mantine/CssVariables\";\nexport { MantineCssVariables };","map":{"version":3,"names":["getColorSchemeCssVariables","selector","MantineCssVariables","cssVariablesSelector","deduplicateCssVariables","theme","useMantineTheme","nonce","useMantineStyleNonce","generator","useMantineCssVariablesResolver","mergedVariables","getMergedVariables","shouldCleanVariables","cleanedVariables","removeDefaultVariables","css","convertCssVariables","jsx","dangerouslySetInnerHTML","__html","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\MantineProvider\\MantineCssVariables\\MantineCssVariables.tsx"],"sourcesContent":["import { convertCssVariables } from '../convert-css-variables/convert-css-variables';\nimport { useMantineCssVariablesResolver, useMantineStyleNonce } from '../Mantine.context';\nimport { useMantineTheme } from '../MantineThemeProvider';\nimport { getMergedVariables } from './get-merged-variables';\nimport { removeDefaultVariables } from './remove-default-variables';\n\ninterface MantineCssVariablesProps {\n  cssVariablesSelector: string;\n  deduplicateCssVariables: boolean;\n}\n\nfunction getColorSchemeCssVariables(selector: string) {\n  return `\n  ${selector}[data-mantine-color-scheme=\"dark\"] { --mantine-color-scheme: dark; }\n  ${selector}[data-mantine-color-scheme=\"light\"] { --mantine-color-scheme: light; }\n`;\n}\n\nexport function MantineCssVariables({\n  cssVariablesSelector,\n  deduplicateCssVariables,\n}: MantineCssVariablesProps) {\n  const theme = useMantineTheme();\n  const nonce = useMantineStyleNonce();\n  const generator = useMantineCssVariablesResolver();\n  const mergedVariables = getMergedVariables({ theme, generator });\n  const shouldCleanVariables = cssVariablesSelector === ':root' && deduplicateCssVariables;\n  const cleanedVariables = shouldCleanVariables\n    ? removeDefaultVariables(mergedVariables)\n    : mergedVariables;\n  const css = convertCssVariables(cleanedVariables, cssVariablesSelector);\n\n  if (css) {\n    return (\n      <style\n        data-mantine-styles\n        nonce={nonce?.()}\n        dangerouslySetInnerHTML={{\n          __html: `${css}${\n            shouldCleanVariables ? '' : getColorSchemeCssVariables(cssVariablesSelector)\n          }`,\n        }}\n      />\n    );\n  }\n\n  return null;\n}\n\nMantineCssVariables.displayName = '@mantine/CssVariables';\n"],"mappings":";;;;;;;;AAWA,SAASA,2BAA2BC,QAAkB;EAC7C;AAAA,IACLA,QAAQ;AAAA,IACRA,QAAQ;AAAA;AAEZ;AAEO,SAASC,mBAAoBA,CAAA;EAClCC,oBAAA;EACAC;AACF,CAA6B;EAC3B,MAAMC,KAAA,GAAQC,eAAgB;EAC9B,MAAMC,KAAA,GAAQC,oBAAqB;EACnC,MAAMC,SAAA,GAAYC,8BAA+B;EACjD,MAAMC,eAAkB,GAAAC,kBAAA,CAAmB;IAAEP,KAAA;IAAOI;EAAA,CAAW;EACzD,MAAAI,oBAAA,GAAuBV,oBAAA,KAAyB,OAAW,IAAAC,uBAAA;EACjE,MAAMU,gBAAmB,GAAAD,oBAAA,GACrBE,sBAAuB,CAAAJ,eAAe,CACtC,GAAAA,eAAA;EACE,MAAAK,GAAA,GAAMC,mBAAoB,CAAAH,gBAAA,EAAkBX,oBAAoB;EAEtE,IAAIa,GAAK;IAEL,sBAAAE,GAAA,CAAC;MACC,qBAAmB;MACnBX,KAAA,EAAOA,KAAQ;MACfY,uBAAyB;QACvBC,MAAA,EAAQ,GAAGJ,GAAG,GACZH,oBAAA,GAAuB,EAAK,GAAAb,0BAAA,CAA2BG,oBAAoB,CAC7E;MAAA;IACF,CACF;EAAA;EAIG;AACT;AAEAD,mBAAA,CAAoBmB,WAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}