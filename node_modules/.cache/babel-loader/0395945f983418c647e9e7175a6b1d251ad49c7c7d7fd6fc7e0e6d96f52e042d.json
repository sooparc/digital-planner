{"ast":null,"code":"'use client';\n\nimport 'react';\nimport 'react/jsx-runtime';\nimport '@mantine/hooks';\nimport { memoize } from '../../../core/utils/memoize/memoize.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getAllCheckedNodes } from '../get-all-checked-nodes/get-all-checked-nodes.mjs';\nfunction isNodeChecked(value, data, checkedState) {\n  if (checkedState.length === 0) {\n    return false;\n  }\n  if (checkedState.includes(value)) {\n    return true;\n  }\n  const checkedNodes = getAllCheckedNodes(data, checkedState).result;\n  return checkedNodes.some(node => node.value === value && node.checked);\n}\nconst memoizedIsNodeChecked = memoize(isNodeChecked);\nexport { isNodeChecked, memoizedIsNodeChecked };","map":{"version":3,"names":["isNodeChecked","value","data","checkedState","length","includes","checkedNodes","getAllCheckedNodes","result","some","node","checked","memoizedIsNodeChecked","memoize"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Tree\\is-node-checked\\is-node-checked.ts"],"sourcesContent":["import { memoize } from '../../../core';\nimport { getAllCheckedNodes } from '../get-all-checked-nodes/get-all-checked-nodes';\nimport type { TreeNodeData } from '../Tree';\n\nexport function isNodeChecked(\n  value: string,\n  data: TreeNodeData[],\n  checkedState: string[]\n): boolean {\n  if (checkedState.length === 0) {\n    return false;\n  }\n\n  if (checkedState.includes(value)) {\n    return true;\n  }\n\n  const checkedNodes = getAllCheckedNodes(data, checkedState).result;\n  return checkedNodes.some((node) => node.value === value && node.checked);\n}\n\nexport const memoizedIsNodeChecked = memoize(isNodeChecked);\n"],"mappings":";;;;;;;;;;;;;;;AAIgB,SAAAA,cACdC,KACA,EAAAC,IAAA,EACAC,YACS;EACL,IAAAA,YAAA,CAAaC,MAAA,KAAW,CAAG;IACtB;EAAA;EAGL,IAAAD,YAAA,CAAaE,QAAS,CAAAJ,KAAK,CAAG;IACzB;EAAA;EAGT,MAAMK,YAAe,GAAAC,kBAAA,CAAmBL,IAAM,EAAAC,YAAY,CAAE,CAAAK,MAAA;EACrD,OAAAF,YAAA,CAAaG,IAAA,CAAMC,IAAA,IAASA,IAAA,CAAKT,KAAU,KAAAA,KAAA,IAASS,IAAA,CAAKC,OAAO;AACzE;AAEa,MAAAC,qBAAA,GAAwBC,OAAA,CAAQb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}