{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport 'react';\nimport { getFontSize, getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../Checkbox/Checkbox.mjs';\nimport '../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../Checkbox/CheckIcon.mjs';\nimport '../Checkbox/CheckboxIndicator/CheckboxIndicator.mjs';\nimport '../Checkbox/CheckboxCard/CheckboxCard.mjs';\nimport '../Checkbox/CheckboxCard/CheckboxCard.context.mjs';\nimport '../Checkbox/CheckboxGroup.context.mjs';\nimport { useChipGroupContext } from './ChipGroup.context.mjs';\nimport { ChipGroup } from './ChipGroup/ChipGroup.mjs';\nimport classes from './Chip.module.css.mjs';\nconst defaultProps = {\n  type: \"checkbox\"\n};\nconst varsResolver = createVarsResolver((theme, {\n  size,\n  radius,\n  variant,\n  color,\n  autoContrast\n}) => {\n  const colors = theme.variantColorResolver({\n    color: color || theme.primaryColor,\n    theme,\n    variant: variant || \"filled\",\n    autoContrast\n  });\n  return {\n    root: {\n      \"--chip-fz\": getFontSize(size),\n      \"--chip-size\": getSize(size, \"chip-size\"),\n      \"--chip-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--chip-checked-padding\": getSize(size, \"chip-checked-padding\"),\n      \"--chip-padding\": getSize(size, \"chip-padding\"),\n      \"--chip-icon-size\": getSize(size, \"chip-icon-size\"),\n      \"--chip-bg\": color || variant ? colors.background : void 0,\n      \"--chip-hover\": color || variant ? colors.hover : void 0,\n      \"--chip-color\": color || variant ? colors.color : void 0,\n      \"--chip-bd\": color || variant ? colors.border : void 0,\n      \"--chip-spacing\": getSize(size, \"chip-spacing\")\n    }\n  };\n});\nconst Chip = factory((_props, ref) => {\n  const props = useProps(\"Chip\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    checked,\n    defaultChecked,\n    onChange,\n    value,\n    wrapperProps,\n    type,\n    disabled,\n    children,\n    size,\n    variant,\n    icon,\n    rootRef,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Chip\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const ctx = useChipGroupContext();\n  const uuid = useId(id);\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange\n  });\n  const contextProps = ctx ? {\n    checked: ctx.isChipSelected(value),\n    onChange: event => {\n      ctx.onChange(event);\n      onChange?.(event.currentTarget.checked);\n    },\n    type: ctx.multiple ? \"checkbox\" : \"radio\"\n  } : {};\n  const _checked = contextProps.checked || _value;\n  return /* @__PURE__ */jsxs(Box, {\n    size,\n    variant,\n    ref: rootRef,\n    mod,\n    ...getStyles(\"root\"),\n    ...styleProps,\n    ...wrapperProps,\n    children: [/* @__PURE__ */jsx(\"input\", {\n      type,\n      ...getStyles(\"input\"),\n      checked: _checked,\n      onChange: event => setValue(event.currentTarget.checked),\n      id: uuid,\n      disabled,\n      ref,\n      value,\n      ...contextProps,\n      ...rest\n    }), /* @__PURE__ */jsxs(\"label\", {\n      htmlFor: uuid,\n      \"data-checked\": _checked || void 0,\n      \"data-disabled\": disabled || void 0,\n      ...getStyles(\"label\", {\n        variant: variant || \"filled\"\n      }),\n      children: [_checked && /* @__PURE__ */jsx(\"span\", {\n        ...getStyles(\"iconWrapper\"),\n        children: icon || /* @__PURE__ */jsx(CheckIcon, {\n          ...getStyles(\"checkIcon\")\n        })\n      }), /* @__PURE__ */jsx(\"span\", {\n        children\n      })]\n    })]\n  });\n});\nChip.classes = classes;\nChip.displayName = \"@mantine/core/Chip\";\nChip.Group = ChipGroup;\nexport { Chip };","map":{"version":3,"names":["defaultProps","type","varsResolver","createVarsResolver","theme","size","radius","variant","color","autoContrast","colors","variantColorResolver","primaryColor","root","getFontSize","getSize","getRadius","background","hover","border","Chip","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","id","checked","defaultChecked","onChange","value","wrapperProps","disabled","children","icon","rootRef","mod","others","getStyles","useStyles","name","classes","ctx","useChipGroupContext","uuid","useId","styleProps","rest","extractStyleProps","_value","setValue","useUncontrolled","defaultValue","finalValue","contextProps","isChipSelected","event","currentTarget","multiple","_checked","jsxs","Box","jsx","htmlFor","CheckIcon","displayName","Group","ChipGroup"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  getFontSize,\n  getRadius,\n  getSize,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { CheckIcon } from '../Checkbox';\nimport { useChipGroupContext } from './ChipGroup.context';\nimport { ChipGroup } from './ChipGroup/ChipGroup';\nimport classes from './Chip.module.css';\n\nexport type ChipStylesNames = 'root' | 'input' | 'iconWrapper' | 'checkIcon' | 'label';\nexport type ChipVariant = 'outline' | 'filled' | 'light';\nexport type ChipCssVariables = {\n  root:\n    | '--chip-fz'\n    | '--chip-size'\n    | '--chip-icon-size'\n    | '--chip-padding'\n    | '--chip-checked-padding'\n    | '--chip-radius'\n    | '--chip-bg'\n    | '--chip-hover'\n    | '--chip-color'\n    | '--chip-bd'\n    | '--chip-spacing';\n};\n\nexport interface ChipProps\n  extends BoxProps,\n    StylesApiProps<ChipFactory>,\n    ElementProps<'input', 'size' | 'onChange'> {\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `'xl'` by default */\n  radius?: MantineRadius;\n\n  /** Controls various properties related to component size, `'sm'` by default */\n  size?: MantineSize;\n\n  /** Chip input type, `'checkbox'` by default */\n  type?: 'radio' | 'checkbox';\n\n  /** `label` element associated with the input */\n  children: React.ReactNode;\n\n  /** Checked state for controlled component */\n  checked?: boolean;\n\n  /** Default checked state for uncontrolled component */\n  defaultChecked?: boolean;\n\n  /** Calls when checked state changes */\n  onChange?: (checked: boolean) => void;\n\n  /** Controls components colors based on `variant` prop. Key of `theme.colors` or any valid CSS color. `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Static id to connect input with the label, by default `id` is randomly generated */\n  id?: string;\n\n  /** Props passed down to the root element */\n  wrapperProps?: Record<string, any>;\n\n  /** Any element or component to replace default icon */\n  icon?: React.ReactNode;\n\n  /** Assigns ref of the root element */\n  rootRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Determines whether button text color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n}\n\nexport type ChipFactory = Factory<{\n  props: ChipProps;\n  ref: HTMLInputElement;\n  stylesNames: ChipStylesNames;\n  vars: ChipCssVariables;\n  variant: ChipVariant;\n  staticComponents: {\n    Group: typeof ChipGroup;\n  };\n}>;\n\nconst defaultProps: Partial<ChipProps> = {\n  type: 'checkbox',\n};\n\nconst varsResolver = createVarsResolver<ChipFactory>(\n  (theme, { size, radius, variant, color, autoContrast }) => {\n    const colors = theme.variantColorResolver({\n      color: color || theme.primaryColor,\n      theme,\n      variant: variant || 'filled',\n      autoContrast,\n    });\n\n    return {\n      root: {\n        '--chip-fz': getFontSize(size),\n        '--chip-size': getSize(size, 'chip-size'),\n        '--chip-radius': radius === undefined ? undefined : getRadius(radius),\n        '--chip-checked-padding': getSize(size, 'chip-checked-padding'),\n        '--chip-padding': getSize(size, 'chip-padding'),\n        '--chip-icon-size': getSize(size, 'chip-icon-size'),\n        '--chip-bg': color || variant ? colors.background : undefined,\n        '--chip-hover': color || variant ? colors.hover : undefined,\n        '--chip-color': color || variant ? colors.color : undefined,\n        '--chip-bd': color || variant ? colors.border : undefined,\n        '--chip-spacing': getSize(size, 'chip-spacing'),\n      },\n    };\n  }\n);\n\nexport const Chip = factory<ChipFactory>((_props, ref) => {\n  const props = useProps('Chip', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    checked,\n    defaultChecked,\n    onChange,\n    value,\n    wrapperProps,\n    type,\n    disabled,\n    children,\n    size,\n    variant,\n    icon,\n    rootRef,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ChipFactory>({\n    name: 'Chip',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const ctx = useChipGroupContext();\n  const uuid = useId(id);\n  const { styleProps, rest } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n  });\n\n  const contextProps = ctx\n    ? {\n        checked: ctx.isChipSelected(value as string),\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          ctx.onChange(event);\n          onChange?.(event.currentTarget.checked);\n        },\n        type: ctx.multiple ? 'checkbox' : 'radio',\n      }\n    : {};\n\n  const _checked = contextProps.checked || _value;\n\n  return (\n    <Box\n      size={size}\n      variant={variant}\n      ref={rootRef}\n      mod={mod}\n      {...getStyles('root')}\n      {...styleProps}\n      {...wrapperProps}\n    >\n      <input\n        type={type}\n        {...getStyles('input')}\n        checked={_checked}\n        onChange={(event) => setValue(event.currentTarget.checked)}\n        id={uuid}\n        disabled={disabled}\n        ref={ref}\n        value={value}\n        {...contextProps}\n        {...rest}\n      />\n\n      <label\n        htmlFor={uuid}\n        data-checked={_checked || undefined}\n        data-disabled={disabled || undefined}\n        {...getStyles('label', { variant: variant || 'filled' })}\n      >\n        {_checked && (\n          <span {...getStyles('iconWrapper')}>\n            {icon || <CheckIcon {...getStyles('checkIcon')} />}\n          </span>\n        )}\n        <span>{children}</span>\n      </label>\n    </Box>\n  );\n});\n\nChip.classes = classes;\nChip.displayName = '@mantine/core/Chip';\nChip.Group = ChipGroup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}