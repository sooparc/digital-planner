{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getSafeId } from '../../core/utils/get-safe-id/get-safe-id.mjs';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { getWithProps } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { AccordionProvider } from './Accordion.context.mjs';\nimport { AccordionChevron } from './AccordionChevron.mjs';\nimport { AccordionControl } from './AccordionControl/AccordionControl.mjs';\nimport { AccordionItem } from './AccordionItem/AccordionItem.mjs';\nimport { AccordionPanel } from './AccordionPanel/AccordionPanel.mjs';\nimport classes from './Accordion.module.css.mjs';\nconst defaultProps = {\n  multiple: false,\n  disableChevronRotation: false,\n  chevronPosition: \"right\",\n  variant: \"default\",\n  chevron: /* @__PURE__ */jsx(AccordionChevron, {})\n};\nconst varsResolver = createVarsResolver((_, {\n  transitionDuration,\n  chevronSize,\n  radius\n}) => ({\n  root: {\n    \"--accordion-transition-duration\": transitionDuration === void 0 ? void 0 : `${transitionDuration}ms`,\n    \"--accordion-chevron-size\": chevronSize === void 0 ? void 0 : rem(chevronSize),\n    \"--accordion-radius\": radius === void 0 ? void 0 : getRadius(radius)\n  }\n}));\nfunction Accordion(_props) {\n  const props = useProps(\"Accordion\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    ...others\n  } = props;\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n  const getStyles = useStyles({\n    name: \"Accordion\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(AccordionProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(`${uid}-control`, \"Accordion.Item component was rendered with invalid value or without value\"),\n      getRegionId: getSafeId(`${uid}-panel`, \"Accordion.Item component was rendered with invalid value or without value\"),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      order,\n      chevron,\n      loop,\n      getStyles,\n      variant,\n      unstyled\n    },\n    children: /* @__PURE__ */jsx(Box, {\n      ...getStyles(\"root\"),\n      id: uid,\n      ...others,\n      variant,\n      \"data-accordion\": true,\n      children\n    })\n  });\n}\nconst extendAccordion = c => c;\nAccordion.extend = extendAccordion;\nAccordion.withProps = getWithProps(Accordion);\nAccordion.classes = classes;\nAccordion.displayName = \"@mantine/core/Accordion\";\nAccordion.Item = AccordionItem;\nAccordion.Panel = AccordionPanel;\nAccordion.Control = AccordionControl;\nAccordion.Chevron = AccordionChevron;\nexport { Accordion };","map":{"version":3,"names":["defaultProps","multiple","disableChevronRotation","chevronPosition","variant","chevron","jsx","AccordionChevron","varsResolver","createVarsResolver","_","transitionDuration","chevronSize","radius","root","rem","getRadius","Accordion","_props","props","useProps","classNames","className","style","styles","unstyled","vars","children","value","defaultValue","onChange","id","loop","order","others","uid","useId","_value","handleChange","useUncontrolled","finalValue","isItemActive","itemValue","Array","isArray","includes","handleItemChange","nextValue","filter","selectedValue","getStyles","useStyles","name","classes","AccordionProvider","getControlId","getSafeId","getRegionId","Box","extendAccordion","c","extend","withProps","getWithProps","displayName","Item","AccordionItem","Panel","AccordionPanel","Control","AccordionControl","Chevron"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Accordion\\Accordion.tsx"],"sourcesContent":["import { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  ExtendComponent,\n  Factory,\n  getRadius,\n  getSafeId,\n  getWithProps,\n  MantineRadius,\n  MantineThemeComponent,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { AccordionProvider } from './Accordion.context';\nimport { AccordionChevronPosition, AccordionHeadingOrder, AccordionValue } from './Accordion.types';\nimport { AccordionChevron } from './AccordionChevron';\nimport { AccordionControl } from './AccordionControl/AccordionControl';\nimport { AccordionItem } from './AccordionItem/AccordionItem';\nimport { AccordionPanel } from './AccordionPanel/AccordionPanel';\nimport classes from './Accordion.module.css';\n\nexport type AccordionStylesNames =\n  | 'root'\n  | 'content'\n  | 'item'\n  | 'panel'\n  | 'icon'\n  | 'chevron'\n  | 'label'\n  | 'itemTitle'\n  | 'control';\n\nexport type AccordionVariant = 'default' | 'contained' | 'filled' | 'separated';\nexport type AccordionCssVariables = {\n  root: '--accordion-transition-duration' | '--accordion-chevron-size' | '--accordion-radius';\n};\n\nexport interface AccordionProps<Multiple extends boolean = false>\n  extends BoxProps,\n    StylesApiProps<AccordionFactory>,\n    ElementProps<'div', 'value' | 'defaultValue' | 'onChange'> {\n  /** Determines whether multiple items can be opened at a time, `false` by default */\n  multiple?: Multiple;\n\n  /** Value for controlled component */\n  value?: AccordionValue<Multiple>;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: AccordionValue<Multiple>;\n\n  /** Called when value changes */\n  onChange?: (value: AccordionValue<Multiple>) => void;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first), `true` by default */\n  loop?: boolean;\n\n  /** Transition duration in ms, `200` by default */\n  transitionDuration?: number;\n\n  /** Determines whether chevron rotation should be disabled, `false` by default */\n  disableChevronRotation?: boolean;\n\n  /** Position of the chevron relative to the item label, `right` by default */\n  chevronPosition?: AccordionChevronPosition;\n\n  /** Size of the chevron icon container, `24` by default */\n  chevronSize?: number | string;\n\n  /** Heading order, has no effect on visuals */\n  order?: AccordionHeadingOrder;\n\n  /** Custom chevron icon that will be used in all items */\n  chevron?: React.ReactNode;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius. Numbers are converted to rem. `theme.defaultRadius` by default. */\n  radius?: MantineRadius;\n}\n\nexport type AccordionFactory = Factory<{\n  props: AccordionProps;\n  ref: HTMLDivElement;\n  stylesNames: AccordionStylesNames;\n  vars: AccordionCssVariables;\n  variant: AccordionVariant;\n}>;\n\nconst defaultProps: Partial<AccordionProps> = {\n  multiple: false,\n  disableChevronRotation: false,\n  chevronPosition: 'right',\n  variant: 'default',\n  chevron: <AccordionChevron />,\n};\n\nconst varsResolver = createVarsResolver<AccordionFactory>(\n  (_, { transitionDuration, chevronSize, radius }) => ({\n    root: {\n      '--accordion-transition-duration':\n        transitionDuration === undefined ? undefined : `${transitionDuration}ms`,\n      '--accordion-chevron-size': chevronSize === undefined ? undefined : rem(chevronSize),\n      '--accordion-radius': radius === undefined ? undefined : getRadius(radius),\n    },\n  })\n);\n\nexport function Accordion<Multiple extends boolean = false>(_props: AccordionProps<Multiple>) {\n  const props = useProps('Accordion', defaultProps as AccordionProps<Multiple>, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    ...others\n  } = props;\n\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as any) : null,\n    onChange,\n  });\n\n  const isItemActive = (itemValue: string) =>\n    Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = (itemValue: string) => {\n    const nextValue: AccordionValue<Multiple> = Array.isArray(_value)\n      ? _value.includes(itemValue)\n        ? _value.filter((selectedValue) => selectedValue !== itemValue)\n        : [..._value, itemValue]\n      : itemValue === _value\n        ? null\n        : (itemValue as any);\n\n    handleChange(nextValue);\n  };\n\n  const getStyles = useStyles<AccordionFactory>({\n    name: 'Accordion',\n    classes,\n    props: props as AccordionProps,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <AccordionProvider\n      value={{\n        isItemActive,\n        onChange: handleItemChange,\n        getControlId: getSafeId(\n          `${uid}-control`,\n          'Accordion.Item component was rendered with invalid value or without value'\n        ),\n        getRegionId: getSafeId(\n          `${uid}-panel`,\n          'Accordion.Item component was rendered with invalid value or without value'\n        ),\n        transitionDuration,\n        disableChevronRotation,\n        chevronPosition,\n        order,\n        chevron,\n        loop,\n        getStyles,\n        variant,\n        unstyled,\n      }}\n    >\n      <Box {...getStyles('root')} id={uid} {...others} variant={variant} data-accordion>\n        {children}\n      </Box>\n    </AccordionProvider>\n  );\n}\n\nconst extendAccordion = (c: ExtendComponent<AccordionFactory>): MantineThemeComponent => c;\n\nAccordion.extend = extendAccordion;\nAccordion.withProps = getWithProps<AccordionProps, AccordionProps>(Accordion as any);\nAccordion.classes = classes;\nAccordion.displayName = '@mantine/core/Accordion';\nAccordion.Item = AccordionItem;\nAccordion.Panel = AccordionPanel;\nAccordion.Control = AccordionControl;\nAccordion.Chevron = AccordionChevron;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}