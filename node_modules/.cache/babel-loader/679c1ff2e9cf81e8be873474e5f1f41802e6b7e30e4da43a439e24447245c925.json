{"ast":null,"code":"'use client';\n\nimport 'react';\nimport 'react/jsx-runtime';\nimport '@mantine/hooks';\nimport { useMantineStylesTransform } from '../../MantineProvider/Mantine.context.mjs';\nimport '../../MantineProvider/default-theme.mjs';\nimport '../../MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nfunction useStylesTransform({\n  props,\n  stylesCtx,\n  themeName\n}) {\n  const theme = useMantineTheme();\n  const stylesTransform = useMantineStylesTransform()?.();\n  const getTransformedStyles = styles => {\n    if (!stylesTransform) {\n      return [];\n    }\n    const transformedStyles = styles.map(style => stylesTransform(style, {\n      props,\n      theme,\n      ctx: stylesCtx\n    }));\n    return [...transformedStyles, ...themeName.map(n => stylesTransform(theme.components[n]?.styles, {\n      props,\n      theme,\n      ctx: stylesCtx\n    }))].filter(Boolean);\n  };\n  return {\n    getTransformedStyles,\n    withStylesTransform: !!stylesTransform\n  };\n}\nexport { useStylesTransform };","map":{"version":3,"names":["useStylesTransform","props","stylesCtx","themeName","theme","useMantineTheme","stylesTransform","useMantineStylesTransform","getTransformedStyles","styles","transformedStyles","map","style","ctx","n","components","filter","Boolean","withStylesTransform"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\core\\styles-api\\use-styles\\use-transformed-styles.ts"],"sourcesContent":["import { useMantineStylesTransform, useMantineTheme } from '../../MantineProvider';\n\ninterface UseTransformedStylesInput {\n  props: Record<string, any>;\n  stylesCtx: Record<string, any> | undefined;\n  themeName: string[];\n}\n\nexport function useStylesTransform({ props, stylesCtx, themeName }: UseTransformedStylesInput) {\n  const theme = useMantineTheme();\n  const stylesTransform = useMantineStylesTransform()?.();\n\n  const getTransformedStyles = (styles: any[]) => {\n    if (!stylesTransform) {\n      return [];\n    }\n\n    const transformedStyles = styles.map((style) =>\n      stylesTransform(style, { props, theme, ctx: stylesCtx })\n    );\n\n    return [\n      ...transformedStyles,\n      ...themeName.map((n) =>\n        stylesTransform(theme.components[n]?.styles, { props, theme, ctx: stylesCtx })\n      ),\n    ].filter(Boolean) as Record<string, string>[];\n  };\n\n  return {\n    getTransformedStyles,\n    withStylesTransform: !!stylesTransform,\n  };\n}\n"],"mappings":";;;;;;;;;;AAQO,SAASA,kBAAmBA,CAAA;EAAEC,KAAO;EAAAC,SAAA;EAAWC;AAAA,CAAwC;EAC7F,MAAMC,KAAA,GAAQC,eAAgB;EACxB,MAAAC,eAAA,GAAkBC,yBAAA,EAA8B;EAEhD,MAAAC,oBAAA,GAAwBC,MAAkB;IAC9C,IAAI,CAACH,eAAiB;MACpB,OAAO,EAAC;IAAA;IAGV,MAAMI,iBAAA,GAAoBD,MAAO,CAAAE,GAAA,CAAKC,KAAA,IACpCN,eAAgB,CAAAM,KAAA,EAAO;MAAEX,KAAO;MAAAG,KAAA;MAAOS,GAAK,EAAAX;IAAW,EACzD;IAEO,QACL,GAAGQ,iBAAA,EACH,GAAGP,SAAU,CAAAQ,GAAA,CAAKG,CAAA,IAChBR,eAAgB,CAAAF,KAAA,CAAMW,UAAW,CAAAD,CAAC,CAAG,EAAAL,MAAA,EAAQ;MAAER,KAAA;MAAOG,KAAO;MAAAS,GAAA,EAAKX;IAAW,IAEjF,CAAEc,MAAA,CAAOC,OAAO;EAClB;EAEO;IACLT,oBAAA;IACAU,mBAAA,EAAqB,CAAC,CAACZ;EACzB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}