{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useState, useRef, createElement } from 'react';\nimport { useMove, useDidUpdate, useMergedRef, clampUseMovePosition } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useColorPickerContext } from '../ColorPicker.context.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport classes from '../ColorPicker.module.css.mjs';\nconst defaultProps = {};\nconst ColorSlider = factory((_props, ref) => {\n  const props = useProps(\"ColorSlider\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onChange,\n    onChangeEnd,\n    maxValue,\n    round,\n    size = \"md\",\n    focusable = true,\n    value,\n    overlays,\n    thumbColor = \"transparent\",\n    onScrubStart,\n    onScrubEnd,\n    __staticSelector = \"ColorPicker\",\n    ...others\n  } = props;\n  const _getStyles = useStyles({\n    name: __staticSelector,\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled\n  });\n  const ctxGetStyles = useColorPickerContext()?.getStyles;\n  const getStyles = ctxGetStyles || _getStyles;\n  const theme = useMantineTheme();\n  const [position, setPosition] = useState({\n    y: 0,\n    x: value / maxValue\n  });\n  const positionRef = useRef(position);\n  const getChangeValue = val => round ? Math.round(val * maxValue) : val * maxValue;\n  const {\n    ref: sliderRef\n  } = useMove(({\n    x,\n    y\n  }) => {\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange?.(getChangeValue(x));\n  }, {\n    onScrubEnd: () => {\n      const {\n        x\n      } = positionRef.current;\n      onChangeEnd?.(getChangeValue(x));\n      onScrubEnd?.();\n    },\n    onScrubStart\n  });\n  useDidUpdate(() => {\n    setPosition({\n      y: 0,\n      x: value / maxValue\n    });\n  }, [value]);\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange?.(getChangeValue(_position.x));\n    onChangeEnd?.(getChangeValue(_position.x));\n  };\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n  const layers = overlays.map((overlay, index) => /* @__PURE__ */createElement(\"div\", {\n    ...getStyles(\"sliderOverlay\"),\n    style: overlay,\n    key: index\n  }));\n  return /* @__PURE__ */jsxs(Box, {\n    ...others,\n    ref: useMergedRef(sliderRef, ref),\n    ...getStyles(\"slider\"),\n    role: \"slider\",\n    \"aria-valuenow\": value,\n    \"aria-valuemax\": maxValue,\n    \"aria-valuemin\": 0,\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown,\n    \"data-focus-ring\": theme.focusRing,\n    __vars: {\n      \"--cp-thumb-size\": `var(--cp-thumb-size-${size})`\n    },\n    children: [layers, /* @__PURE__ */jsx(Thumb, {\n      position,\n      ...getStyles(\"thumb\", {\n        style: {\n          top: rem(1),\n          background: thumbColor\n        }\n      })\n    })]\n  });\n});\nColorSlider.displayName = \"@mantine/core/ColorSlider\";\nexport { ColorSlider };","map":{"version":3,"names":["defaultProps","ColorSlider","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","onChange","onChangeEnd","maxValue","round","size","focusable","value","overlays","thumbColor","onScrubStart","onScrubEnd","__staticSelector","others","_getStyles","useStyles","name","classes","ctxGetStyles","useColorPickerContext","getStyles","theme","useMantineTheme","position","setPosition","useState","y","x","positionRef","useRef","getChangeValue","val","Math","sliderRef","useMove","current","useDidUpdate","handleArrow","event","pos","preventDefault","_position","clampUseMovePosition","handleKeyDown","key","layers","map","overlay","index","createElement","jsxs","Box","useMergedRef","role","tabIndex","onKeyDown","focusRing","__vars","children","jsx","Thumb","top","rem","background","displayName"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\ColorPicker\\ColorSlider\\ColorSlider.tsx"],"sourcesContent":["import { useRef, useState } from 'react';\nimport {\n  clampUseMovePosition,\n  useDidUpdate,\n  useMergedRef,\n  useMove,\n  UseMovePosition,\n} from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { useColorPickerContext } from '../ColorPicker.context';\nimport { Thumb } from '../Thumb/Thumb';\nimport classes from '../ColorPicker.module.css';\n\nexport type ColorSliderStylesNames = 'slider' | 'sliderOverlay' | 'thumb';\n\nexport interface __ColorSliderProps extends ElementProps<'div', 'onChange'> {\n  value: number;\n  onChange?: (value: number) => void;\n  onChangeEnd?: (value: number) => void;\n  onScrubStart?: () => void;\n  onScrubEnd?: () => void;\n  size?: MantineSize | (string & {});\n  focusable?: boolean;\n}\n\nexport interface ColorSliderProps\n  extends BoxProps,\n    StylesApiProps<ColorSliderFactory>,\n    __ColorSliderProps,\n    ElementProps<'div', 'onChange'> {\n  __staticSelector?: string;\n  maxValue: number;\n  overlays: React.CSSProperties[];\n  round: boolean;\n  thumbColor?: string;\n}\n\nexport type ColorSliderFactory = Factory<{\n  props: ColorSliderProps;\n  ref: HTMLDivElement;\n  stylesNames: ColorSliderStylesNames;\n}>;\n\nconst defaultProps: Partial<ColorSliderProps> = {};\n\nexport const ColorSlider = factory<ColorSliderFactory>((_props, ref) => {\n  const props = useProps('ColorSlider', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onChange,\n    onChangeEnd,\n    maxValue,\n    round,\n    size = 'md',\n    focusable = true,\n    value,\n    overlays,\n    thumbColor = 'transparent',\n    onScrubStart,\n    onScrubEnd,\n    __staticSelector = 'ColorPicker',\n    ...others\n  } = props;\n\n  const _getStyles = useStyles<ColorSliderFactory>({\n    name: __staticSelector,\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  const ctxGetStyles = useColorPickerContext()?.getStyles;\n  const getStyles = ctxGetStyles || _getStyles;\n\n  const theme = useMantineTheme();\n  const [position, setPosition] = useState({ y: 0, x: value / maxValue });\n  const positionRef = useRef(position);\n  const getChangeValue = (val: number) => (round ? Math.round(val * maxValue) : val * maxValue);\n  const { ref: sliderRef } = useMove(\n    ({ x, y }) => {\n      positionRef.current = { x, y };\n      onChange?.(getChangeValue(x));\n    },\n    {\n      onScrubEnd: () => {\n        const { x } = positionRef.current;\n        onChangeEnd?.(getChangeValue(x));\n        onScrubEnd?.();\n      },\n      onScrubStart,\n    }\n  );\n\n  useDidUpdate(() => {\n    setPosition({ y: 0, x: value / maxValue });\n  }, [value]);\n\n  const handleArrow = (event: React.KeyboardEvent<HTMLDivElement>, pos: UseMovePosition) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange?.(getChangeValue(_position.x));\n    onChangeEnd?.(getChangeValue(_position.x));\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    switch (event.key) {\n      case 'ArrowRight': {\n        handleArrow(event, { x: position.x + 0.05, y: position.y });\n        break;\n      }\n\n      case 'ArrowLeft': {\n        handleArrow(event, { x: position.x - 0.05, y: position.y });\n        break;\n      }\n    }\n  };\n\n  const layers = overlays.map((overlay, index) => (\n    <div {...getStyles('sliderOverlay')} style={overlay} key={index} />\n  ));\n\n  return (\n    <Box\n      {...others}\n      ref={useMergedRef(sliderRef, ref)}\n      {...getStyles('slider')}\n      role=\"slider\"\n      aria-valuenow={value}\n      aria-valuemax={maxValue}\n      aria-valuemin={0}\n      tabIndex={focusable ? 0 : -1}\n      onKeyDown={handleKeyDown}\n      data-focus-ring={theme.focusRing}\n      __vars={{\n        '--cp-thumb-size': `var(--cp-thumb-size-${size})`,\n      }}\n    >\n      {layers}\n\n      <Thumb\n        position={position}\n        {...getStyles('thumb', { style: { top: rem(1), background: thumbColor } })}\n      />\n    </Box>\n  );\n});\n\nColorSlider.displayName = '@mantine/core/ColorSlider';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}