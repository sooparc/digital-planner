{"ast":null,"code":"'use client';\n\nfunction findTreeNode(value, data) {\n  for (const node of data) {\n    if (node.value === value) {\n      return node;\n    }\n    if (Array.isArray(node.children)) {\n      const childNode = findTreeNode(value, node.children);\n      if (childNode) {\n        return childNode;\n      }\n    }\n  }\n  return null;\n}\nfunction getChildrenNodesValues(value, data, acc = []) {\n  const node = findTreeNode(value, data);\n  if (!node) {\n    return acc;\n  }\n  if (!Array.isArray(node.children) || node.children.length === 0) {\n    return [node.value];\n  }\n  node.children.forEach(child => {\n    if (Array.isArray(child.children) && child.children.length > 0) {\n      getChildrenNodesValues(child.value, data, acc);\n    } else {\n      acc.push(child.value);\n    }\n  });\n  return acc;\n}\nfunction getAllChildrenNodes(data) {\n  return data.reduce((acc, node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      acc.push(...getAllChildrenNodes(node.children));\n    } else {\n      acc.push(node.value);\n    }\n    return acc;\n  }, []);\n}\nexport { findTreeNode, getAllChildrenNodes, getChildrenNodesValues };","map":{"version":3,"names":["findTreeNode","value","data","node","Array","isArray","children","childNode","getChildrenNodesValues","acc","length","forEach","child","push","getAllChildrenNodes","reduce"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\Tree\\get-children-nodes-values\\get-children-nodes-values.ts"],"sourcesContent":["import type { TreeNodeData } from '../Tree';\n\nexport function findTreeNode(value: string, data: TreeNodeData[]): TreeNodeData | null {\n  for (const node of data) {\n    if (node.value === value) {\n      return node;\n    }\n\n    if (Array.isArray(node.children)) {\n      const childNode = findTreeNode(value, node.children);\n      if (childNode) {\n        return childNode;\n      }\n    }\n  }\n\n  return null;\n}\n\n// Returns values for all nested nodes which do not have children\nexport function getChildrenNodesValues(\n  value: string,\n  data: TreeNodeData[],\n  acc: string[] = []\n): string[] {\n  const node = findTreeNode(value, data);\n  if (!node) {\n    return acc;\n  }\n\n  if (!Array.isArray(node.children) || node.children.length === 0) {\n    return [node.value];\n  }\n\n  node.children.forEach((child) => {\n    if (Array.isArray(child.children) && child.children.length > 0) {\n      getChildrenNodesValues(child.value, data, acc);\n    } else {\n      acc.push(child.value);\n    }\n  });\n\n  return acc;\n}\n\nexport function getAllChildrenNodes(data: TreeNodeData[]) {\n  return data.reduce((acc, node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      acc.push(...getAllChildrenNodes(node.children));\n    } else {\n      acc.push(node.value);\n    }\n\n    return acc;\n  }, [] as string[]);\n}\n"],"mappings":";;AAEgB,SAAAA,aAAaC,KAAA,EAAeC,IAA2C;EACrF,WAAWC,IAAA,IAAQD,IAAM;IACnB,IAAAC,IAAA,CAAKF,KAAA,KAAUA,KAAO;MACjB,OAAAE,IAAA;IAAA;IAGT,IAAIC,KAAM,CAAAC,OAAA,CAAQF,IAAK,CAAAG,QAAQ,CAAG;MAChC,MAAMC,SAAY,GAAAP,YAAA,CAAaC,KAAO,EAAAE,IAAA,CAAKG,QAAQ;MACnD,IAAIC,SAAW;QACN,OAAAA,SAAA;MAAA;IACT;EACF;EAGK;AACT;AAGO,SAASC,sBACdA,CAAAP,KAAA,EACAC,IACA,EAAAO,GAAA,GAAgB,EACN;EACJ,MAAAN,IAAA,GAAOH,YAAa,CAAAC,KAAA,EAAOC,IAAI;EACrC,IAAI,CAACC,IAAM;IACF,OAAAM,GAAA;EAAA;EAGL,KAACL,KAAA,CAAMC,OAAQ,CAAAF,IAAA,CAAKG,QAAQ,CAAK,IAAAH,IAAA,CAAKG,QAAS,CAAAI,MAAA,KAAW,CAAG;IACxD,QAACP,IAAA,CAAKF,KAAK;EAAA;EAGfE,IAAA,CAAAG,QAAA,CAASK,OAAQ,CAACC,KAAU;IAC3B,IAAAR,KAAA,CAAMC,OAAA,CAAQO,KAAM,CAAAN,QAAQ,KAAKM,KAAM,CAAAN,QAAA,CAASI,MAAA,GAAS,CAAG;MACvCF,sBAAA,CAAAI,KAAA,CAAMX,KAAO,EAAAC,IAAA,EAAMO,GAAG;IAAA,CACxC;MACDA,GAAA,CAAAI,IAAA,CAAKD,KAAA,CAAMX,KAAK;IAAA;EACtB,CACD;EAEM,OAAAQ,GAAA;AACT;AAEO,SAASK,oBAAoBZ,IAAsB;EACxD,OAAOA,IAAK,CAAAa,MAAA,CAAO,CAACN,GAAA,EAAKN,IAAS;IAC5B,IAAAC,KAAA,CAAMC,OAAA,CAAQF,IAAK,CAAAG,QAAQ,KAAKH,IAAK,CAAAG,QAAA,CAASI,MAAA,GAAS,CAAG;MAC5DD,GAAA,CAAII,IAAK,IAAGC,mBAAoB,CAAAX,IAAA,CAAKG,QAAQ,CAAC;IAAA,CACzC;MACDG,GAAA,CAAAI,IAAA,CAAKV,IAAA,CAAKF,KAAK;IAAA;IAGd,OAAAQ,GAAA;EACT,GAAG,EAAc;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}