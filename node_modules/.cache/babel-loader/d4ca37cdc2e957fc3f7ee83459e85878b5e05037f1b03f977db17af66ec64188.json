{"ast":null,"code":"'use client';\n\nimport { keys } from '../../../../core/utils/keys/keys.mjs';\nimport 'react';\nimport 'react/jsx-runtime';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../../core/MantineProvider/default-theme.mjs';\nimport '../../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../../core/Box/Box.mjs';\nimport '../../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getBaseSize } from '../get-base-size/get-base-size.mjs';\nimport { getPaddingValue } from '../get-padding-value/get-padding-value.mjs';\nimport { isPrimitiveSize } from '../is-primitive-size/is-primitive-size.mjs';\nimport { isResponsiveSize } from '../is-responsive-size/is-responsive-size.mjs';\nfunction assignPaddingVariables({\n  padding,\n  baseStyles,\n  minMediaStyles\n}) {\n  if (isPrimitiveSize(padding)) {\n    baseStyles[\"--app-shell-padding\"] = getPaddingValue(getBaseSize(padding));\n  }\n  if (isResponsiveSize(padding)) {\n    if (padding.base) {\n      baseStyles[\"--app-shell-padding\"] = getPaddingValue(padding.base);\n    }\n    keys(padding).forEach(key => {\n      if (key !== \"base\") {\n        minMediaStyles[key] = minMediaStyles[key] || {};\n        minMediaStyles[key][\"--app-shell-padding\"] = getPaddingValue(padding[key]);\n      }\n    });\n  }\n}\nexport { assignPaddingVariables };","map":{"version":3,"names":["assignPaddingVariables","padding","baseStyles","minMediaStyles","isPrimitiveSize","getPaddingValue","getBaseSize","isResponsiveSize","base","keys","forEach","key"],"sources":["C:\\Users\\Soojin Park\\Desktop\\digital-planner\\node_modules\\@mantine\\core\\src\\components\\AppShell\\AppShellMediaStyles\\assign-padding-variables\\assign-padding-variables.ts"],"sourcesContent":["import { keys } from '../../../../core';\nimport type { AppShellProps } from '../../AppShell';\nimport { getBaseSize } from '../get-base-size/get-base-size';\nimport { getPaddingValue } from '../get-padding-value/get-padding-value';\nimport type { CSSVariables, MediaQueryVariables } from '../get-variables/get-variables';\nimport { isPrimitiveSize } from '../is-primitive-size/is-primitive-size';\nimport { isResponsiveSize } from '../is-responsive-size/is-responsive-size';\n\ninterface AssignPaddingVariablesInput {\n  baseStyles: CSSVariables;\n  minMediaStyles: MediaQueryVariables;\n  padding: AppShellProps['padding'] | undefined;\n}\n\nexport function assignPaddingVariables({\n  padding,\n  baseStyles,\n  minMediaStyles,\n}: AssignPaddingVariablesInput) {\n  if (isPrimitiveSize(padding)) {\n    baseStyles['--app-shell-padding'] = getPaddingValue(getBaseSize(padding));\n  }\n\n  if (isResponsiveSize(padding)) {\n    if (padding.base) {\n      baseStyles['--app-shell-padding'] = getPaddingValue(padding.base);\n    }\n\n    keys(padding).forEach((key) => {\n      if (key !== 'base') {\n        minMediaStyles[key] = minMediaStyles[key] || {};\n        minMediaStyles[key]['--app-shell-padding'] = getPaddingValue(padding![key]);\n      }\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAcO,SAASA,sBAAuBA,CAAA;EACrCC,OAAA;EACAC,UAAA;EACAC;AACF,CAAgC;EAC1B,IAAAC,eAAA,CAAgBH,OAAO,CAAG;IAC5BC,UAAA,CAAW,qBAAqB,IAAIG,eAAgB,CAAAC,WAAA,CAAYL,OAAO,CAAC;EAAA;EAGtE,IAAAM,gBAAA,CAAiBN,OAAO,CAAG;IAC7B,IAAIA,OAAA,CAAQO,IAAM;MAChBN,UAAA,CAAW,qBAAqB,IAAIG,eAAgB,CAAAJ,OAAA,CAAQO,IAAI;IAAA;IAGlEC,IAAA,CAAKR,OAAO,EAAES,OAAQ,CAACC,GAAQ;MAC7B,IAAIA,GAAA,KAAQ,MAAQ;QAClBR,cAAA,CAAeQ,GAAG,IAAIR,cAAe,CAAAQ,GAAG,KAAK,CAAC;QAC9CR,cAAA,CAAeQ,GAAG,CAAE,sBAAqB,IAAIN,eAAgB,CAAAJ,OAAA,CAASU,GAAG,CAAC;MAAA;IAC5E,CACD;EAAA;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}